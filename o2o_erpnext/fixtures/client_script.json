[
 {
  "docstatus": 0,
  "doctype": "Client Script",
  "dt": "Supplier",
  "enabled": 1,
  "modified": "2025-01-16 10:53:58.115896",
  "module": "o2o ErpNext",
  "name": "Supplier Restrictions",
  "script": "frappe.ui.form.on('Supplier', {\n    onload: function(frm) {\n        if (frm.is_new()) {\n            frappe.call({\n                method: 'o2o_erpnext.api.supplier_validation.check_supplier_permission',\n                callback: function(r) {\n                    if (r.message) {\n                        if (!r.message.allowed) {\n                            frappe.validated = false;\n                            frappe.msgprint({\n                                title: __('Not Allowed'),\n                                indicator: 'red',\n                                message: r.message.message\n                            });\n                            setTimeout(() => {\n                                frappe.set_route('List', 'Supplier');\n                            }, 2000);\n                        } else {\n                            frm.set_value('custom_user', frappe.session.user);\n                        }\n                    }\n                }\n            });\n        }\n    },\n    \n    validate: function(frm) {\n        if (frm.is_new()) {\n            // Check if custom_user matches current user\n            if (frm.doc.custom_user !== frappe.session.user) {\n                frappe.validated = false;\n                frappe.msgprint({\n                    title: __('Not Allowed'),\n                    indicator: 'red',\n                    message: __('You cannot modify the user assignment')\n                });\n                return false;\n            }\n            return true;\n        }\n    }\n});",
  "view": "Form"
 },
 {
  "docstatus": 0,
  "doctype": "Client Script",
  "dt": "Purchase Invoice",
  "enabled": 0,
  "modified": "2024-12-06 17:21:10.284139",
  "module": null,
  "name": "purhcase invoice print button",
  "script": "frappe.listview_settings['Purchase Invoice'] = {\n    add_fields: ['name', 'supplier'],\n    \n    onload: function(listview) {\n        // Print with Header\n        listview.page.add_action_item(__('Print with Header'), function() {\n            const selected_docs = listview.get_checked_items();\n            if (selected_docs.length > 0) {\n                let successful_prints = 0;\n                \n                // Process each selected document\n                selected_docs.forEach((doc, index) => {\n                    frappe.model.with_doc('Purchase Invoice', doc.name, function() {\n                        setTimeout(() => {\n                            var w = window.open(\n                                frappe.urllib.get_full_url(\n                                    '/api/method/frappe.utils.print_format.download_pdf?' +\n                                    'doctype=' + encodeURIComponent('Purchase Invoice') +\n                                    '&name=' + encodeURIComponent(doc.name) +\n                                    '&format=' + encodeURIComponent('Final Purchase Invoice') +\n                                    '&no_letterhead=0' +\n                                    '&_lang=en'\n                                )\n                            );\n                            \n                            if (w) {\n                                successful_prints++;\n                                // Show success message after all prints are initiated\n                                if (index === selected_docs.length - 1) {\n                                    frappe.show_alert({\n                                        message: __(`Successfully initiated print for ${successful_prints} invoice(s)`),\n                                        indicator: 'green'\n                                    }, 5);\n                                }\n                            } else {\n                                frappe.show_alert({\n                                    message: __(`Failed to print ${doc.name}. Please enable pop-ups and try again.`),\n                                    indicator: 'red'\n                                }, 5);\n                            }\n                        }, index * 800); // Add delay between prints to prevent browser blocking\n                    });\n                });\n            } else {\n                frappe.show_alert({\n                    message: __('Please select at least one Purchase Invoice'),\n                    indicator: 'yellow'\n                }, 3);\n            }\n        });\n\n        // Print without Header\n        listview.page.add_action_item(__('Print without Header'), function() {\n            const selected_docs = listview.get_checked_items();\n            if (selected_docs.length > 0) {\n                let successful_prints = 0;\n                \n                // Process each selected document\n                selected_docs.forEach((doc, index) => {\n                    frappe.model.with_doc('Purchase Invoice', doc.name, function() {\n                        setTimeout(() => {\n                            var w = window.open(\n                                frappe.urllib.get_full_url(\n                                    '/api/method/frappe.utils.print_format.download_pdf?' +\n                                    'doctype=' + encodeURIComponent('Purchase Invoice') +\n                                    '&name=' + encodeURIComponent(doc.name) +\n                                    '&format=' + encodeURIComponent('Without Header Final Purchase Invoice') +\n                                    '&no_letterhead=1' +\n                                    '&_lang=en'\n                                )\n                            );\n                            \n                            if (w) {\n                                successful_prints++;\n                                // Show success message after all prints are initiated\n                                if (index === selected_docs.length - 1) {\n                                    frappe.show_alert({\n                                        message: __(`Successfully initiated print for ${successful_prints} invoice(s)`),\n                                        indicator: 'green'\n                                    }, 5);\n                                }\n                            } else {\n                                frappe.show_alert({\n                                    message: __(`Failed to print ${doc.name}. Please enable pop-ups and try again.`),\n                                    indicator: 'red'\n                                }, 5);\n                            }\n                        }, index * 800); // Add delay between prints to prevent browser blocking\n                    });\n                });\n            } else {\n                frappe.show_alert({\n                    message: __('Please select at least one Purchase Invoice'),\n                    indicator: 'yellow'\n                }, 3);\n            }\n        });\n\n        // Consolidated Print\n        listview.page.add_action_item(__('Consolidated Print'), function() {\n            const selected_docs = listview.get_checked_items();\n            if (selected_docs.length > 0) {\n                // Get names of selected invoices\n                const invoice_names = selected_docs.map(doc => doc.name);\n                \n                // Make a server call to generate consolidated PDF\n                frappe.call({\n                    method: 'frappe.utils.print_format.download_multi_pdf',\n                    args: {\n                        doctype: 'Purchase Invoice',\n                        names: invoice_names,\n                        format: 'Final Purchase Invoice',\n                        no_letterhead: 0\n                    },\n                    callback: function(r) {\n                        if (!r.exc) {\n                            frappe.show_alert({\n                                message: __('Consolidated PDF generated successfully'),\n                                indicator: 'green'\n                            }, 5);\n                        } else {\n                            frappe.show_alert({\n                                message: __('Error generating consolidated PDF'),\n                                indicator: 'red'\n                            }, 5);\n                        }\n                    }\n                });\n            } else {\n                frappe.show_alert({\n                    message: __('Please select at least one Purchase Invoice'),\n                    indicator: 'yellow'\n                }, 3);\n            }\n        });\n    }\n};",
  "view": "List"
 },
 {
  "docstatus": 0,
  "doctype": "Client Script",
  "dt": "Purchase Order",
  "enabled": 1,
  "modified": "2024-11-21 12:55:06.450561",
  "module": null,
  "name": "Purchase Order Validation",
  "script": "// Store capexTotal globally\nlet storedCapexTotal = 0;\nlet storedOpexTotal = 0;\n\n// Basic Requirement Validations\nfunction validateBranchMandatory(frm) {\n    if (!frm.doc.custom_branch) {\n        frappe.msgprint({\n            title: __('Missing Branch'),\n            message: __('Branch is mandatory for Purchase Order'),\n            indicator: 'red'\n        });\n        frappe.validated = false;\n        return false;\n    }\n    return true;\n}\n\nfunction validateTransactionDateMandatory(frm) {\n    if (!frm.doc.transaction_date) {\n        frappe.msgprint({\n            title: __('Missing Date'),\n            message: __('Transaction Date is mandatory'),\n            indicator: 'red'\n        });\n        frappe.validated = false;\n        return false;\n    }\n    return true;\n}\n\nfunction validateBranchHasSupplier(branch) {\n    if (!branch.custom_supplier) {\n        frappe.msgprint({\n            title: __('Missing Supplier'),\n            message: __('Branch must have an associated supplier'),\n            indicator: 'red'\n        });\n        frappe.validated = false;\n        return false;\n    }\n    return true;\n}\n\n// Business Rule Validations\nfunction validateOrderValue(frm, branch, supplier) {\n    // Skip validation if no items and form is not being saved\n    if (!frm.doc.items || frm.doc.items.length === 0) {\n        return true;\n    }\n    \n    const total = flt(frm.doc.total);\n    \n    // First check branch's min/max values\n    const branchMinValue = flt(branch.custom_minimum_order_value);\n    const branchMaxValue = flt(branch.custom_maximum_order_value);\n    \n    // Check if both branch values are exactly 0\n    const bothBranchValuesZero = branchMinValue === 0 && branchMaxValue === 0;\n    \n    // If not both zero, use branch values\n    if (!bothBranchValuesZero) {\n        if (total >= branchMinValue && total <= branchMaxValue) {\n            return true;\n        } else {\n            frappe.msgprint({\n                title: __('Invalid Order Value'),\n                message: __(`Total order value (${format_currency(total)}) must be between branch's minimum value ${format_currency(branchMinValue)} and maximum value ${format_currency(branchMaxValue)}`),\n                indicator: 'red'\n            });\n            frappe.validated = false;\n            return false;\n        }\n    }\n    \n    // If both branch values are zero, use supplier values\n    const supplierMinValue = flt(supplier.custom_minimum_order_value);\n    const supplierMaxValue = flt(supplier.custom_maximum_order_value);\n    \n    if (total < supplierMinValue || total > supplierMaxValue) {\n        frappe.msgprint({\n            title: __('Invalid Order Value'),\n            message: __(`Total order value (${format_currency(total)}) must be between supplier's minimum value ${format_currency(supplierMinValue)} and maximum value ${format_currency(supplierMaxValue)}`),\n            indicator: 'red'\n        });\n        frappe.validated = false;\n        return false;\n    }\n    \n    return true;\n}\n\nfunction validateBudgetDates(frm, supplier) {\n    const transaction_date = frappe.datetime.str_to_obj(frm.doc.transaction_date);\n    const transaction_day = transaction_date.getDate();\n    const budget_start_day = parseInt(supplier.custom_budget_start_date);\n    const budget_end_day = parseInt(supplier.custom_budget_end_date);\n    \n    if (transaction_day < budget_start_day || transaction_day > budget_end_day) {\n        frappe.msgprint({\n            title: __('Invalid Transaction Date'),\n            message: __(`Transaction date day (${transaction_day}) must be within supplier's budget days range: ${budget_start_day} to ${budget_end_day}`),\n            indicator: 'red'\n        });\n        frappe.validated = false;\n        return false;\n    }\n    \n    return true;\n}\n\nasync function validateBudgets(frm, branch) {\n    let capexTotal = 0;\n    let opexTotal = 0;\n    \n    // Skip if no items exist\n    if (!frm.doc.items || frm.doc.items.length === 0) {\n        return true;\n    }\n    \n    // Check each item\n    for (const item of frm.doc.items) {\n        // First verify if product type is set\n        if (!item.hasOwnProperty('custom_product_type') || !item.custom_product_type) {\n            frappe.msgprint({\n                title: __('Product Type Missing'),\n                message: __('Product Type must be set for item: ' + (item.item_code || item.idx)),\n                indicator: 'red'\n            });\n            frappe.validated = false;\n            return false;\n        }\n        \n        let itemAmount = flt(item.amount);\n        if (itemAmount) {\n            if (item.custom_product_type === 'Capex') {\n                capexTotal += itemAmount;\n            } else if (item.custom_product_type === 'Opex') {\n                opexTotal += itemAmount;\n            }\n        }\n    }\n    \n    // Store totals for later use\n    storedCapexTotal = capexTotal;\n    storedOpexTotal = opexTotal;\n    \n    // Process Capex if exists\n    if (capexTotal > 0) {\n        const branchCapexBudget = flt(branch.custom_capex_budget);\n        if (branchCapexBudget > 0) {\n            if (capexTotal > branchCapexBudget) {\n                frappe.msgprint({\n                    title: __('Capex Budget Exceeded'),\n                    message: __(`Total Capex amount (${format_currency(capexTotal)}) exceeds branch Capex budget (${format_currency(branchCapexBudget)})`),\n                    indicator: 'red'\n                });\n                frappe.validated = false;\n                return false;\n            }\n        } else {\n            try {\n                const capexResult = await frappe.db.get_value('Supplier', \n                    branch.custom_supplier,\n                    'custom_capex_budget'\n                );\n\n                if (!capexResult || !capexResult.message) {\n                    frappe.msgprint({\n                        title: __('Budget Not Found'),\n                        message: __('Could not fetch Capex budget from supplier'),\n                        indicator: 'red'\n                    });\n                    frappe.validated = false;\n                    return false;\n                }\n\n                const supplierCapexBudget = flt(capexResult.message.custom_capex_budget);\n                if (capexTotal > supplierCapexBudget) {\n                    frappe.msgprint({\n                        title: __('Capex Budget Exceeded'),\n                        message: __(`Total Capex amount (${format_currency(capexTotal)}) exceeds supplier Capex budget (${format_currency(supplierCapexBudget)})`),\n                        indicator: 'red'\n                    });\n                    frappe.validated = false;\n                    return false;\n                }\n            } catch (error) {\n                console.error('Error checking supplier Capex budget:', error);\n                frappe.msgprint({\n                    title: __('Validation Error'),\n                    message: __('Error checking supplier Capex budget'),\n                    indicator: 'red'\n                });\n                frappe.validated = false;\n                return false;\n            }\n        }\n    }\n\n    // Process Opex if exists\n    if (opexTotal > 0) {\n        const branchOpexBudget = flt(branch.custom_opex_budget);\n        if (branchOpexBudget > 0) {\n            if (opexTotal > branchOpexBudget) {\n                frappe.msgprint({\n                    title: __('Opex Budget Exceeded'),\n                    message: __(`Total Opex amount (${format_currency(opexTotal)}) exceeds branch Opex budget (${format_currency(branchOpexBudget)})`),\n                    indicator: 'red'\n                });\n                frappe.validated = false;\n                return false;\n            }\n        } else {\n            try {\n                const opexResult = await frappe.db.get_value('Supplier', \n                    branch.custom_supplier,\n                    'custom_opex_budget'\n                );\n\n                if (!opexResult || !opexResult.message) {\n                    frappe.msgprint({\n                        title: __('Budget Not Found'),\n                        message: __('Could not fetch Opex budget from supplier'),\n                        indicator: 'red'\n                    });\n                    frappe.validated = false;\n                    return false;\n                }\n\n                const supplierOpexBudget = flt(opexResult.message.custom_opex_budget);\n                if (opexTotal > supplierOpexBudget) {\n                    frappe.msgprint({\n                        title: __('Opex Budget Exceeded'),\n                        message: __(`Total Opex amount (${format_currency(opexTotal)}) exceeds supplier Opex budget (${format_currency(supplierOpexBudget)})`),\n                        indicator: 'red'\n                    });\n                    frappe.validated = false;\n                    return false;\n                }\n            } catch (error) {\n                console.error('Error checking supplier Opex budget:', error);\n                frappe.msgprint({\n                    title: __('Validation Error'),\n                    message: __('Error checking supplier Opex budget'),\n                    indicator: 'red'\n                });\n                frappe.validated = false;\n                return false;\n            }\n        }\n    }\n    \n    return true;\n}\n\n// Updated function with branch and supplier budget handling\nasync function updateBudgets(frm, branch) {\n    try {\n        // Update Capex Budget if needed\n        if (storedCapexTotal > 0) {\n            const branchCapexBudget = flt(branch.custom_capex_budget);\n            if (branchCapexBudget > 0) {\n                const newBranchCapexBudget = branchCapexBudget - flt(storedCapexTotal);\n                await frappe.db.set_value('Branch', \n                    frm.doc.custom_branch,\n                    'custom_capex_budget',\n                    newBranchCapexBudget\n                );\n                \n                frappe.show_alert({\n                    message: __(`Branch Capex budget updated to ${format_currency(newBranchCapexBudget)}`),\n                    indicator: 'green'\n                }, 5);\n            } else {\n                const capexResult = await frappe.db.get_value('Supplier', \n                    branch.custom_supplier,\n                    'custom_capex_budget'\n                );\n                \n                if (capexResult && capexResult.message) {\n                    const supplierCapexBudget = flt(capexResult.message.custom_capex_budget);\n                    const newSupplierCapexBudget = supplierCapexBudget - flt(storedCapexTotal);\n                    \n                    await frappe.db.set_value('Supplier', \n                        branch.custom_supplier,\n                        'custom_capex_budget',\n                        newSupplierCapexBudget\n                    );\n                    \n                    frappe.show_alert({\n                        message: __(`Supplier Capex budget updated to ${format_currency(newSupplierCapexBudget)}`),\n                        indicator: 'green'\n                    }, 5);\n                }\n            }\n        }\n\n        // Update Opex Budget if needed\n        if (storedOpexTotal > 0) {\n            const branchOpexBudget = flt(branch.custom_opex_budget);\n            if (branchOpexBudget > 0) {\n                const newBranchOpexBudget = branchOpexBudget - flt(storedOpexTotal);\n                await frappe.db.set_value('Branch', \n                    frm.doc.custom_branch,\n                    'custom_opex_budget',\n                    newBranchOpexBudget\n                );\n                \n                frappe.show_alert({\n                    message: __(`Branch Opex budget updated to ${format_currency(newBranchOpexBudget)}`),\n                    indicator: 'green'\n                }, 5);\n            } else {\n                const opexResult = await frappe.db.get_value('Supplier', \n                    branch.custom_supplier,\n                    'custom_opex_budget'\n                );\n                \n                if (opexResult && opexResult.message) {\n                    const supplierOpexBudget = flt(opexResult.message.custom_opex_budget);\n                    const newSupplierOpexBudget = supplierOpexBudget - flt(storedOpexTotal);\n                    \n                    await frappe.db.set_value('Supplier', \n                        branch.custom_supplier,\n                        'custom_opex_budget',\n                        newSupplierOpexBudget\n                    );\n                    \n                    frappe.show_alert({\n                        message: __(`Supplier Opex budget updated to ${format_currency(newSupplierOpexBudget)}`),\n                        indicator: 'green'\n                    }, 5);\n                }\n            }\n        }\n    } catch (error) {\n        console.error('Error updating budgets:', error);\n        frappe.msgprint({\n            title: __('Error'),\n            message: __('Failed to update budgets'),\n            indicator: 'red'\n        });\n    }\n}\n\n// Main Orchestrator with Updated Sequence\nasync function validateAll(frm) {\n    try {\n        // Always validate these basic requirements first\n        if (!validateBranchMandatory(frm)) return false;\n        if (!validateTransactionDateMandatory(frm)) return false;\n        \n        // Get branch data\n        const branch = await frappe.db.get_value('Branch', \n            frm.doc.custom_branch,\n            ['custom_supplier', 'custom_minimum_order_value', 'custom_maximum_order_value', 'custom_capex_budget','custom_opex_budget']\n        );\n        \n        if (!branch || !branch.message) {\n            frappe.msgprint({\n                title: __('Invalid Branch'),\n                message: __('Could not fetch branch details'),\n                indicator: 'red'\n            });\n            frappe.validated = false;\n            return false;\n        }\n        \n        // Validate branch has supplier\n        if (!validateBranchHasSupplier(branch.message)) return false;\n        \n        // Get supplier data\n        const supplier = await frappe.db.get_value('Supplier',\n            branch.message.custom_supplier,\n            ['custom_minimum_order_value', 'custom_maximum_order_value', \n             'custom_budget_start_date', 'custom_budget_end_date']\n        );\n        \n        if (!supplier || !supplier.message) {\n            frappe.msgprint({\n                title: __('Invalid Supplier'),\n                message: __('Could not fetch supplier details'),\n                indicator: 'red'\n            });\n            frappe.validated = false;\n            return false;\n        }\n\n        // Only validate budget dates after branch and supplier are set\n        if (!validateBudgetDates(frm, supplier.message)) return false;\n\n        // Skip remaining validations if no items exist and not saving\n        if (!frm.doc.items || frm.doc.items.length === 0) {\n            if (!frm.doc.__unsaved) {\n                return true;\n            }\n        }\n\n        // Only proceed with these validations if items exist\n        if (frm.doc.items && frm.doc.items.length > 0) {\n            // Validate order value after items are added\n            if (!validateOrderValue(frm, branch.message, supplier.message)) return false;\n            \n            // Validate capex budget last\n            if (!await validateBudgets(frm, branch.message)) return false;\n        }\n        \n        return true;\n    } catch (error) {\n        console.error('Validation Error:', error);\n        frappe.msgprint({\n            title: __('Validation Error'),\n            message: __('An error occurred during validation. Please try again.'),\n            indicator: 'red'\n        });\n        frappe.validated = false;\n        return false;\n    }\n}\n\n// Event Handlers\nfrappe.ui.form.on('Purchase Order', {\n    setup: function(frm) {\n        frm.custom_validate = function() {\n            return validateAll(frm);\n        };\n    },\n    validate: function(frm) {\n        if (!validateAll(frm)) {\n            frappe.validated = false;\n            return false;\n        }\n    },\n    before_save: function(frm) {\n        if (!validateAll(frm)) {\n            frappe.validated = false;\n            return false;\n        }\n    },\n    after_save: function(frm) {\n    if ((storedCapexTotal > 0 || storedOpexTotal > 0) && frm.doc.custom_branch) {\n        frappe.db.get_value('Branch', \n            frm.doc.custom_branch,\n            ['custom_supplier', 'custom_capex_budget', 'custom_opex_budget'],\n            function(r) {\n                if (r) {\n                    updateBudgets(frm, r);\n                }\n            }\n        );\n    }\n},\n    custom_branch: function(frm) {\n        validateAll(frm);\n    },\n    transaction_date: function(frm) {\n        validateAll(frm);\n    }\n});\n\nfrappe.ui.form.on('Purchase Order Item', {\n    items_add: function(frm, cdt, cdn) {\n        validateAll(frm);\n    },\n    items_remove: function(frm, cdt, cdn) {\n        validateAll(frm);\n    },\n    custom_product_type: function(frm, cdt, cdn) {\n        validateAll(frm);\n    },\n    amount: function(frm, cdt, cdn) {\n        validateAll(frm);\n    }\n});",
  "view": "Form"
 },
 {
  "docstatus": 0,
  "doctype": "Client Script",
  "dt": "Purchase Order",
  "enabled": 0,
  "modified": "2024-11-21 13:07:10.492661",
  "module": "o2o ErpNext",
  "name": "PO Validation V2",
  "script": "// Store capexTotal globally\nlet storedCapexTotal = 0;\n\n// Basic Requirement Validations\nfunction validateBranchMandatory(frm) {\n    if (!frm.doc.custom_branch) {\n        frappe.msgprint({\n            title: __('Missing Branch'),\n            message: __('Branch is mandatory for Purchase Order'),\n            indicator: 'red'\n        });\n        frappe.validated = false;\n        return false;\n    }\n    return true;\n}\n\nfunction validateTransactionDateMandatory(frm) {\n    if (!frm.doc.transaction_date) {\n        frappe.msgprint({\n            title: __('Missing Date'),\n            message: __('Transaction Date is mandatory'),\n            indicator: 'red'\n        });\n        frappe.validated = false;\n        return false;\n    }\n    return true;\n}\n\nfunction validateBranchHasSupplier(branch) {\n    if (!branch.custom_supplier) {\n        frappe.msgprint({\n            title: __('Missing Supplier'),\n            message: __('Branch must have an associated supplier'),\n            indicator: 'red'\n        });\n        frappe.validated = false;\n        return false;\n    }\n    return true;\n}\n\n// Business Rule Validations\nfunction validateOrderValue(frm, branch, supplier) {\n    // Skip validation if no items and form is not being saved\n    if (!frm.doc.items || frm.doc.items.length === 0) {\n        return true;\n    }\n    \n    const total = flt(frm.doc.total);\n    \n    // First check branch's min/max values\n    const branchMinValue = flt(branch.custom_minimum_order_value);\n    const branchMaxValue = flt(branch.custom_maximum_order_value);\n    \n    // Check if both branch values are exactly 0\n    const bothBranchValuesZero = branchMinValue === 0 && branchMaxValue === 0;\n    \n    // If not both zero, use branch values\n    if (!bothBranchValuesZero) {\n        if (total >= branchMinValue && total <= branchMaxValue) {\n            return true;\n        } else {\n            frappe.msgprint({\n                title: __('Invalid Order Value'),\n                message: __(`Total order value (${format_currency(total)}) must be between branch's minimum value ${format_currency(branchMinValue)} and maximum value ${format_currency(branchMaxValue)}`),\n                indicator: 'red'\n            });\n            frappe.validated = false;\n            return false;\n        }\n    }\n    \n    // If both branch values are zero, use supplier values\n    const supplierMinValue = flt(supplier.custom_minimum_order_value);\n    const supplierMaxValue = flt(supplier.custom_maximum_order_value);\n    \n    if (total < supplierMinValue || total > supplierMaxValue) {\n        frappe.msgprint({\n            title: __('Invalid Order Value'),\n            message: __(`Total order value (${format_currency(total)}) must be between supplier's minimum value ${format_currency(supplierMinValue)} and maximum value ${format_currency(supplierMaxValue)}`),\n            indicator: 'red'\n        });\n        frappe.validated = false;\n        return false;\n    }\n    \n    return true;\n}\n\nfunction validateBudgetDates(frm, supplier) {\n    const transaction_date = frappe.datetime.str_to_obj(frm.doc.transaction_date);\n    const transaction_day = transaction_date.getDate();\n    const budget_start_day = parseInt(supplier.custom_budget_start_date);\n    const budget_end_day = parseInt(supplier.custom_budget_end_date);\n    \n    if (transaction_day < budget_start_day || transaction_day > budget_end_day) {\n        frappe.msgprint({\n            title: __('Invalid Transaction Date'),\n            message: __(`Transaction date day (${transaction_day}) must be within supplier's budget days range: ${budget_start_day} to ${budget_end_day}`),\n            indicator: 'red'\n        });\n        frappe.validated = false;\n        return false;\n    }\n    \n    return true;\n}\n\nasync function validateCapexBudget(frm, branch) {\n    let capexTotal = 0;\n    \n    // Skip if no items exist\n    if (!frm.doc.items || frm.doc.items.length === 0) {\n        return true;\n    }\n    \n    // Check each item\n    for (const item of frm.doc.items) {\n        // First verify if product type is set\n        if (!item.hasOwnProperty('custom_product_type') || !item.custom_product_type) {\n            frappe.msgprint({\n                title: __('Product Type Missing'),\n                message: __('Product Type must be set for item: ' + (item.item_code || item.idx)),\n                indicator: 'red'\n            });\n            frappe.validated = false;\n            return false;\n        }\n        \n        // Only process if it's a Capex item\n        if (item.custom_product_type === 'Capex') {\n            let itemAmount = flt(item.amount);\n            if (itemAmount) {\n                capexTotal += itemAmount;\n            }\n        }\n    }\n    \n    // Store capexTotal for later use\n    storedCapexTotal = capexTotal;\n    \n    // If no Capex items or total is zero, return true\n    if (capexTotal === 0) return true;\n    \n    // First check branch capex budget\n    const branchCapexBudget = flt(branch.custom_capex_budget);\n    \n    // If branch has valid capex budget, validate against it\n    if (branchCapexBudget > 0) {\n        if (capexTotal > branchCapexBudget) {\n            frappe.msgprint({\n                title: __('Capex Budget Exceeded'),\n                message: __(`Total Capex amount (${format_currency(capexTotal)}) exceeds branch Capex budget (${format_currency(branchCapexBudget)})`),\n                indicator: 'red'\n            });\n            frappe.validated = false;\n            return false;\n        }\n        return true;\n    }\n    \n    // If branch budget not set, check supplier budget\n    try {\n        const result = await frappe.db.get_value('Supplier', \n            branch.custom_supplier,\n            'custom_capex_budget'\n        );\n\n        if (!result || !result.message) {\n            frappe.msgprint({\n                title: __('Budget Not Found'),\n                message: __('Could not fetch Capex budget from supplier'),\n                indicator: 'red'\n            });\n            frappe.validated = false;\n            return false;\n        }\n\n        const supplierCapexBudget = flt(result.message.custom_capex_budget);\n        if (capexTotal > supplierCapexBudget) {\n            frappe.msgprint({\n                title: __('Capex Budget Exceeded'),\n                message: __(`Total Capex amount (${format_currency(capexTotal)}) exceeds supplier Capex budget (${format_currency(supplierCapexBudget)})`),\n                indicator: 'red'\n            });\n            frappe.validated = false;\n            return false;\n        }\n        \n        return true;\n    } catch (error) {\n        console.error('Error checking supplier budget:', error);\n        frappe.msgprint({\n            title: __('Validation Error'),\n            message: __('Error checking supplier Capex budget'),\n            indicator: 'red'\n        });\n        frappe.validated = false;\n        return false;\n    }\n}\n\n// Updated function with branch and supplier budget handling\nasync function updateCapexBudget(frm, branch, capexTotal) {\n    try {\n        // First check branch budget\n        const branchCapexBudget = flt(branch.custom_capex_budget);\n\n        if (branchCapexBudget > 0) {\n            // If branch has budget, update branch budget\n            const newBranchBudget = branchCapexBudget - flt(capexTotal);\n            await frappe.db.set_value('Branch', \n                frm.doc.custom_branch,\n                'custom_capex_budget',\n                newBranchBudget\n            );\n            \n            frappe.show_alert({\n                message: __(`Branch Capex budget updated to ${format_currency(newBranchBudget)}`),\n                indicator: 'green'\n            }, 5);\n            \n        } else {\n            // If branch budget not set or zero, update supplier budget\n            const result = await frappe.db.get_value('Supplier', \n                branch.custom_supplier,\n                'custom_capex_budget'\n            );\n            \n            if (!result || !result.message) {\n                frappe.msgprint({\n                    title: __('Error'),\n                    message: __('Could not fetch supplier capex budget'),\n                    indicator: 'red'\n                });\n                return;\n            }\n\n            const supplierBudget = flt(result.message.custom_capex_budget);\n            const newSupplierBudget = supplierBudget - flt(capexTotal);\n            \n            await frappe.db.set_value('Supplier', \n                branch.custom_supplier,\n                'custom_capex_budget',\n                newSupplierBudget\n            );\n            \n            frappe.show_alert({\n                message: __(`Supplier Capex budget updated to ${format_currency(newSupplierBudget)}`),\n                indicator: 'green'\n            }, 5);\n        }\n\n    } catch (error) {\n        console.error('Error updating capex budget:', error);\n        frappe.msgprint({\n            title: __('Error'),\n            message: __('Failed to update Capex budget'),\n            indicator: 'red'\n        });\n    }\n}\n\n// Main Orchestrator with Updated Sequence\nasync function validateAll(frm) {\n    try {\n        // Always validate these basic requirements first\n        if (!validateBranchMandatory(frm)) return false;\n        if (!validateTransactionDateMandatory(frm)) return false;\n        \n        // Get branch data\n        const branch = await frappe.db.get_value('Branch', \n            frm.doc.custom_branch,\n            ['custom_supplier', 'custom_minimum_order_value', 'custom_maximum_order_value', 'custom_capex_budget']\n        );\n        \n        if (!branch || !branch.message) {\n            frappe.msgprint({\n                title: __('Invalid Branch'),\n                message: __('Could not fetch branch details'),\n                indicator: 'red'\n            });\n            frappe.validated = false;\n            return false;\n        }\n        \n        // Validate branch has supplier\n        if (!validateBranchHasSupplier(branch.message)) return false;\n        \n        // Get supplier data\n        const supplier = await frappe.db.get_value('Supplier',\n            branch.message.custom_supplier,\n            ['custom_minimum_order_value', 'custom_maximum_order_value', \n             'custom_budget_start_date', 'custom_budget_end_date']\n        );\n        \n        if (!supplier || !supplier.message) {\n            frappe.msgprint({\n                title: __('Invalid Supplier'),\n                message: __('Could not fetch supplier details'),\n                indicator: 'red'\n            });\n            frappe.validated = false;\n            return false;\n        }\n\n        // Only validate budget dates after branch and supplier are set\n        if (!validateBudgetDates(frm, supplier.message)) return false;\n\n        // Skip remaining validations if no items exist and not saving\n        if (!frm.doc.items || frm.doc.items.length === 0) {\n            if (!frm.doc.__unsaved) {\n                return true;\n            }\n        }\n\n        // Only proceed with these validations if items exist\n        if (frm.doc.items && frm.doc.items.length > 0) {\n            // Validate order value after items are added\n            if (!validateOrderValue(frm, branch.message, supplier.message)) return false;\n            \n            // Validate capex budget last\n            if (!await validateCapexBudget(frm, branch.message)) return false;\n        }\n        \n        return true;\n    } catch (error) {\n        console.error('Validation Error:', error);\n        frappe.msgprint({\n            title: __('Validation Error'),\n            message: __('An error occurred during validation. Please try again.'),\n            indicator: 'red'\n        });\n        frappe.validated = false;\n        return false;\n    }\n}\n\n// Event Handlers\nfrappe.ui.form.on('Purchase Order', {\n    setup: function(frm) {\n        frm.custom_validate = function() {\n            return validateAll(frm);\n        };\n    },\n    validate: function(frm) {\n        if (!validateAll(frm)) {\n            frappe.validated = false;\n            return false;\n        }\n    },\n    before_save: function(frm) {\n        if (!validateAll(frm)) {\n            frappe.validated = false;\n            return false;\n        }\n    },\n    after_save: function(frm) {\n        if (storedCapexTotal > 0 && frm.doc.custom_branch) {\n            frappe.db.get_value('Branch', \n                frm.doc.custom_branch,\n                ['custom_supplier', 'custom_capex_budget'],\n                function(r) {\n                    if (r) {\n                        updateCapexBudget(frm, r, storedCapexTotal);\n                    }\n                }\n            );\n        }\n    },\n    custom_branch: function(frm) {\n        validateAll(frm);\n    },\n    transaction_date: function(frm) {\n        validateAll(frm);\n    }\n});\n\nfrappe.ui.form.on('Purchase Order Item', {\n    items_add: function(frm, cdt, cdn) {\n        validateAll(frm);\n    },\n    items_remove: function(frm, cdt, cdn) {\n        validateAll(frm);\n    },\n    custom_product_type: function(frm, cdt, cdn) {\n        validateAll(frm);\n    },\n    amount: function(frm, cdt, cdn) {\n        validateAll(frm);\n    }\n});",
  "view": "Form"
 },
 {
  "docstatus": 0,
  "doctype": "Client Script",
  "dt": "Purchase Receipt",
  "enabled": 0,
  "modified": "2024-12-05 17:17:27.576211",
  "module": "o2o ErpNext",
  "name": "Purchase receipt merge into invoice v4",
  "script": "frappe.listview_settings['Purchase Receipt'] = {\n    onload: function(listview) {\n        listview.page.add_action_item(__('Create Purchase Invoice'), function() {\n            try {\n                const selected_docs = listview.get_checked_items();\n\n                if (selected_docs.length === 0) {\n                    frappe.msgprint({\n                        title: __('Warning'),\n                        indicator: 'red',\n                        message: __('Please select at least one Purchase Receipt')\n                    });\n                    return;\n                }\n\n                // Get fiscal year first\n                frappe.call({\n                    method: 'frappe.client.get_list',\n                    args: {\n                        doctype: 'Fiscal Year',\n                        filters: {\n                            'year_start_date': ['<=', frappe.datetime.get_today()],\n                            'year_end_date': ['>=', frappe.datetime.get_today()]\n                        },\n                        fields: ['name']\n                    },\n                    callback: function(fiscal_response) {\n                        try {\n                            let display_fiscal_year = '';\n                            if (fiscal_response.message && fiscal_response.message.length > 0) {\n                                let fiscal_year = fiscal_response.message[0].name;\n                                let start_year = fiscal_year.split('-')[0];\n                                let end_year = fiscal_year.split('-')[1];\n                                display_fiscal_year = start_year.substring(2) + '-' + end_year.substring(2);\n                            }\n\n                            frappe.call({\n                                method: 'frappe.client.get',\n                                args: { \n                                    doctype: 'Purchase Receipt', \n                                    name: selected_docs[0].name \n                                },\n                                callback: function(firstDocResponse) {\n                                    try {\n                                        if (!firstDocResponse.message) {\n                                            throw new Error('Failed to fetch first Purchase Receipt');\n                                        }\n\n                                        const firstDoc = firstDocResponse.message;\n                                        const firstVendor = firstDoc.custom_vendor;\n                                        const firstSupplier = firstDoc.supplier;\n                                        const firstBranch = firstDoc.custom_branch;\n                                        const firstTaxCategory = firstDoc.tax_category;\n                                        const firstTaxesAndCharges = firstDoc.taxes_and_charges;\n                                        const isReturn = firstDoc.is_return || 0;\n                                        const vendor_code = firstVendor ? firstVendor.substring(0, 5).toUpperCase() : '';\n\n                                        const supplier_address = firstDoc.supplier_address;\n                                        const shipping_address = firstDoc.shipping_address;\n                                        const billing_address = firstDoc.billing_address;\n                                        const vendor_address = firstDoc.custom_vendor_address;\n\n                                        const naming_series = isReturn ? \n                                            `DN./.${display_fiscal_year}./.###` : \n                                            `${vendor_code}./.${display_fiscal_year}./.###`;\n\n                                        if (!firstTaxCategory || !firstTaxesAndCharges) {\n                                            frappe.msgprint({\n                                                title: __('Error'),\n                                                indicator: 'red',\n                                                message: __('Tax Category and Taxes and Charges must be set for the first selected receipt.')\n                                            });\n                                            return;\n                                        }\n\n                                        if (!firstBranch) {\n                                            frappe.msgprint({\n                                                title: __('Error'),\n                                                indicator: 'red',\n                                                message: __('Branch is not set for the first selected receipt.')\n                                            });\n                                            return;\n                                        }\n\n                                        frappe.call({\n                                            method: 'frappe.client.get',\n                                            args: {\n                                                doctype: 'Purchase Taxes and Charges Template',\n                                                name: firstTaxesAndCharges\n                                            },\n                                            callback: function(tax_template_response) {\n                                                try {\n                                                    if (!tax_template_response.message) {\n                                                        throw new Error('Failed to fetch tax template');\n                                                    }\n\n                                                    const tax_template = tax_template_response.message;\n                                                    let consolidatedItems = [];\n                                                    let totalGrandTotal = 0;\n                                                    let totalFreightAmount = 0;\n                                                    let freightCostEntries = [];\n\n                                                    const promises = selected_docs.map(doc => \n                                                        new Promise((resolve, reject) => {\n                                                            frappe.call({\n                                                                method: 'frappe.client.get',\n                                                                args: { \n                                                                    doctype: 'Purchase Receipt', \n                                                                    name: doc.name \n                                                                },\n                                                                callback: function(r) {\n                                                                    if (r.message) {\n                                                                        resolve(r.message);\n                                                                    } else {\n                                                                        reject('Failed to fetch receipt');\n                                                                    }\n                                                                }\n                                                            });\n                                                        })\n                                                    );\n\n                                                    Promise.all(promises)\n                                                        .then(receipts => {\n                                                            freightCostEntries = receipts.map(receipt => ({\n                                                                purchase_receipt: receipt.name,\n                                                                hsnsac: receipt.custom_freight_hsnsac || \"\",\n                                                                quantity: flt(receipt.custom_weight_in_kg || 0),\n                                                                gst_rate: flt(receipt.custom_freight_tax_rate_ || 0),\n                                                                rate: flt(receipt.custom_rate_per_kg || 0),\n                                                                total_rate: flt(receipt.custom_freight_amount || 0),\n                                                                cgst: flt(receipt.custom_cgst_amount || 0),\n                                                                sgst: flt(receipt.custom_sgst_amount || 0),\n                                                                igst: flt(receipt.custom_igst_amount || 0),\n                                                                amount: flt(receipt.custom_total_freight_amount || 0)\n                                                            }));\n\n                                                            receipts.forEach(receipt => {\n                                                                totalGrandTotal += flt(receipt.custom_grand_total || 0);\n                                                                totalFreightAmount += flt(receipt.custom_freight_amount || 0);\n\n                                                                receipt.items.forEach(item => {\n                                                                    const existingItem = consolidatedItems.find(\n                                                                        ci => ci.item_name.toLowerCase() === item.item_name.toLowerCase() && \n                                                                             ci.custom_gstn_value === item.custom_gstn_value\n                                                                    );\n\n                                                                    if (existingItem) {\n                                                                        // Add UOM validation before consolidation\n                                                                        if (existingItem.uom !== item.uom) {\n                                                                            frappe.throw(__(`UOM mismatch for item ${item.item_code}. Cannot consolidate items with different UOMs.`));\n                                                                        }\n\n                                                                        const newQty = flt(existingItem.qty) + flt(item.qty);\n                                                                        const newAmount = flt(existingItem.amount) + flt(item.amount);\n                                                                        \n                                                                        existingItem.qty = newQty;\n                                                                        existingItem.amount = newAmount;\n                                                                        existingItem.rate = flt(newAmount / newQty);\n                                                                        existingItem.custom_grand_total = flt(existingItem.custom_grand_total || 0) + flt(item.custom_grand_total || 0);\n                                                                        \n                                                                        // Store PR references\n                                                                        if (!existingItem.pr_details) existingItem.pr_details = [];\n                                                                        existingItem.pr_details.push({\n                                                                            pr_detail: item.name,\n                                                                            purchase_receipt: receipt.name,\n                                                                            amount: flt(item.amount),\n                                                                            purchase_order: item.purchase_order,\n                                                                            purchase_order_item: item.purchase_order_item\n                                                                        });\n                                                                    } else {\n                                                                        consolidatedItems.push({\n                                                                            item_code: item.item_code,\n                                                                            item_name: item.item_name,\n                                                                            qty: flt(item.qty),\n                                                                            rate: flt(item.rate),\n                                                                            amount: flt(item.amount),\n                                                                            warehouse: item.warehouse,\n                                                                            custom_grand_total: flt(item.custom_grand_total || 0),\n                                                                            custom_gstn_value: item.custom_gstn_value,\n                                                                            uom: item.uom,\n                                                                            stock_uom: item.stock_uom,\n                                                                            conversion_factor: item.conversion_factor,\n                                                                            purchase_receipt: receipt.name,\n                                                                            pr_detail: item.name,\n                                                                            purchase_order: item.purchase_order,\n                                                                            purchase_order_item: item.purchase_order_item,\n                                                                            pr_details: [{\n                                                                                pr_detail: item.name,\n                                                                                purchase_receipt: receipt.name,\n                                                                                amount: flt(item.amount),\n                                                                                purchase_order: item.purchase_order,\n                                                                                purchase_order_item: item.purchase_order_item\n                                                                            }]\n                                                                        });\n                                                                    }\n                                                                });\n                                                            });\n\n                                                            let taxes = [];\n                                                            if (tax_template.taxes) {\n                                                                taxes = tax_template.taxes.map((tax, idx) => {\n                                                                    let row_id = null;\n                                                                    if (tax.charge_type === 'On Previous Row Amount' || tax.charge_type === 'On Previous Row Total') {\n                                                                        if (tax.row_id && parseInt(tax.row_id) < (idx + 1)) {\n                                                                            row_id = tax.row_id;\n                                                                        } else {\n                                                                            frappe.throw(__(`Invalid row reference in tax row ${idx + 1}`));\n                                                                        }\n                                                                    }\n\n                                                                    return {\n                                                                        account_head: tax.account_head,\n                                                                        charge_type: tax.charge_type,\n                                                                        row_id: row_id,\n                                                                        description: tax.description,\n                                                                        included_in_print_rate: tax.included_in_print_rate || 0,\n                                                                        included_in_paid_amount: tax.included_in_paid_amount || 0,\n                                                                        rate: tax.rate,\n                                                                        account_currency: tax.account_currency,\n                                                                        cost_center: tax.cost_center\n                                                                    };\n                                                                });\n                                                            }\n\n                                                            const doc = {\n                                                                doctype: 'Purchase Invoice',\n                                                                naming_series: naming_series,\n                                                                custom_fiscal_year: display_fiscal_year,\n                                                                custom_vendor_code: vendor_code,\n                                                                supplier: firstSupplier,\n                                                                custom_vendor: firstVendor,\n                                                                custom_branch: firstBranch,\n                                                                tax_category: firstTaxCategory,\n                                                                taxes_and_charges: firstTaxesAndCharges,\n                                                                taxes: taxes,\n                                                                items: consolidatedItems,\n                                                                custom_grand_total: totalGrandTotal,\n                                                                custom_freight_amount: totalFreightAmount,\n                                                                update_stock: 0,\n                                                                is_return: isReturn,\n                                                                supplier_address: supplier_address,\n                                                                shipping_address: shipping_address,\n                                                                billing_address: billing_address,\n                                                                custom_vendor_address: vendor_address,\n                                                                custom_freight_cost_data: freightCostEntries\n                                                            };\n\n                                                            console.log('Creating Purchase Invoice with:', doc);\n\n                                                            frappe.call({\n                                                                method: 'frappe.client.insert',\n                                                                args: { doc: doc },\n                                                                callback: function(response) {\n                                                                    if (response.message) {\n                                                                        // Create connections for each PR item\n                                                                        consolidatedItems.forEach(item => {\n                                                                            if (item.pr_details) {\n                                                                                item.pr_details.forEach(pr_detail => {\n                                                                                    frappe.call({\n                                                                                        method: 'frappe.client.set_value',\n                                                                                        args: {\n                                                                                            doctype: 'Purchase Receipt Item',\n                                                                                            name: pr_detail.pr_detail,\n                                                                                            fieldname: {\n                                                                                                'billed_amt': pr_detail.amount,\n                                                                                                'purchase_invoice': response.message.name\n                                                                                            }\n                                                                                        }\n                                                                                    });\n                                                                                });\n                                                                            }\n                                                                        });\n\n                                                                        frappe.msgprint({\n                                                                            title: __('Success'),\n                                                                            indicator: 'green',\n                                                                            message: __('Purchase Invoice created successfully: ') + response.message.name\n                                                                        });\n\n                                                                        // Refresh listview to show updated status\n                                                                        listview.refresh();\n                                                                    } else {\n                                                                        frappe.msgprint({\n                                                                            title: __('Error'),\n                                                                            indicator: 'red',\n                                                                            message: __('Failed to create Purchase Invoice')\n                                                                        });\n                                                                    }\n                                                                }\n                                                            });\n                                                        })\n                                                        .catch(error => {\n                                                            console.error('Error processing receipts:', error);\n                                                            frappe.msgprint({\n                                                                title: __('Error'),\n                                                                indicator: 'red',\n                                                                message: __('Error processing receipts: ') + error\n                                                            });\n                                                        });\n                                                } catch (error) {\n                                                    console.error('Error in tax template processing:', error);\n                                                    frappe.msgprint({\n                                                        title: __('Error'),\n                                                        indicator: 'red',\n                                                        message: __('Error in tax template processing: ') + error.message\n                                                    });\n                                                }\n                                            }\n                                        });\n                                    } catch (error) {\n                                        console.error('Error processing first document:', error);\n                                        frappe.msgprint({\n                                            title: __('Error'),\n                                            indicator: 'red',\n                                            message: __('Error processing first document: ') + error.message\n                                        });\n                                    }\n                                }\n                            });\n                        } catch (error) {\n                            console.error('Error in fiscal year processing:', error);\n                            frappe.msgprint({\n                                title: __('Error'),\n                                indicator: 'red',\n                                message: __('Error in fiscal year processing: ') + error.message\n                            });\n                        }\n                    }\n                });\n            } catch (error) {\n                console.error('Error in main function:', error);\n                frappe.msgprint({\n                    title: __('Error'),\n                    indicator: 'red',\n                    message: __('Error in main function: ') + error.message\n                });\n            }\n        });\n    },\n\n    onrender: function(listview) {\n        listview.page.wrapper.find('.list-row-checkbox').removeClass('hide');\n    }\n};",
  "view": "List"
 },
 {
  "docstatus": 0,
  "doctype": "Client Script",
  "dt": "Purchase Order",
  "enabled": 0,
  "modified": "2024-12-03 11:31:29.550467",
  "module": "o2o ErpNext",
  "name": "PO Backup Client Script-03-12-2024",
  "script": "// frappe.ui.form.on('Purchase Order', {\n// \trefresh(frm) {\n// \t\t// your code here\n// \t\tfrm.set_query(\"custom_branch\", function() {\n//         return {\n//             \"filters\": {\n//                 \"custom_child_branch\": 1,\n//             }\n//         };\n//     });\n// \t}\n// });\n\nfrappe.ui.form.on(\"Purchase Order\", \"validate\", function(frm) {\n    cur_frm.set_value(\"custom_created_user\", frm.doc.owner);\n});\n\nfrappe.ui.form.on('Purchase Order', {\n\trefresh(frm) {\n\t\t// your code here\n\t\tfrm.set_query(\"custom_vendor\", function() {\n        return {\n            \"filters\": {\n                \"custom_is_vendor\": 1,\n            }\n        };\n    });\n\t}\n});\n\nfrappe.ui.form.on('Purchase Order', {\n\trefresh(frm) {\n\t\t// your code here\n\t\tfrm.set_query(\"supplier\", function() {\n        return {\n            \"filters\": {\n                \"custom_entity\": 1,\n            }\n        };\n    });\n\t}\n})\n\nfrappe.ui.form.on('Purchase Order', {\n\trefresh(frm) {\n\t\t// your code here\n\t\tfrm.set_query(\"supplier\", function() {\n        return {\n            \"filters\": {\n                \"custom_is_vendor\": 0,\n            }\n        };\n    });\n\t}\n});\n\nfrappe.ui.form.on(\"Purchase Order\", {\n    refresh:function(frm) {\n        $('.form-attachments').hide();\n        $('.form-tags').hide();\n        $('.form-share').hide();\n        $('.form-attachments').hide();\n    }\n});\n\n\nfrappe.ui.form.on('Purchase Order', {\n\trefresh(frm) {\n\t\t// your code here\n\t\t    frm.set_query(\"supplier_address\", function() {\n            return {\n                \"filters\": {\n                    \"address_type\":\"Billing\" ,\n                    // \"custom_branch\": doc.custom_branch ,\n                    \"name\": doc.supplier ,\n                }\n            };\n        });\n\t}\n});\n\n// frappe.ui.form.on('Purchase Order', {\n// \trefresh(frm) {\n// \t\t// your code here\n// \t\t    frm.set_query(\"shipping_address\", function() {\n//             return {\n//                 \"filters\": {\n//                     \"address_type\":\"Shipping\" ,\n//                     // \"custom_branch\": doc.custom_branch ,\n//                     \"name\": doc.supplier ,\n//                 }\n//             };\n//         });\n// \t}\n// });\n\n\n\nfrappe.ui.form.on('Purchase Order', {\n    refresh: function (frm) {\n        // This function will run when the form is refreshed\n        // You can initialize or manipulate fields here if needed\n    },\n    onload: function (frm) {\n        // This function will run when the form is loaded\n        // You can initialize fields or set default values here if needed\n        let supplier = frm.doc.supplier;\n        if (supplier) {\n            // Get the first 3 characters of the supplier_code\n            let codeSubstring = supplier.substring(0, 3).toUpperCase();\n            \n            // Set the substring to another field or use it as needed\n            frm.set_value('custom_supplier_code', codeSubstring);\n        } else {\n            // Clear the substring field if supplier_code is empty\n            frm.set_value('custom_supplier_code', '');\n        }\n    },\n    supplier: function (frm) {\n        // This function triggers when `supplier_code` field is modified\n        let supplier = frm.doc.supplier;\n        if (supplier) {\n            // Get the first 3 characters of the supplier_code\n            let codeSubstring = supplier.substring(0, 3).toUpperCase();\n            \n            // Set the substring to another field or use it as needed\n            frm.set_value('custom_supplier_code', codeSubstring);\n        } else {\n            // Clear the substring field if supplier_code is empty\n            frm.set_value('custom_supplier_code', '');\n        }\n    }\n});\n\n\nfrappe.ui.form.on('Purchase Order', {\n    refresh: function (frm) {\n        // This function will run when the form is refreshed\n        // You can initialize or manipulate fields here if needed\n    },\n    onload: function (frm) {\n            let transaction_date = frm.doc.transaction_date;\n            \n            let date = new Date(transaction_date);\n            let days = ['SUN', 'MON', 'TUE', 'WED', 'THU', 'FRI', 'SAT'];\n            // Get the day of the week\n            let dayOfWeek = days[date.getDay()];\n\n\n            let fullYear = date.getFullYear();\n            // Extract the last two digits of the year\n            let yearYY = fullYear.toString().slice(-2);\n            let order_code = \"POA\"+dayOfWeek+yearYY;\n            if(frm.doc.docstatus === 0) {\n                frm.set_value('custom_order_code', order_code);    \n            }\n            \n\n    },\n    transaction_date: function (frm) {\n        let transaction_date = frm.doc.transaction_date;\n            let date = new Date(transaction_date);\n            let days = ['SUN', 'MON', 'TUE', 'WED', 'THU', 'FRI', 'SAT'];\n            // Get the day of the week\n            let dayOfWeek = days[date.getDay()];\n            let fullYear = date.getFullYear();\n            // Extract the last two digits of the year\n            let yearYY = fullYear.toString().slice(-2);\n            let order_code = \"POA\"+dayOfWeek+yearYY;\n            if(frm.doc.docstatus === 0) {\n                frm.set_value('custom_order_code', order_code);\n            }\n\n    }\n});\n\nfrappe.ui.form.on('Purchase Order', {\n    // refresh: function(frm) {\n    //     calculate_and_set_gst_value(frm);\n    // },\n    onload: function(frm) {\n        calculate_and_set_gst_value(frm);\n    },\n    // items_on_form_rendered: function(frm) {\n    //     frm.fields_dict.items.grid.on('change', function (e) {\n    //         calculate_and_set_gst_value(frm);\n    //     });\n    // },\n    validate: function(frm) {\n        calculate_and_set_gst_value(frm);\n    }\n});\n\n\nfunction calculate_and_set_gst_value(frm) {\n    // console.log(frm.doc.items)\n    $.each(frm.doc.items || [], function (i, item) {\n        let total_sgst = 0;\n        let total_cgst = 0;\n        let total_igst = 0;\n        // console.log(item)\n        // if (item.taxes) {\n        //     $.each(item.taxes || [], function (j, tax) {\n        //         // console.log(item)\n        //         if (tax.account_head) {\n        //             if (tax.account_head.includes('SGST')) {\n        //                 total_sgst += flt(tax.tax_amount);\n        //             } else if (tax.account_head.includes('CGST')) {\n        //                 total_cgst += flt(tax.tax_amount);\n        //             } else if (tax.account_head.includes('IGST')) {\n        //                 total_igst += flt(tax.tax_amount);\n        //             }\n        //         }\n        //     });\n        //     // console.log(item)\n            \n        // }\n        \n        if (item.sgst_amount == null) { // This checks for both null and undefined\n            item.sgst_amount = 0;\n        }\n        \n        if (item.cgst_amount == null) { // This checks for both null and undefined\n            item.cgst_amount = 0;\n        }\n        \n        if (item.igst_amount == null) { // This checks for both null and undefined\n            item.igst_amount = 0;\n        }\n        \n        if (item.net_amount == null) { // This checks for both null and undefined\n            item.net_amount = 0;\n        }\n\n        let total_tax = 0;\n        let grand_total = 0;\n        // frappe.msgprint(item.sgst_amount +\" => \"+ item.cgst_amount+\"=>\" + item.igst_amount)\n        total_tax = parseFloat(item.sgst_amount) + parseFloat(item.cgst_amount) + parseFloat(item.igst_amount);\n        \n        // console.log( \"total taxt\"+total_tax)\n        grand_total = parseFloat(item.net_amount) + parseFloat(total_tax);\n        console.log(grand_total);\n        // console.log(\"grand total \" + grand_total)\n        // console.log(\"herere\")\n        // console.log(gst_value);\n        //Set the GST value in the custom field of the item\n        frappe.model.set_value(item.doctype, item.name, 'custom_gstn_value', total_tax);\n        frappe.model.set_value(item.doctype, item.name, 'custom_grand_total', grand_total);\n        frm.refresh_field('items');\n        \n    });\n}\n// frappe.ui.form.on('Purchase Order', {\n// \trefresh: function(frm) {\n// \t    $('span.sidebar-toggle-btn').hide();\n// \t\t$('.col-lg-2.layout-side-section').hide();\n// \t}\n// });\n\n\nfrappe.ui.form.on('Purchase Order', {\n    refresh(frm) {\n        setTimeout(() => {\n            frm.remove_custom_button('Get Items From');\n            frm.remove_custom_button('Product Bundle', 'Get Items From');\n            frm.remove_custom_button('Material Request', 'Get Items From');\n            frm.remove_custom_button('Supplier Quotation', 'Get Items From');\n            frm.remove_custom_button('Update Items');\n            frm.remove_custom_button('Payment', 'Create');\n            frm.remove_custom_button('Payment Request', 'Create');\n            frm.remove_custom_button('Purchase Invoice', 'Create');\n            frm.remove_custom_button('Link to Material Request', 'Tools');\n            frm.remove_custom_button('Update Rate as per Last Purchase', 'Tools');\n            frm.remove_custom_button('Print');\n            frm.remove_custom_button('Update Items');\n            frm.remove_custom_button('Download');\n            frm.remove_custom_button('Hold', 'Status');\n            frm.remove_custom_button('Close', 'Status');\n        }, 10);\n    }\n});\n\n//Remove Form View Menu contents\nfrappe.ui.form.on('Purchase Order', {\n    refresh: function(frm) {\n        setTimeout( () => {\n            // frm.page.remove_inner_button('Print');\n            // frm.page.remove_inner_button('Customer', 'Create');\n            // frm.page.remove_inner_button('Quotation', 'Create');\n            // frm.page.remove_inner_button('Add to Prospect', 'Action');\n            frm.page.menu.find('[data-label=\"Create%20%3E%20Customer\"],\\\n            [data-label=\"Print\"],\\\n            [data-label=\"Email\"],\\\n            [data-label=\"Links\"],\\\n            [data-label=\"Duplicate\"],\\\n            [data-label=\"Send%20SMS\"],\\\n            [data-label=\"Copy%20to%20Clipboard\"],\\\n            [data-label=\"Reload\"],\\\n            [data-label=\"Remind%20Me\"],\\\n            [data-label=\"Undo\"],\\\n            [data-label=\"Redo\"],\\\n            [data-label=\"Repeat\"],\\\n            [data-label=\"New%20Purchase%20Order\"],\\\n            [data-label=\"Action%20%3E%20Add%20to%20Prospect\"]').parent().parent().remove();\n        }, 10);\n    }\n});\n\nfrappe.ui.form.on('Purchase Order', {\n    refresh: function (frm) {\n        // This function will run when the form is refreshed\n        // You can initialize or manipulate fields here if needed\n    },\n    onload: function (frm) {\n        let total_gstn_value = 0;\n         $.each(frm.doc.items, function(i, d) {\n             \n             total_gstn_value = parseFloat(total_gstn_value) + parseFloat(d['custom_gstn_value']);\n             console.log(d);\n             console.log(total_gstn_value);\n         });\n        \n        frm.set_value('custom_total_gstn', total_gstn_value);\n    },\n});\n\n\n\n\n\n\n\n\n//Remove form view menu contents\n// frappe.ui.form.on('Purchase Order', {\n//     refresh(frm) {\n//         frm.menu.find('[data-label=\"Print\"]').parent().hide();\n//         frm.menu.find('[data-label=\"Duplicate\"]').parent().remove();\n//     }\n//     })\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n",
  "view": "Form"
 },
 {
  "docstatus": 0,
  "doctype": "Client Script",
  "dt": "Role Profile",
  "enabled": 1,
  "modified": "2024-12-04 20:41:56.962751",
  "module": "o2o ErpNext",
  "name": "Role Profile List View",
  "script": "frappe.listview_settings['Role Profile'].onload = function(listview) {\n\t\tlistview.page.actions.find('[data-label=\"Edit\"],[data-label=\"Print\"],[data-label=\"Export\"],[data-label=\"Assign%20To\"],[data-label=\"Apply%20Assignment%20Rule\"],[data-label=\"Add%20Tags\"]').parent().parent().remove()\n};\nfrappe.listview_settings['Role Profile'] = {\n    refresh(listview) {\n        listview.page.menu.find('[data-label=\"User%20Permissions\"]').parent().hide();\n        listview.page.menu.find('[data-label=\"Role%20Permissions%20Manager\"]').parent().hide();\n        listview.page.menu.find('[data-label=\"Import\"]').parent().hide();\n        listview.page.menu.find('[data-label=\"Toggle%20Sidebar\"]').parent().hide();\n        listview.page.menu.find('[data-label=\"List%Settings\"]').parent().hide();\n    }\n}\nfrappe.listview_settings['Role Profile'] = {\n\trefresh: function(listview) {\n\t   \t$(\"use.like-icon\").hide();\n\t}\n};",
  "view": "List"
 },
 {
  "docstatus": 0,
  "doctype": "Client Script",
  "dt": "State",
  "enabled": 1,
  "modified": "2024-12-04 20:43:03.263179",
  "module": null,
  "name": "State Master List View",
  "script": "frappe.listview_settings['State'] = {\n\trefresh: function(listview) {\n\t   \t$(\"use.like-icon\").hide();\n\t}\n};",
  "view": "List"
 },
 {
  "docstatus": 0,
  "doctype": "Client Script",
  "dt": "City",
  "enabled": 1,
  "modified": "2024-12-04 20:54:03.155072",
  "module": null,
  "name": "City Master List view",
  "script": "frappe.listview_settings['City'] = {\n\trefresh: function(listview) {\n\t   \t$(\"use.like-icon\").hide();\n\t}\n};",
  "view": "List"
 },
 {
  "docstatus": 0,
  "doctype": "Client Script",
  "dt": "Purchase Receipt",
  "enabled": 1,
  "modified": "2024-12-13 12:46:15.446351",
  "module": null,
  "name": "PR MERGE V5",
  "script": "frappe.listview_settings['Purchase Receipt'] = {\n    onload: function(listview) {\n        listview.page.add_action_item(__('Create Purchase Invoice'), function() {\n            try {\n                const selected_docs = listview.get_checked_items();\n\n                if (selected_docs.length === 0) {\n                    frappe.msgprint({\n                        title: __('Warning'),\n                        indicator: 'red',\n                        message: __('Please select at least one Purchase Receipt')\n                    });\n                    return;\n                }\n\n                // Add validation for submitted documents only\n                const hasNonSubmittedDocs = selected_docs.some(doc => doc.docstatus !== 1);\n                if (hasNonSubmittedDocs) {\n                    frappe.msgprint({\n                        title: __('Warning'),\n                        indicator: 'red',\n                        message: __('Please select only submitted Purchase Receipts. Draft or cancelled Purchase Receipts cannot be merged.')\n                    });\n                    return;\n                }\n\n                // Get fiscal year first\n                frappe.call({\n                    method: 'frappe.client.get_list',\n                    args: {\n                        doctype: 'Fiscal Year',\n                        filters: {\n                            'year_start_date': ['<=', frappe.datetime.get_today()],\n                            'year_end_date': ['>=', frappe.datetime.get_today()]\n                        },\n                        fields: ['name']\n                    },\n                    callback: function(fiscal_response) {\n                        try {\n                            let display_fiscal_year = '';\n                            if (fiscal_response.message && fiscal_response.message.length > 0) {\n                                let fiscal_year = fiscal_response.message[0].name;\n                                let start_year = fiscal_year.split('-')[0];\n                                let end_year = fiscal_year.split('-')[1];\n                                display_fiscal_year = start_year.substring(2) + '-' + end_year.substring(2);\n                            }\n\n                            frappe.call({\n                                method: 'frappe.client.get',\n                                args: { \n                                    doctype: 'Purchase Receipt', \n                                    name: selected_docs[0].name \n                                },\n                                callback: function(firstDocResponse) {\n                                    try {\n                                        if (!firstDocResponse.message) {\n                                            throw new Error('Failed to fetch first Purchase Receipt');\n                                        }\n\n                                        const firstDoc = firstDocResponse.message;\n                                        const firstVendor = firstDoc.custom_vendor;\n                                        const firstSupplier = firstDoc.supplier;\n                                        const firstBranch = firstDoc.custom_branch;\n                                        const firstTaxCategory = firstDoc.tax_category;\n                                        const firstTaxesAndCharges = firstDoc.taxes_and_charges;\n                                        const isReturn = firstDoc.is_return || 0;\n                                        const vendor_code = firstVendor ? firstVendor.substring(0, 5).toUpperCase() : '';\n\n                                        const supplier_address = firstDoc.supplier_address;\n                                        const shipping_address = firstDoc.shipping_address;\n                                        const billing_address = firstDoc.billing_address;\n                                        const vendor_address = firstDoc.custom_vendor_address;\n\n                                        const naming_series = isReturn ? \n                                            `DN./.${display_fiscal_year}./.###` : \n                                            `${vendor_code}./.${display_fiscal_year}./.###`;\n\n                                        if (!firstTaxCategory || !firstTaxesAndCharges) {\n                                            frappe.msgprint({\n                                                title: __('Error'),\n                                                indicator: 'red',\n                                                message: __('Tax Category and Taxes and Charges must be set for the first selected receipt.')\n                                            });\n                                            return;\n                                        }\n\n                                        if (!firstBranch) {\n                                            frappe.msgprint({\n                                                title: __('Error'),\n                                                indicator: 'red',\n                                                message: __('Branch is not set for the first selected receipt.')\n                                            });\n                                            return;\n                                        }\n\n                                        frappe.call({\n                                            method: 'frappe.client.get',\n                                            args: {\n                                                doctype: 'Purchase Taxes and Charges Template',\n                                                name: firstTaxesAndCharges\n                                            },\n                                            callback: function(tax_template_response) {\n                                                try {\n                                                    if (!tax_template_response.message) {\n                                                        throw new Error('Failed to fetch tax template');\n                                                    }\n\n                                                    const tax_template = tax_template_response.message;\n                                                    let consolidatedItems = [];\n                                                    let totalGrandTotal = 0;\n                                                    let totalFreightAmount = 0;\n                                                    let freightCostEntries = [];\n\n                                                    const promises = selected_docs.map(doc => \n                                                        new Promise((resolve, reject) => {\n                                                            frappe.call({\n                                                                method: 'frappe.client.get',\n                                                                args: { \n                                                                    doctype: 'Purchase Receipt', \n                                                                    name: doc.name \n                                                                },\n                                                                callback: function(r) {\n                                                                    if (r.message) {\n                                                                        resolve(r.message);\n                                                                    } else {\n                                                                        reject('Failed to fetch receipt');\n                                                                    }\n                                                                }\n                                                            });\n                                                        })\n                                                    );\n\n                                                    Promise.all(promises)\n                                                        .then(receipts => {\n                                                            freightCostEntries = receipts.map(receipt => ({\n                                                                purchase_receipt: receipt.name,\n                                                                hsnsac: receipt.custom_freight_hsnsac || \"\",\n                                                                quantity: flt(receipt.custom_weight_in_kg || 0),\n                                                                gst_rate: flt(receipt.custom_freight_tax_rate_ || 0),\n                                                                rate: flt(receipt.custom_rate_per_kg || 0),\n                                                                total_rate: flt(receipt.custom_freight_amount || 0),\n                                                                cgst: flt(receipt.custom_cgst_amount || 0),\n                                                                sgst: flt(receipt.custom_sgst_amount || 0),\n                                                                igst: flt(receipt.custom_igst_amount || 0),\n                                                                amount: flt(receipt.custom_total_freight_amount || 0)\n                                                            }));\n\n                                                            receipts.forEach(receipt => {\n                                                                totalGrandTotal += flt(receipt.custom_grand_total || 0);\n                                                                totalFreightAmount += flt(receipt.custom_freight_amount || 0);\n\n                                                                receipt.items.forEach(item => {\n                                                                    const existingItem = consolidatedItems.find(\n                                                                        ci => ci.item_name.toLowerCase() === item.item_name.toLowerCase() && \n                                                                             ci.custom_gstn_value === item.custom_gstn_value\n                                                                    );\n\n                                                                    if (existingItem) {\n                                                                        if (existingItem.uom !== item.uom) {\n                                                                            frappe.throw(__(`UOM mismatch for item ${item.item_code}. Cannot consolidate items with different UOMs.`));\n                                                                        }\n\n                                                                        const newQty = flt(existingItem.qty) + flt(item.qty);\n                                                                        const newAmount = flt(existingItem.amount) + flt(item.amount);\n                                                                        \n                                                                        existingItem.qty = newQty;\n                                                                        existingItem.amount = newAmount;\n                                                                        existingItem.rate = flt(newAmount / newQty);\n                                                                        existingItem.custom_grand_total = flt(existingItem.custom_grand_total || 0) + flt(item.custom_grand_total || 0);\n                                                                        \n                                                                        if (!existingItem.pr_details) existingItem.pr_details = [];\n                                                                        existingItem.pr_details.push({\n                                                                            pr_detail: item.name,\n                                                                            purchase_receipt: receipt.name,\n                                                                            amount: flt(item.amount),\n                                                                            purchase_order: item.purchase_order,\n                                                                            purchase_order_item: item.purchase_order_item\n                                                                        });\n                                                                    } else {\n                                                                        consolidatedItems.push({\n                                                                            item_code: item.item_code,\n                                                                            item_name: item.item_name,\n                                                                            qty: flt(item.qty),\n                                                                            rate: flt(item.rate),\n                                                                            amount: flt(item.amount),\n                                                                            warehouse: item.warehouse,\n                                                                            custom_grand_total: flt(item.custom_grand_total || 0),\n                                                                            custom_gstn_value: item.custom_gstn_value,\n                                                                            uom: item.uom,\n                                                                            stock_uom: item.stock_uom,\n                                                                            conversion_factor: item.conversion_factor,\n                                                                            purchase_receipt: receipt.name,\n                                                                            pr_detail: item.name,\n                                                                            purchase_order: item.purchase_order,\n                                                                            purchase_order_item: item.purchase_order_item,\n                                                                            pr_details: [{\n                                                                                pr_detail: item.name,\n                                                                                purchase_receipt: receipt.name,\n                                                                                amount: flt(item.amount),\n                                                                                purchase_order: item.purchase_order,\n                                                                                purchase_order_item: item.purchase_order_item\n                                                                            }]\n                                                                        });\n                                                                    }\n                                                                });\n                                                            });\n\n                                                            let taxes = [];\n                                                            if (tax_template.taxes) {\n                                                                taxes = tax_template.taxes.map((tax, idx) => {\n                                                                    let row_id = null;\n                                                                    if (tax.charge_type === 'On Previous Row Amount' || tax.charge_type === 'On Previous Row Total') {\n                                                                        if (tax.row_id && parseInt(tax.row_id) < (idx + 1)) {\n                                                                            row_id = tax.row_id;\n                                                                        } else {\n                                                                            frappe.throw(__(`Invalid row reference in tax row ${idx + 1}`));\n                                                                        }\n                                                                    }\n\n                                                                    return {\n                                                                        account_head: tax.account_head,\n                                                                        charge_type: tax.charge_type,\n                                                                        row_id: row_id,\n                                                                        description: tax.description,\n                                                                        included_in_print_rate: tax.included_in_print_rate || 0,\n                                                                        included_in_paid_amount: tax.included_in_paid_amount || 0,\n                                                                        rate: tax.rate,\n                                                                        account_currency: tax.account_currency,\n                                                                        cost_center: tax.cost_center\n                                                                    };\n                                                                });\n                                                            }\n\n                                                            const doc = {\n                                                                doctype: 'Purchase Invoice',\n                                                                naming_series: naming_series,\n                                                                custom_fiscal_year: display_fiscal_year,\n                                                                custom_vendor_code: vendor_code,\n                                                                supplier: firstSupplier,\n                                                                custom_vendor: firstVendor,\n                                                                custom_branch: firstBranch,\n                                                                tax_category: firstTaxCategory,\n                                                                taxes_and_charges: firstTaxesAndCharges,\n                                                                taxes: taxes,\n                                                                items: consolidatedItems,\n                                                                custom_grand_total: totalGrandTotal,\n                                                                custom_freight_amount: totalFreightAmount,\n                                                                update_stock: 0,\n                                                                is_return: isReturn,\n                                                                supplier_address: supplier_address,\n                                                                shipping_address: shipping_address,\n                                                                billing_address: billing_address,\n                                                                custom_vendor_address: vendor_address,\n                                                                custom_freight_cost_data: freightCostEntries\n                                                            };\n\n                                                            console.log('Creating Purchase Invoice with:', doc);\n\n                                                            frappe.call({\n                                                                method: 'frappe.client.insert',\n                                                                args: { doc: doc },\n                                                                callback: function(response) {\n                                                                    if (response.message) {\n                                                                        frappe.msgprint({\n                                                                            title: __('Success'),\n                                                                            indicator: 'green',\n                                                                            message: __('Purchase Invoice created successfully: ') + response.message.name\n                                                                        });\n\n                                                                        // Refresh listview to show updated status\n                                                                        listview.refresh();\n                                                                    } else {\n                                                                        frappe.msgprint({\n                                                                            title: __('Error'),\n                                                                            indicator: 'red',\n                                                                            message: __('Failed to create Purchase Invoice')\n                                                                        });\n                                                                    }\n                                                                }\n                                                            });\n                                                        })\n                                                        .catch(error => {\n                                                            console.error('Error processing receipts:', error);\n                                                            frappe.msgprint({\n                                                                title: __('Error'),\n                                                                indicator: 'red',\n                                                                message: __('Error processing receipts: ') + error\n                                                            });\n                                                        });\n                                                } catch (error) {\n                                                    console.error('Error in tax template processing:', error);\n                                                    frappe.msgprint({\n                                                        title: __('Error'),\n                                                        indicator: 'red',\n                                                        message: __('Error in tax template processing: ') + error.message\n                                                    });\n                                                }\n                                            }\n                                        });\n                                    } catch (error) {\n                                        console.error('Error processing first document:', error);\n                                        frappe.msgprint({\n                                            title: __('Error'),\n                                            indicator: 'red',\n                                            message: __('Error processing first document: ') + error.message\n                                        });\n                                    }\n                                }\n                            });\n                        } catch (error) {\n                            console.error('Error in fiscal year processing:', error);\n                            frappe.msgprint({\n                                title: __('Error'),\n                                indicator: 'red',\n                                message: __('Error in fiscal year processing: ') + error.message\n                            });\n                        }\n                    }\n                });\n            } catch (error) {\n                console.error('Error in main function:', error);\n                frappe.msgprint({\n                    title: __('Error'),\n                    indicator: 'red',\n                    message: __('Error in main function: ') + error.message\n                });\n            }\n        });\n    },\n\n    onrender: function(listview) {\n        listview.page.wrapper.find('.list-row-checkbox').removeClass('hide');\n    }\n};",
  "view": "List"
 },
 {
  "docstatus": 0,
  "doctype": "Client Script",
  "dt": "Purchase Receipt",
  "enabled": 0,
  "modified": "2024-12-05 17:10:29.089813",
  "module": null,
  "name": "PR MERGE V6",
  "script": "frappe.listview_settings['Purchase Receipt'] = {\n    onload: function(listview) {\n        listview.page.add_action_item(__('Create Purchase Invoice'), function() {\n            try {\n                const selected_docs = listview.get_checked_items();\n\n                if (selected_docs.length === 0) {\n                    frappe.msgprint({\n                        title: __('Warning'),\n                        indicator: 'red',\n                        message: __('Please select at least one Purchase Receipt')\n                    });\n                    return;\n                }\n\n                // Add validation for submitted documents only\n                const hasNonSubmittedDocs = selected_docs.some(doc => doc.docstatus !== 1);\n                if (hasNonSubmittedDocs) {\n                    frappe.msgprint({\n                        title: __('Warning'),\n                        indicator: 'red',\n                        message: __('Please select only submitted Purchase Receipts. Draft or cancelled Purchase Receipts cannot be merged.')\n                    });\n                    return;\n                }\n\n                // Get fiscal year first\n                frappe.call({\n                    method: 'frappe.client.get_list',\n                    args: {\n                        doctype: 'Fiscal Year',\n                        filters: {\n                            'year_start_date': ['<=', frappe.datetime.get_today()],\n                            'year_end_date': ['>=', frappe.datetime.get_today()]\n                        },\n                        fields: ['name']\n                    },\n                    callback: function(fiscal_response) {\n                        try {\n                            let display_fiscal_year = '';\n                            if (fiscal_response.message && fiscal_response.message.length > 0) {\n                                let fiscal_year = fiscal_response.message[0].name;\n                                let start_year = fiscal_year.split('-')[0];\n                                let end_year = fiscal_year.split('-')[1];\n                                display_fiscal_year = start_year.substring(2) + '-' + end_year.substring(2);\n                            }\n\n                            frappe.call({\n                                method: 'frappe.client.get',\n                                args: { \n                                    doctype: 'Purchase Receipt', \n                                    name: selected_docs[0].name \n                                },\n                                callback: function(firstDocResponse) {\n                                    try {\n                                        if (!firstDocResponse.message) {\n                                            throw new Error('Failed to fetch first Purchase Receipt');\n                                        }\n\n                                        const firstDoc = firstDocResponse.message;\n                                        const firstVendor = firstDoc.custom_vendor;\n                                        const firstSupplier = firstDoc.supplier;\n                                        const firstBranch = firstDoc.custom_branch;\n                                        const firstTaxCategory = firstDoc.tax_category;\n                                        const firstTaxesAndCharges = firstDoc.taxes_and_charges;\n                                        const isReturn = firstDoc.is_return || 0;\n                                        const vendor_code = firstVendor ? firstVendor.substring(0, 5).toUpperCase() : '';\n\n                                        const supplier_address = firstDoc.supplier_address;\n                                        const shipping_address = firstDoc.shipping_address;\n                                        const billing_address = firstDoc.billing_address;\n                                        const vendor_address = firstDoc.custom_vendor_address;\n\n                                        const naming_series = isReturn ? \n                                            `DN./.${display_fiscal_year}./.###` : \n                                            `${vendor_code}./.${display_fiscal_year}./.###`;\n\n                                        if (!firstTaxCategory || !firstTaxesAndCharges) {\n                                            frappe.msgprint({\n                                                title: __('Error'),\n                                                indicator: 'red',\n                                                message: __('Tax Category and Taxes and Charges must be set for the first selected receipt.')\n                                            });\n                                            return;\n                                        }\n\n                                        if (!firstBranch) {\n                                            frappe.msgprint({\n                                                title: __('Error'),\n                                                indicator: 'red',\n                                                message: __('Branch is not set for the first selected receipt.')\n                                            });\n                                            return;\n                                        }\n\n                                        frappe.call({\n                                            method: 'frappe.client.get',\n                                            args: {\n                                                doctype: 'Purchase Taxes and Charges Template',\n                                                name: firstTaxesAndCharges\n                                            },\n                                            callback: function(tax_template_response) {\n                                                try {\n                                                    if (!tax_template_response.message) {\n                                                        throw new Error('Failed to fetch tax template');\n                                                    }\n\n                                                    const tax_template = tax_template_response.message;\n                                                    let consolidatedItems = [];\n                                                    let totalGrandTotal = 0;\n                                                    let totalFreightAmount = 0;\n                                                    let freightCostEntries = [];\n\n                                                    const promises = selected_docs.map(doc => \n                                                        new Promise((resolve, reject) => {\n                                                            frappe.call({\n                                                                method: 'frappe.client.get',\n                                                                args: { \n                                                                    doctype: 'Purchase Receipt', \n                                                                    name: doc.name \n                                                                },\n                                                                callback: function(r) {\n                                                                    if (r.message) {\n                                                                        resolve(r.message);\n                                                                    } else {\n                                                                        reject('Failed to fetch receipt');\n                                                                    }\n                                                                }\n                                                            });\n                                                        })\n                                                    );\n\n                                                    Promise.all(promises)\n                                                        .then(receipts => {\n                                                            freightCostEntries = receipts.map(receipt => ({\n                                                                purchase_receipt: receipt.name,\n                                                                hsnsac: receipt.custom_freight_hsnsac || \"\",\n                                                                quantity: flt(receipt.custom_weight_in_kg || 0),\n                                                                gst_rate: flt(receipt.custom_freight_tax_rate_ || 0),\n                                                                rate: flt(receipt.custom_rate_per_kg || 0),\n                                                                total_rate: flt(receipt.custom_freight_amount || 0),\n                                                                cgst: flt(receipt.custom_cgst_amount || 0),\n                                                                sgst: flt(receipt.custom_sgst_amount || 0),\n                                                                igst: flt(receipt.custom_igst_amount || 0),\n                                                                amount: flt(receipt.custom_total_freight_amount || 0)\n                                                            }));\n\n                                                            receipts.forEach(receipt => {\n                                                                totalGrandTotal += flt(receipt.custom_grand_total || 0);\n                                                                totalFreightAmount += flt(receipt.custom_freight_amount || 0);\n\n                                                                receipt.items.forEach(item => {\n                                                                    const existingItem = consolidatedItems.find(\n                                                                        ci => ci.item_name.toLowerCase() === item.item_name.toLowerCase() && \n                                                                             ci.custom_gstn_value === item.custom_gstn_value\n                                                                    );\n\n                                                                    if (existingItem) {\n                                                                        if (existingItem.uom !== item.uom) {\n                                                                            frappe.throw(__(`UOM mismatch for item ${item.item_code}. Cannot consolidate items with different UOMs.`));\n                                                                        }\n\n                                                                        const newQty = flt(existingItem.qty) + flt(item.qty);\n                                                                        const newAmount = flt(existingItem.amount) + flt(item.amount);\n                                                                        \n                                                                        existingItem.qty = newQty;\n                                                                        existingItem.amount = newAmount;\n                                                                        existingItem.rate = flt(newAmount / newQty);\n                                                                        existingItem.custom_grand_total = flt(existingItem.custom_grand_total || 0) + flt(item.custom_grand_total || 0);\n                                                                        \n                                                                        if (!existingItem.pr_details) existingItem.pr_details = [];\n                                                                        existingItem.pr_details.push({\n                                                                            pr_detail: item.name,\n                                                                            purchase_receipt: receipt.name,\n                                                                            amount: flt(item.amount),\n                                                                            purchase_order: item.purchase_order,\n                                                                            purchase_order_item: item.purchase_order_item\n                                                                        });\n                                                                    } else {\n                                                                        consolidatedItems.push({\n                                                                            item_code: item.item_code,\n                                                                            item_name: item.item_name,\n                                                                            qty: flt(item.qty),\n                                                                            rate: flt(item.rate),\n                                                                            amount: flt(item.amount),\n                                                                            warehouse: item.warehouse,\n                                                                            custom_grand_total: flt(item.custom_grand_total || 0),\n                                                                            custom_gstn_value: item.custom_gstn_value,\n                                                                            uom: item.uom,\n                                                                            stock_uom: item.stock_uom,\n                                                                            conversion_factor: item.conversion_factor,\n                                                                            purchase_receipt: receipt.name,\n                                                                            pr_detail: item.name,\n                                                                            purchase_order: item.purchase_order,\n                                                                            purchase_order_item: item.purchase_order_item,\n                                                                            pr_details: [{\n                                                                                pr_detail: item.name,\n                                                                                purchase_receipt: receipt.name,\n                                                                                amount: flt(item.amount),\n                                                                                purchase_order: item.purchase_order,\n                                                                                purchase_order_item: item.purchase_order_item\n                                                                            }]\n                                                                        });\n                                                                    }\n                                                                });\n                                                            });\n\n                                                            let taxes = [];\n                                                            if (tax_template.taxes) {\n                                                                taxes = tax_template.taxes.map((tax, idx) => {\n                                                                    let row_id = null;\n                                                                    if (tax.charge_type === 'On Previous Row Amount' || tax.charge_type === 'On Previous Row Total') {\n                                                                        if (tax.row_id && parseInt(tax.row_id) < (idx + 1)) {\n                                                                            row_id = tax.row_id;\n                                                                        } else {\n                                                                            frappe.throw(__(`Invalid row reference in tax row ${idx + 1}`));\n                                                                        }\n                                                                    }\n\n                                                                    return {\n                                                                        account_head: tax.account_head,\n                                                                        charge_type: tax.charge_type,\n                                                                        row_id: row_id,\n                                                                        description: tax.description,\n                                                                        included_in_print_rate: tax.included_in_print_rate || 0,\n                                                                        included_in_paid_amount: tax.included_in_paid_amount || 0,\n                                                                        rate: tax.rate,\n                                                                        account_currency: tax.account_currency,\n                                                                        cost_center: tax.cost_center\n                                                                    };\n                                                                });\n                                                            }\n\n                                                            const doc = {\n                                                                doctype: 'Purchase Invoice',\n                                                                naming_series: naming_series,\n                                                                custom_fiscal_year: display_fiscal_year,\n                                                                custom_vendor_code: vendor_code,\n                                                                supplier: firstSupplier,\n                                                                custom_vendor: firstVendor,\n                                                                custom_branch: firstBranch,\n                                                                tax_category: firstTaxCategory,\n                                                                taxes_and_charges: firstTaxesAndCharges,\n                                                                taxes: taxes,\n                                                                items: consolidatedItems,\n                                                                custom_grand_total: totalGrandTotal,\n                                                                custom_freight_amount: totalFreightAmount,\n                                                                update_stock: 0,\n                                                                is_return: isReturn,\n                                                                supplier_address: supplier_address,\n                                                                shipping_address: shipping_address,\n                                                                billing_address: billing_address,\n                                                                custom_vendor_address: vendor_address,\n                                                                custom_freight_cost_data: freightCostEntries\n                                                            };\n\n                                                            console.log('Creating Purchase Invoice with:', doc);\n\n                                                            frappe.call({\n                                                                method: 'frappe.client.insert',\n                                                                args: { doc: doc },\n                                                                callback: function(response) {\n                                                                    if (response.message) {\n                                                                        const created_pi = response.message.name;\n                                                                        \n                                                                        // Create links using Communication doctype\n                                                                        selected_docs.forEach(pr => {\n                                                                            frappe.call({\n                                                                                method: 'frappe.client.insert',\n                                                                                args: {\n                                                                                    doc: {\n                                                                                        doctype: 'Communication',\n                                                                                        reference_doctype: 'Purchase Invoice',\n                                                                                        reference_name: created_pi,\n                                                                                        link_doctype: 'Purchase Receipt',\n                                                                                        link_name: pr.name,\n                                                                                        communication_type: 'Linked',\n                                                                                        content: 'Linked Purchase Receipt'\n                                                                                    }\n                                                                                }\n                                                                            });\n\n                                                                            // Create reverse link\n                                                                            frappe.call({\n                                                                                method: 'frappe.client.insert',\n                                                                                args: {\n                                                                                    doc: {\n                                                                                        doctype: 'Communication',\n                                                                                        reference_doctype: 'Purchase Receipt',\n                                                                                        reference_name: pr.name,\n                                                                                        link_doctype: 'Purchase Invoice',\n                                                                                        link_name: created_pi,\n                                                                                        communication_type: 'Linked',\n                                                                                        content: 'Linked Purchase Invoice'\n                                                                                    }\n                                                                                }\n                                                                            });\n                                                                        });\n\n                                                                        frappe.msgprint({\n                                                                            title: __('Success'),\n                                                                            indicator: 'green',\n                                                                            message: __('Purchase Invoice created successfully: ') + created_pi\n                                                                        });\n\n                                                                        // Refresh listview to show updated status\n                                                                        listview.refresh();\n                                                                    } else {\n                                                                        frappe.msgprint({\n                                                                            title: __('Error'),\n                                                                            indicator: 'red',\n                                                                            message: __('Failed to create Purchase Invoice')\n                                                                        });\n                                                                    }\n                                                                }\n                                                            });\n                                                        })\n                                                        .catch(error => {\n                                                            console.error('Error processing receipts:', error);\n                                                            frappe.msgprint({\n                                                                title: __('Error'),</antArtifact>",
  "view": "List"
 },
 {
  "docstatus": 0,
  "doctype": "Client Script",
  "dt": "Purchase Order",
  "enabled": 1,
  "modified": "2024-12-19 15:05:16.208414",
  "module": null,
  "name": "PR fetch",
  "script": "frappe.listview_settings['Purchase Order'] = {\n    hide_name_column: true,\n    onload: function(listview) {\n        listview.page.add_button(__('Print PO'), function() {\n            let selected = listview.get_checked_items();\n            if (!selected.length || selected.length > 1) {\n                frappe.msgprint('Please select one Purchase Order');\n                return;\n            }\n            let pdfUrl = frappe.urllib.get_full_url(\"/api/method/frappe.utils.print_format.download_pdf?\"\n                + \"doctype=\" + encodeURIComponent(\"Purchase Order\")\n                + \"&name=\" + encodeURIComponent(selected[0].name)\n                + \"&trigger_print=0\"\n                + \"&format=purchase order\"\n                + \"&no_letterhead=0\"\n                + \"&_lang=en\"\n            );\n            window.open(pdfUrl);\n        }, true).addClass('btn-primary');\n\n        listview.page.add_button(__('Print PR'), function() {\n            let selected = listview.get_checked_items();\n            if (!selected.length || selected.length > 1) {\n                frappe.msgprint('Please select one Purchase Order');\n                return;\n            }\n\n            frappe.call({\n                method: 'frappe.client.get_list',\n                args: {\n                    doctype: 'Purchase Receipt',\n                    filters: [['Purchase Receipt Item', 'purchase_order', '=', selected[0].name]],\n                    fields: ['name', 'posting_date', 'supplier', 'grand_total', 'status']\n                },\n                callback: function(r) {\n                    if (!r.message?.length) {\n                        frappe.msgprint('No Purchase Receipts found');\n                        return;\n                    }\n\n                    let d = new frappe.ui.Dialog({\n                        title: 'Select Purchase Receipt to Print',\n                        fields: [{\n                            label: 'Select Purchase Receipt',\n                            fieldname: 'selected_pr',\n                            fieldtype: 'Select',\n                            options: r.message.map(pr => ({\n                                label: `${pr.name} | ${frappe.datetime.str_to_user(pr.posting_date)} | ${format_currency(pr.grand_total)}`,\n                                value: pr.name\n                            })),\n                            reqd: 1\n                        }],\n                        primary_action_label: 'Print',\n                        primary_action(values) {\n                            frappe.set_route('print', 'Purchase Receipt', values.selected_pr);\n                            d.hide();\n                        }\n                    });\n\n                    let receipt_list = `<div class=\"receipt-list\" style=\"margin-top: 10px;\">\n                        <table class=\"table table-bordered\">\n                            <thead>\n                                <tr>\n                                    <th>Receipt No</th>\n                                    <th>Date</th>\n                                    <th>Status</th>\n                                    <th>Amount</th>\n                                </tr>\n                            </thead>\n                            <tbody>\n                            ${r.message.map(pr => `\n                                <tr>\n                                    <td>${pr.name}</td>\n                                    <td>${frappe.datetime.str_to_user(pr.posting_date)}</td>\n                                    <td>${pr.status}</td>\n                                    <td>${format_currency(pr.grand_total)}</td>\n                                </tr>\n                            `).join('')}\n                            </tbody>\n                        </table>\n                    </div>`;\n                    \n                    d.fields_dict.selected_pr.$wrapper.append(receipt_list);\n                    d.show();\n                }\n            });\n        }, true).addClass('btn-primary');\n    }\n};\nlistview.refresh();\nfrappe.listview_settings['Purchase Order'].onload = function(listview) {\n\t\tlistview.page.actions.find('[data-label=\"Edit\"],[data-label=\"Print\"],[data-label=\"Export\"],[data-label=\"Assign%20To\"],[data-label=\"Apply%20Assignment%20Rule\"],[data-label=\"Add%20Tags\"]').parent().parent().remove()\n};\n\nfrappe.listview_settings['Purchase Order'] = { // And other doctype names\n    hide_name_column: true\n}\nfrappe.listview_settings['Purchase Order'] = {\n\trefresh: function(listview) {\n\t   \t$(\"use.like-icon\").hide();\n\t}\n};\n\n\n\n\n\n\n\n\n\n\n\n",
  "view": "List"
 },
 {
  "docstatus": 0,
  "doctype": "Client Script",
  "dt": "Purchase Order",
  "enabled": 0,
  "modified": "2024-12-05 21:30:08.962337",
  "module": "o2o ErpNext",
  "name": "Purchase Order List View Duplicate Script",
  "script": "frappe.listview_settings['Purchase Order'] = {\n    hide_name_column: true,\n\n    onload: function(listview) {\n        // Remove standard buttons\n        try {\n            listview.page.actions.find('[data-label=\"Edit\"],[data-label=\"Print\"],[data-label=\"Export\"],[data-label=\"Assign%20To\"],[data-label=\"Apply%20Assignment%20Rule\"],[data-label=\"Add%20Tags\"]').parent().parent().remove();\n        } catch(e) {\n            console.log('Error removing standard buttons:', e);\n        }\n\n        // Hide menu items\n        try {\n            listview.page.menu.find('[data-label=\"User%20Permissions\"]').parent().hide();\n            listview.page.menu.find('[data-label=\"Role%20Permissions%20Manager\"]').parent().hide();\n            listview.page.menu.find('[data-label=\"Import\"]').parent().hide();\n            listview.page.menu.find('[data-label=\"Toggle%20Sidebar\"]').parent().hide();\n        } catch(e) {\n            console.log('Error hiding menu items:', e);\n        }\n    },\n\n    refresh: function(listview) {\n        try {\n            // Hide like icon\n            $(\"use.like-icon\").hide();\n        } catch(e) {\n            console.log('Error hiding like icon:', e);\n        }\n    },\n\n    button: {\n        show: function(doc) {\n            return true;\n        },\n        \n        get_label: function() {\n            return __('<i class=\"fa fa-print\" style=\"font-size:18px;color:black\"></i>');\n        },\n        \n        get_description: function(doc) {\n            return __('Print {0}', [doc.name])\n        },\n        \n        action: function(doc) {\n            try {\n                // Construct PDF URL with error handling\n                let pdfUrl = frappe.urllib.get_full_url(\"/api/method/frappe.utils.print_format.download_pdf?\"\n                    + \"doctype=\" + encodeURIComponent(\"Purchase Order\")\n                    + \"&name=\" + encodeURIComponent(doc.name)\n                    + \"&trigger_print=0\"\n                    + \"&format=Purchase Order\"\n                    + \"&no_letterhead=0\"\n                    + \"&_lang=en\"\n                );\n\n                // Try to open the PDF in new window\n                let windowOpen = window.open(pdfUrl);\n\n                if (!windowOpen) {\n                    frappe.msgprint({\n                        title: __('Pop-up Blocked'),\n                        indicator: 'red',\n                        message: __('Please allow pop-ups in your browser to print the document.')\n                    });\n                    return;\n                }\n\n                // Handle potential PDF generation errors\n                windowOpen.onerror = function() {\n                    frappe.msgprint({\n                        title: __('Error'),\n                        indicator: 'red',\n                        message: __('Failed to generate PDF. Please try again.')\n                    });\n                };\n\n            } catch(e) {\n                frappe.msgprint({\n                    title: __('Error'),\n                    indicator: 'red',\n                    message: __('Failed to process print request: ') + e.message\n                });\n                console.error('Print error:', e);\n            }\n        }\n    }\n};",
  "view": "List"
 },
 {
  "docstatus": 0,
  "doctype": "Client Script",
  "dt": "Purchase Invoice",
  "enabled": 1,
  "modified": "2024-12-13 16:34:52.839976",
  "module": null,
  "name": "PO print script for PI",
  "script": "frappe.listview_settings['Purchase Invoice'] = {\n    onload: function(listview) {\n        // Original PI & PO Print Button\n        listview.page.add_button(__('Print PI & PO'), function() {\n            let selected_docs = listview.get_checked_items();\n            \n            if (selected_docs.length === 0) {\n                frappe.msgprint('Please select a Purchase Invoice');\n                return;\n            }\n            if (selected_docs.length > 1) {\n                frappe.msgprint('Please select only one Purchase Invoice');\n                return;\n            }\n            // Get the full Purchase Invoice doc\n            frappe.db.get_doc('Purchase Invoice', selected_docs[0].name)\n                .then(doc => {\n                    if (!doc.items || !doc.items.length) {\n                        frappe.msgprint('No items found in this Invoice');\n                        return;\n                    }\n                    // Get unique POs\n                    let purchase_orders = [...new Set(doc.items\n                        .map(item => item.purchase_order)\n                        .filter(po => po))];\n                    // First print the Purchase Invoice\n                    let piPdfUrl = frappe.urllib.get_full_url(\"/api/method/frappe.utils.print_format.download_pdf?\"\n                        + \"doctype=\" + encodeURIComponent(\"Purchase Invoice\")\n                        + \"&name=\" + encodeURIComponent(doc.name)\n                        + \"&trigger_print=0\"\n                        + \"&format=With Header Purchase Invoice\"\n                        + \"&no_letterhead=0\"\n                        + \"&_lang=en\"\n                    );\n                    window.open(piPdfUrl);\n                    // Then print all linked Purchase Orders\n                    if (purchase_orders.length > 0) {\n                        setTimeout(() => {\n                            purchase_orders.forEach((po, index) => {\n                                setTimeout(() => {\n                                    let poPdfUrl = frappe.urllib.get_full_url(\"/api/method/frappe.utils.print_format.download_pdf?\"\n                                        + \"doctype=\" + encodeURIComponent(\"Purchase Order\")\n                                        + \"&name=\" + encodeURIComponent(po)\n                                        + \"&trigger_print=0\"\n                                        + \"&format=Purchase Order\"\n                                        + \"&no_letterhead=0\"\n                                        + \"&_lang=en\"\n                                    );\n                                    window.open(poPdfUrl);\n                                }, index * 1000);\n                            });\n                        }, 1000);\n                        frappe.show_alert({\n                            message: __(`Printing Purchase Invoice and ${purchase_orders.length} Purchase Order(s)`),\n                            indicator: 'blue'\n                        }, 5);\n                    } else {\n                        frappe.show_alert({\n                            message: __('No Purchase Orders linked to this Invoice'),\n                            indicator: 'orange'\n                        }, 3);\n                    }\n                });\n        });\n\n        // New Button: Print with Header\n        listview.page.add_button(__('Print with Header'), function() {\n            const selected_docs = listview.get_checked_items();\n            if (selected_docs.length > 0) {\n                let successful_prints = 0;\n                \n                selected_docs.forEach((doc, index) => {\n                    frappe.model.with_doc('Purchase Invoice', doc.name, function() {\n                        setTimeout(() => {\n                            var w = window.open(\n                                frappe.urllib.get_full_url(\n                                    '/api/method/frappe.utils.print_format.download_pdf?' +\n                                    'doctype=' + encodeURIComponent('Purchase Invoice') +\n                                    '&name=' + encodeURIComponent(doc.name) +\n                                    '&format=' + encodeURIComponent('With Header Purchase Invoice') +\n                                    '&no_letterhead=0' +\n                                    '&_lang=en'\n                                )\n                            );\n                            \n                            if (w) {\n                                successful_prints++;\n                                if (index === selected_docs.length - 1) {\n                                    frappe.show_alert({\n                                        message: __(`Successfully initiated print for ${successful_prints} invoice(s)`),\n                                        indicator: 'green'\n                                    }, 5);\n                                }\n                            } else {\n                                frappe.show_alert({\n                                    message: __(`Failed to print ${doc.name}. Please enable pop-ups and try again.`),\n                                    indicator: 'red'\n                                }, 5);\n                            }\n                        }, index * 800);\n                    });\n                });\n            } else {\n                frappe.show_alert({\n                    message: __('Please select at least one Purchase Invoice'),\n                    indicator: 'yellow'\n                }, 3);\n            }\n        });\n\n        // New Button: Print without Header\n        listview.page.add_button(__('Print without Header'), function() {\n            const selected_docs = listview.get_checked_items();\n            if (selected_docs.length > 0) {\n                let successful_prints = 0;\n                \n                selected_docs.forEach((doc, index) => {\n                    frappe.model.with_doc('Purchase Invoice', doc.name, function() {\n                        setTimeout(() => {\n                            var w = window.open(\n                                frappe.urllib.get_full_url(\n                                    '/api/method/frappe.utils.print_format.download_pdf?' +\n                                    'doctype=' + encodeURIComponent('Purchase Invoice') +\n                                    '&name=' + encodeURIComponent(doc.name) +\n                                    '&format=' + encodeURIComponent('Without Header Purchase Invoice') +\n                                    '&no_letterhead=1' +\n                                    '&_lang=en'\n                                )\n                            );\n                            \n                            if (w) {\n                                successful_prints++;\n                                if (index === selected_docs.length - 1) {\n                                    frappe.show_alert({\n                                        message: __(`Successfully initiated print for ${successful_prints} invoice(s)`),\n                                        indicator: 'green'\n                                    }, 5);\n                                }\n                            } else {\n                                frappe.show_alert({\n                                    message: __(`Failed to print ${doc.name}. Please enable pop-ups and try again.`),\n                                    indicator: 'red'\n                                }, 5);\n                            }\n                        }, index * 800);\n                    });\n                });\n            } else {\n                frappe.show_alert({\n                    message: __('Please select at least one Purchase Invoice'),\n                    indicator: 'yellow'\n                }, 3);\n            }\n        });\n    }\n};\nlistview.refresh();\nfrappe.listview_settings['Purchase Invoice'] = {\n\tonload: function(listview) {\n\t\tfrappe.route_options = {\n\t\t\t\"status\": [\"=\", \"Draft\"]\n\t\t};\n\t}\n};\n\n\n\n\n\n\n",
  "view": "List"
 },
 {
  "docstatus": 0,
  "doctype": "Client Script",
  "dt": "Purchase Invoice",
  "enabled": 0,
  "modified": "2024-12-13 16:29:38.373086",
  "module": null,
  "name": "Default Filter on Purchase Invoice listing",
  "script": "frappe.listview_settings['Purchase Invoice'] = {\n\tonload: function(listview) {\n\t\tfrappe.route_options = {\n\t\t\t\"status\": [\"=\", \"Draft\"]\n\t\t};\n\t}\n};",
  "view": "List"
 },
 {
  "docstatus": 0,
  "doctype": "Client Script",
  "dt": "Purchase Order",
  "enabled": 1,
  "modified": "2024-11-21 12:48:51.206060",
  "module": null,
  "name": "PO order validate v6",
  "script": "// Store capexTotal globally\nlet storedCapexTotal = 0;\nlet storedOpexTotal = 0;\n\n// Basic Requirement Validations\nfunction validateBranchMandatory(frm) {\n    if (!frm.doc.custom_branch) {\n        frappe.msgprint({\n            title: __('Missing Branch'),\n            message: __('Branch is mandatory for Purchase Order'),\n            indicator: 'red'\n        });\n        frappe.validated = false;\n        return false;\n    }\n    return true;\n}\n\nfunction validateTransactionDateMandatory(frm) {\n    if (!frm.doc.transaction_date) {\n        frappe.msgprint({\n            title: __('Missing Date'),\n            message: __('Transaction Date is mandatory'),\n            indicator: 'red'\n        });\n        frappe.validated = false;\n        return false;\n    }\n    return true;\n}\n\nfunction validateBranchHasSupplier(branch) {\n    if (!branch.custom_supplier) {\n        frappe.msgprint({\n            title: __('Missing Supplier'),\n            message: __('Branch must have an associated supplier'),\n            indicator: 'red'\n        });\n        frappe.validated = false;\n        return false;\n    }\n    return true;\n}\n\n// Business Rule Validations\nfunction validateOrderValue(frm, branch, supplier) {\n    // Skip validation if no items and form is not being saved\n    if (!frm.doc.items || frm.doc.items.length === 0) {\n        return true;\n    }\n    \n    const total = flt(frm.doc.total);\n    \n    // First check branch's min/max values\n    const branchMinValue = flt(branch.custom_minimum_order_value);\n    const branchMaxValue = flt(branch.custom_maximum_order_value);\n    \n    // Check if both branch values are exactly 0\n    const bothBranchValuesZero = branchMinValue === 0 && branchMaxValue === 0;\n    \n    // If not both zero, use branch values\n    if (!bothBranchValuesZero) {\n        if (total >= branchMinValue && total <= branchMaxValue) {\n            return true;\n        } else {\n            frappe.msgprint({\n                title: __('Invalid Order Value'),\n                message: __(`Total order value (${format_currency(total)}) must be between branch's minimum value ${format_currency(branchMinValue)} and maximum value ${format_currency(branchMaxValue)}`),\n                indicator: 'red'\n            });\n            frappe.validated = false;\n            return false;\n        }\n    }\n    \n    // If both branch values are zero, use supplier values\n    const supplierMinValue = flt(supplier.custom_minimum_order_value);\n    const supplierMaxValue = flt(supplier.custom_maximum_order_value);\n    \n    if (total < supplierMinValue || total > supplierMaxValue) {\n        frappe.msgprint({\n            title: __('Invalid Order Value'),\n            message: __(`Total order value (${format_currency(total)}) must be between supplier's minimum value ${format_currency(supplierMinValue)} and maximum value ${format_currency(supplierMaxValue)}`),\n            indicator: 'red'\n        });\n        frappe.validated = false;\n        return false;\n    }\n    \n    return true;\n}\n\nfunction validateBudgetDates(frm, supplier) {\n    const transaction_date = frappe.datetime.str_to_obj(frm.doc.transaction_date);\n    const transaction_day = transaction_date.getDate();\n    const budget_start_day = parseInt(supplier.custom_budget_start_date);\n    const budget_end_day = parseInt(supplier.custom_budget_end_date);\n    \n    if (transaction_day < budget_start_day || transaction_day > budget_end_day) {\n        frappe.msgprint({\n            title: __('Invalid Transaction Date'),\n            message: __(`Transaction date day (${transaction_day}) must be within supplier's budget days range: ${budget_start_day} to ${budget_end_day}`),\n            indicator: 'red'\n        });\n        frappe.validated = false;\n        return false;\n    }\n    \n    return true;\n}\n\nasync function validateBudgets(frm, branch) {\n    let capexTotal = 0;\n    let opexTotal = 0;\n    \n    // Skip if no items exist\n    if (!frm.doc.items || frm.doc.items.length === 0) {\n        return true;\n    }\n    \n    // Check each item\n    for (const item of frm.doc.items) {\n        // First verify if product type is set\n        if (!item.hasOwnProperty('custom_product_type') || !item.custom_product_type) {\n            frappe.msgprint({\n                title: __('Product Type Missing'),\n                message: __('Product Type must be set for item: ' + (item.item_code || item.idx)),\n                indicator: 'red'\n            });\n            frappe.validated = false;\n            return false;\n        }\n        \n        let itemAmount = flt(item.amount);\n        if (itemAmount) {\n            if (item.custom_product_type === 'Capex') {\n                capexTotal += itemAmount;\n            } else if (item.custom_product_type === 'Opex') {\n                opexTotal += itemAmount;\n            }\n        }\n    }\n    \n    // Store totals for later use\n    storedCapexTotal = capexTotal;\n    storedOpexTotal = opexTotal;\n    \n    // Process Capex if exists\n    if (capexTotal > 0) {\n        const branchCapexBudget = flt(branch.custom_capex_budget);\n        if (branchCapexBudget > 0) {\n            if (capexTotal > branchCapexBudget) {\n                frappe.msgprint({\n                    title: __('Capex Budget Exceeded'),\n                    message: __(`Total Capex amount (${format_currency(capexTotal)}) exceeds branch Capex budget (${format_currency(branchCapexBudget)})`),\n                    indicator: 'red'\n                });\n                frappe.validated = false;\n                return false;\n            }\n        } else {\n            try {\n                const capexResult = await frappe.db.get_value('Supplier', \n                    branch.custom_supplier,\n                    'custom_capex_budget'\n                );\n\n                if (!capexResult || !capexResult.message) {\n                    frappe.msgprint({\n                        title: __('Budget Not Found'),\n                        message: __('Could not fetch Capex budget from supplier'),\n                        indicator: 'red'\n                    });\n                    frappe.validated = false;\n                    return false;\n                }\n\n                const supplierCapexBudget = flt(capexResult.message.custom_capex_budget);\n                if (capexTotal > supplierCapexBudget) {\n                    frappe.msgprint({\n                        title: __('Capex Budget Exceeded'),\n                        message: __(`Total Capex amount (${format_currency(capexTotal)}) exceeds supplier Capex budget (${format_currency(supplierCapexBudget)})`),\n                        indicator: 'red'\n                    });\n                    frappe.validated = false;\n                    return false;\n                }\n            } catch (error) {\n                console.error('Error checking supplier Capex budget:', error);\n                frappe.msgprint({\n                    title: __('Validation Error'),\n                    message: __('Error checking supplier Capex budget'),\n                    indicator: 'red'\n                });\n                frappe.validated = false;\n                return false;\n            }\n        }\n    }\n\n    // Process Opex if exists\n    if (opexTotal > 0) {\n        const branchOpexBudget = flt(branch.custom_opex_budget);\n        if (branchOpexBudget > 0) {\n            if (opexTotal > branchOpexBudget) {\n                frappe.msgprint({\n                    title: __('Opex Budget Exceeded'),\n                    message: __(`Total Opex amount (${format_currency(opexTotal)}) exceeds branch Opex budget (${format_currency(branchOpexBudget)})`),\n                    indicator: 'red'\n                });\n                frappe.validated = false;\n                return false;\n            }\n        } else {\n            try {\n                const opexResult = await frappe.db.get_value('Supplier', \n                    branch.custom_supplier,\n                    'custom_opex_budget'\n                );\n\n                if (!opexResult || !opexResult.message) {\n                    frappe.msgprint({\n                        title: __('Budget Not Found'),\n                        message: __('Could not fetch Opex budget from supplier'),\n                        indicator: 'red'\n                    });\n                    frappe.validated = false;\n                    return false;\n                }\n\n                const supplierOpexBudget = flt(opexResult.message.custom_opex_budget);\n                if (opexTotal > supplierOpexBudget) {\n                    frappe.msgprint({\n                        title: __('Opex Budget Exceeded'),\n                        message: __(`Total Opex amount (${format_currency(opexTotal)}) exceeds supplier Opex budget (${format_currency(supplierOpexBudget)})`),\n                        indicator: 'red'\n                    });\n                    frappe.validated = false;\n                    return false;\n                }\n            } catch (error) {\n                console.error('Error checking supplier Opex budget:', error);\n                frappe.msgprint({\n                    title: __('Validation Error'),\n                    message: __('Error checking supplier Opex budget'),\n                    indicator: 'red'\n                });\n                frappe.validated = false;\n                return false;\n            }\n        }\n    }\n    \n    return true;\n}\n\n// Updated function with branch and supplier budget handling\nasync function updateBudgets(frm, branch) {\n    try {\n        // Update Capex Budget if needed\n        if (storedCapexTotal > 0) {\n            const branchCapexBudget = flt(branch.custom_capex_budget);\n            if (branchCapexBudget > 0) {\n                const newBranchCapexBudget = branchCapexBudget - flt(storedCapexTotal);\n                await frappe.db.set_value('Branch', \n                    frm.doc.custom_branch,\n                    'custom_capex_budget',\n                    newBranchCapexBudget\n                );\n                \n                frappe.show_alert({\n                    message: __(`Branch Capex budget updated to ${format_currency(newBranchCapexBudget)}`),\n                    indicator: 'green'\n                }, 5);\n            } else {\n                const capexResult = await frappe.db.get_value('Supplier', \n                    branch.custom_supplier,\n                    'custom_capex_budget'\n                );\n                \n                if (capexResult && capexResult.message) {\n                    const supplierCapexBudget = flt(capexResult.message.custom_capex_budget);\n                    const newSupplierCapexBudget = supplierCapexBudget - flt(storedCapexTotal);\n                    \n                    await frappe.db.set_value('Supplier', \n                        branch.custom_supplier,\n                        'custom_capex_budget',\n                        newSupplierCapexBudget\n                    );\n                    \n                    frappe.show_alert({\n                        message: __(`Supplier Capex budget updated to ${format_currency(newSupplierCapexBudget)}`),\n                        indicator: 'green'\n                    }, 5);\n                }\n            }\n        }\n\n        // Update Opex Budget if needed\n        if (storedOpexTotal > 0) {\n            const branchOpexBudget = flt(branch.custom_opex_budget);\n            if (branchOpexBudget > 0) {\n                const newBranchOpexBudget = branchOpexBudget - flt(storedOpexTotal);\n                await frappe.db.set_value('Branch', \n                    frm.doc.custom_branch,\n                    'custom_opex_budget',\n                    newBranchOpexBudget\n                );\n                \n                frappe.show_alert({\n                    message: __(`Branch Opex budget updated to ${format_currency(newBranchOpexBudget)}`),\n                    indicator: 'green'\n                }, 5);\n            } else {\n                const opexResult = await frappe.db.get_value('Supplier', \n                    branch.custom_supplier,\n                    'custom_opex_budget'\n                );\n                \n                if (opexResult && opexResult.message) {\n                    const supplierOpexBudget = flt(opexResult.message.custom_opex_budget);\n                    const newSupplierOpexBudget = supplierOpexBudget - flt(storedOpexTotal);\n                    \n                    await frappe.db.set_value('Supplier', \n                        branch.custom_supplier,\n                        'custom_opex_budget',\n                        newSupplierOpexBudget\n                    );\n                    \n                    frappe.show_alert({\n                        message: __(`Supplier Opex budget updated to ${format_currency(newSupplierOpexBudget)}`),\n                        indicator: 'green'\n                    }, 5);\n                }\n            }\n        }\n    } catch (error) {\n        console.error('Error updating budgets:', error);\n        frappe.msgprint({\n            title: __('Error'),\n            message: __('Failed to update budgets'),\n            indicator: 'red'\n        });\n    }\n}\n\n// Main Orchestrator with Updated Sequence\nasync function validateAll(frm) {\n    try {\n        // Always validate these basic requirements first\n        if (!validateBranchMandatory(frm)) return false;\n        if (!validateTransactionDateMandatory(frm)) return false;\n        \n        // Get branch data\n        const branch = await frappe.db.get_value('Branch', \n            frm.doc.custom_branch,\n            ['custom_supplier', 'custom_minimum_order_value', 'custom_maximum_order_value', 'custom_capex_budget','custom_opex_budget']\n        );\n        \n        if (!branch || !branch.message) {\n            frappe.msgprint({\n                title: __('Invalid Branch'),\n                message: __('Could not fetch branch details'),\n                indicator: 'red'\n            });\n            frappe.validated = false;\n            return false;\n        }\n        \n        // Validate branch has supplier\n        if (!validateBranchHasSupplier(branch.message)) return false;\n        \n        // Get supplier data\n        const supplier = await frappe.db.get_value('Supplier',\n            branch.message.custom_supplier,\n            ['custom_minimum_order_value', 'custom_maximum_order_value', \n             'custom_budget_start_date', 'custom_budget_end_date']\n        );\n        \n        if (!supplier || !supplier.message) {\n            frappe.msgprint({\n                title: __('Invalid Supplier'),\n                message: __('Could not fetch supplier details'),\n                indicator: 'red'\n            });\n            frappe.validated = false;\n            return false;\n        }\n\n        // Only validate budget dates after branch and supplier are set\n        if (!validateBudgetDates(frm, supplier.message)) return false;\n\n        // Skip remaining validations if no items exist and not saving\n        if (!frm.doc.items || frm.doc.items.length === 0) {\n            if (!frm.doc.__unsaved) {\n                return true;\n            }\n        }\n\n        // Only proceed with these validations if items exist\n        if (frm.doc.items && frm.doc.items.length > 0) {\n            // Validate order value after items are added\n            if (!validateOrderValue(frm, branch.message, supplier.message)) return false;\n            \n            // Validate capex budget last\n            if (!await validateBudgets(frm, branch.message)) return false;\n        }\n        \n        return true;\n    } catch (error) {\n        console.error('Validation Error:', error);\n        frappe.msgprint({\n            title: __('Validation Error'),\n            message: __('An error occurred during validation. Please try again.'),\n            indicator: 'red'\n        });\n        frappe.validated = false;\n        return false;\n    }\n}\n\n// Event Handlers\nfrappe.ui.form.on('Purchase Order', {\n    setup: function(frm) {\n        frm.custom_validate = function() {\n            return validateAll(frm);\n        };\n    },\n    validate: function(frm) {\n        if (!validateAll(frm)) {\n            frappe.validated = false;\n            return false;\n        }\n    },\n    before_save: function(frm) {\n        if (!validateAll(frm)) {\n            frappe.validated = false;\n            return false;\n        }\n    },\n    after_save: function(frm) {\n    if ((storedCapexTotal > 0 || storedOpexTotal > 0) && frm.doc.custom_branch) {\n        frappe.db.get_value('Branch', \n            frm.doc.custom_branch,\n            ['custom_supplier', 'custom_capex_budget', 'custom_opex_budget'],\n            function(r) {\n                if (r) {\n                    updateBudgets(frm, r);\n                }\n            }\n        );\n    }\n},\n    custom_branch: function(frm) {\n        validateAll(frm);\n    },\n    transaction_date: function(frm) {\n        validateAll(frm);\n    }\n});\n\nfrappe.ui.form.on('Purchase Order Item', {\n    items_add: function(frm, cdt, cdn) {\n        validateAll(frm);\n    },\n    items_remove: function(frm, cdt, cdn) {\n        validateAll(frm);\n    },\n    custom_product_type: function(frm, cdt, cdn) {\n        validateAll(frm);\n    },\n    amount: function(frm, cdt, cdn) {\n        validateAll(frm);\n    }\n});",
  "view": "Form"
 },
 {
  "docstatus": 0,
  "doctype": "Client Script",
  "dt": "Purchase Order",
  "enabled": 0,
  "modified": "2024-11-26 10:17:11.948334",
  "module": null,
  "name": "Print Button",
  "script": "frappe.listview_settings[\"Purchase Order\"] = {\n    // Add required fields\n    add_fields: [\"supplier\", \"status\", \"per_received\"],\n    \n    // Configure Print PR button\n    button: {\n        show: function(doc) {\n            // Show button for all purchase orders\n            return true;\n        },\n        get_label: function() {\n            return __(\"Print PR\");\n        },\n        get_description: function(doc) {\n            return __(\"Print Purchase Receipt for PO {0}\", [doc.name]);\n        },\n        action: function(doc) {\n            frappe.model.open_mapped_doc({\n                method: \"frappe.client.get_value\",\n                args: {\n                    doctype: \"Purchase Order\",\n                    filters: {\n                        name: doc.name\n                    },\n                    fieldname: \"get_linked_pr\"\n                },\n                freeze: true,\n                freeze_message: __(\"Fetching Purchase Receipt...\"),\n            }).then(function(pr_name) {\n                if (pr_name && pr_name.message && pr_name.message.get_linked_pr) {\n                    // Purchase Receipt exists, open print view\n                    frappe.run_serially([\n                        () => frappe.route_options = {\n                            frm: 'Purchase Receipt',\n                            name: pr_name.message.get_linked_pr\n                        },\n                        () => frappe.set_route('print', 'Purchase Receipt', pr_name.message.get_linked_pr)\n                    ]);\n                } else {\n                    // No Purchase Receipt found\n                    frappe.msgprint({\n                        title: __('Purchase Receipt Not Found'),\n                        message: __('No submitted Purchase Receipt has been generated against Purchase Order {0}', [doc.name]),\n                        indicator: 'orange'\n                    });\n                }\n            });\n        }\n    }\n};",
  "view": "List"
 },
 {
  "docstatus": 0,
  "doctype": "Client Script",
  "dt": "Purchase Order",
  "enabled": 0,
  "modified": "2024-11-26 10:24:18.221536",
  "module": null,
  "name": "purchase order button for print receipt",
  "script": "frappe.listview_settings['Purchase Order'] = {\n    onload: function(listview) {\n        listview.page.add_inner_button(__('Print PR'), function() {\n            const selected_docs = listview.get_checked_items();\n            \n            if (selected_docs.length === 0) {\n                frappe.msgprint({\n                    title: __('Warning'),\n                    indicator: 'red',\n                    message: __('Please select at least one Purchase Order')\n                });\n                return;\n            }\n            \n            const po_id = selected_docs[0].name;\n            \n            // First get the PO details\n            frappe.db.get_doc('Purchase Order', po_id)\n                .then(po_doc => {\n                    console.log(\"PO Document:\", po_doc);\n                    \n                    // Call server script\n                    frappe.call({\n                        method: 'get_linked_purchase_receipts',\n                        args: {\n                            purchase_order: po_id\n                        },\n                        callback: function(r) {\n                            console.log(\"Server Response:\", r);\n                            \n                            if (r.message.status === 'error') {\n                                frappe.msgprint({\n                                    title: __('Error'),\n                                    indicator: 'red',\n                                    message: r.message.message\n                                });\n                                return;\n                            }\n                            \n                            const receipts = r.message.message;\n                            console.log(\"Debug Info:\", r.message.debug);\n                            \n                            if (receipts && receipts.length > 0) {\n                                showPurchaseReceiptsDialog(receipts, po_id);\n                            } else {\n                                // Also check child table directly\n                                frappe.db.get_list('Purchase Receipt Item', {\n                                    filters: {\n                                        'purchase_order': po_id\n                                    },\n                                    fields: ['parent', 'purchase_order', 'name', 'item_code'],\n                                    limit: 0\n                                }).then(items => {\n                                    console.log(\"Direct Child Table Query:\", items);\n                                    \n                                    frappe.msgprint({\n                                        title: __('Not Found'),\n                                        indicator: 'orange',\n                                        message: __('No Purchase Receipts found for Purchase Order: ') + po_id + \n                                                '\\nPlease check browser console for debug information.' +\n                                                '\\nChild Table Records Found: ' + items.length\n                                    });\n                                });\n                            }\n                        }\n                    });\n                })\n                .catch(err => {\n                    console.error(\"Error fetching PO:\", err);\n                    frappe.msgprint({\n                        title: __('Error'),\n                        indicator: 'red',\n                        message: __('Error fetching Purchase Order details. Check console for more information.')\n                    });\n                });\n        });\n    }\n};\n\nfunction showPurchaseReceiptsDialog(receipts, po_id) {\n    const d = new frappe.ui.Dialog({\n        title: __('Purchase Receipts for PO: ') + po_id,\n        fields: [\n            {\n                fieldtype: 'HTML',\n                fieldname: 'pr_list'\n            }\n        ]\n    });\n    \n    let html = `\n        <div class=\"pr-list\">\n            <table class=\"table table-bordered\">\n                <thead>\n                    <tr>\n                        <th>Purchase Receipt</th>\n                        <th>Date</th>\n                        <th>Item Code</th>\n                        <th>Actions</th>\n                    </tr>\n                </thead>\n                <tbody>\n    `;\n    \n    receipts.forEach(pr => {\n        html += `\n            <tr>\n                <td>${pr.name}</td>\n                <td>${frappe.datetime.str_to_user(pr.posting_date)}</td>\n                <td>${pr.item_code || ''}</td>\n                <td>\n                    <button class=\"btn btn-xs btn-default\" \n                            onclick=\"frappe.set_route('Form', 'Purchase Receipt', '${pr.name}')\">\n                        View\n                    </button>\n                </td>\n            </tr>\n        `;\n    });\n    \n    html += `\n                </tbody>\n            </table>\n        </div>\n    `;\n    \n    d.fields_dict.pr_list.$wrapper.html(html);\n    d.show();\n}",
  "view": "List"
 },
 {
  "docstatus": 0,
  "doctype": "Client Script",
  "dt": "Purchase Order",
  "enabled": 1,
  "modified": "2024-11-26 10:24:30.296613",
  "module": "",
  "name": "purchase order print buttons",
  "script": "frappe.listview_settings['Purchase Order'] = {\n    onload: function(listview) {\n        // Add custom button to list view\n        listview.page.add_inner_button(__('Merge'), function() {\n            // Get selected documents\n            const selected_docs = listview.get_checked_items();\n            \n            // Check if any documents are selected\n            if (selected_docs.length === 0) {\n                frappe.msgprint({\n                    title: __('Warning'),\n                    indicator: 'red',\n                    message: __('Please select at least one Purchase Receipt')\n                });\n                return;\n            }\n\n            // Get details of each selected Purchase Receipt\n            Promise.all(selected_docs.map(doc => {\n                return new Promise((resolve) => {\n                    frappe.db.get_doc('Purchase Invoice', doc.name)\n                        .then(pr_doc => {\n                            resolve(pr_doc);\n                        });\n                });\n            })).then(receipts => {\n                if (receipts.length > 0) {\n                    // Get first document's vendor and supplier for comparison\n                    const firstDoc = receipts[0];\n                    const firstVendor = firstDoc.custom_vendor;\n                    const firstSupplier = firstDoc.supplier;\n\n                    // Check if all documents have the same vendor and supplier\n                    const hasDifferentValues = receipts.some(doc =>\n                        doc.custom_vendor !== firstVendor ||\n                        doc.supplier !== firstSupplier\n                    );\n\n                    if (hasDifferentValues) {\n                        frappe.msgprint({\n                            title: __('Cannot Merge'),\n                            indicator: 'red',\n                            message: __('Selected receipts have different vendor and supplier values. Please select receipts with matching vendor and supplier.')\n                        });\n                    } else {\n                        // If vendors match, format item details\n                        let message = `Matching Purchase Receipts (Vendor: ${firstVendor}, Supplier: ${firstSupplier})\\n\\n`;\n\n                        receipts.forEach(receipt => {\n                            message += `Purchase Receipt: ${receipt.name}\\n`;\n                            message += `${'='.repeat(100)}\\n`;\n                            message += `Item Code | Item Name | Qty | UOM | Rate | Amount | Warehouse\\n`;\n                            message += `${'-'.repeat(100)}\\n`;\n\n                            receipt.items.forEach(item => {\n                                message += `${item.item_code} | `;\n                                message += `${item.item_name || 'N/A'} | `;\n                                message += `${item.qty} | `;\n                                message += `${item.uom} | `;\n                                message += `${item.rate} | `;\n                                message += `${item.amount} | `;\n                                message += `${item.warehouse}\\n`;\n                            });\n                            message += `\\n`;\n\n                            // Add receipt totals\n                            message += `Total Quantity: ${receipt.items.reduce((sum, item) => sum + item.qty, 0)}\\n`;\n                            message += `Total Amount: ${receipt.total}\\n\\n`;\n                        });\n\n                        // Display results in a dialog box\n                        frappe.msgprint({\n                            title: __('Items in Selected Purchase Receipts'),\n                            indicator: 'green',\n                            message: message,\n                            wide: true\n                        });\n\n                        // Log for debugging\n                        console.log(\"Purchase Receipts Data:\", receipts);\n                    }\n                }\n            });\n        }, 'Actions');\n    },\n\n    // Add checkbox selection to the list view\n    onrender: function(listview) {\n        // Ensure checkboxes are visible\n        listview.page.wrapper.find('.list-row-checkbox').removeClass('hide');\n    }\n};",
  "view": "List"
 },
 {
  "docstatus": 0,
  "doctype": "Client Script",
  "dt": "Branch",
  "enabled": 1,
  "modified": "2024-10-25 23:33:52.070530",
  "module": "o2o ErpNext",
  "name": "Branch",
  "script": "frappe.ui.form.on('Branch', {\n\trefresh(frm) {\n\t\t// your code here\n\t\tfrm.set_query(\"custom_parent_branch\", function() {\n        return {\n            \"filters\": {\n                \"custom_child_branch\": 0,\n            }\n        };\n    });\n\t}\n})\n\n// frappe.ui.form.on('Shipping Address Details', {\n// \trefresh(frm) {\n// \t\t// your code here\n// \t\tfrm.set_query(\"city\", function() {\n//         return {\n//             \"filters\": {\n//                 city in state\n//             }\n//         };\n//     });\n// \t}\n// })\n\nfrappe.ui.form.on('Branch',  {\n    refresh: function(frm) {\n        frm.set_query(\"city\", \"custom_shipping_address_details\", function (doc, cdt, cdn) {\n          return {\n            \"filters\": {\n              \"State\": \"Maharashtra\",\n            },\n          };\n        });\n    }\n});\n//Remove Form View Menu contents\nfrappe.ui.form.on('Branch', {\n    refresh: function(frm) {\n        setTimeout( () => {\n            // frm.page.remove_inner_button('Print');\n            // frm.page.remove_inner_button('Customer', 'Create');\n            // frm.page.remove_inner_button('Quotation', 'Create');\n            // frm.page.remove_inner_button('Add to Prospect', 'Action');\n            frm.page.menu.find('[data-label=\"Create%20%3E%20Customer\"],\\\n            [data-label=\"Print\"],\\\n            [data-label=\"Email\"],\\\n            [data-label=\"Links\"],\\\n            [data-label=\"Jump%20to%20field\"],\\\n            [data-label=\"Duplicate\"],\\\n            [data-label=\"Send%20SMS\"],\\\n            [data-label=\"Copy%20to%20Clipboard\"],\\\n            [data-label=\"Reload\"],\\\n            [data-label=\"Delete\"],\\\n            [data-label=\"Remind%20Me\"],\\\n            [data-label=\"Undo\"],\\\n            [data-label=\"Redo\"],\\\n            [data-label=\"Rename\"],\\\n            [data-label=\"Action%20%3E%20Add%20to%20Prospect\"]').parent().parent().remove();\n        }, 10);\n    }\n});",
  "view": "Form"
 },
 {
  "docstatus": 0,
  "doctype": "Client Script",
  "dt": "Item",
  "enabled": 1,
  "modified": "2024-10-25 23:33:51.463326",
  "module": "o2o ErpNext",
  "name": "Item Master",
  "script": "frappe.ui.form.on('Item', {\n    validate: function(frm) {\n        if (frm.doc.custom_o2o_rates && frm.doc.custom_gst_slab_percentage) {\n            var o2o_rates = parseFloat(frm.doc.custom_o2o_rates) || 0;\n            var gst_percentage = parseFloat(frm.doc.custom_gst_slab_percentage) || 0;\n            \n            var gst_amount = o2o_rates * gst_percentage / 100;\n            amt_in_gst = gst_amount + o2o_rates;\n            frm.set_value('custom_amt_in_gst',amt_in_gst);\n            frm.refresh_field('custom_amt_in_gst');\n        }\n    },\n    custom_o2o_rates: function(frm) {\n        console.log(frm.doc.custom_o2o_rates);\n        if (frm.doc.custom_o2o_rates && frm.doc.custom_gst_slab_percentage) {\n            var o2o_rates = parseFloat(frm.doc.custom_o2o_rates) || 0;\n            var gst_percentage = parseFloat(frm.doc.custom_gst_slab_percentage) || 0;\n            \n            var gst_amount = o2o_rates * gst_percentage / 100;\n            amt_in_gst = gst_amount + o2o_rates;\n            frm.set_value('custom_amt_in_gst',amt_in_gst);\n            frm.refresh_field('custom_amt_in_gst');\n        }\n    },\n    custom_gst_slab_percentage: function(frm) {\n        if (frm.doc.custom_o2o_rates && frm.doc.custom_gst_slab_percentage) {\n            var o2o_rates = parseFloat(frm.doc.custom_o2o_rates) || 0;\n            var gst_percentage = parseFloat(frm.doc.custom_gst_slab_percentage) || 0;\n            \n            var gst_amount = o2o_rates * gst_percentage / 100;\n            amt_in_gst = gst_amount + o2o_rates;\n            frm.set_value('custom_amt_in_gst',amt_in_gst);\n            frm.refresh_field('custom_amt_in_gst');\n        }\n    }\n    \n});\n\nfrappe.ui.form.on(\"Item\", {\nrefresh:function(frm) {\n    $('.form-attachments').hide()\n    $('.form-tags').hide()\n    $('.form-share').hide()\n    $('.form-attachments').hide()\n  }\n});\n\nfrappe.ui.form.on('Item', {\n\trefresh(frm) {\n\t\t// your code here\n\t\tfrm.set_query(\"custom_sub_category\", function() {\n        return {\n            \"filters\": {\n                \"is_group\": 0,\n            }\n        };\n    });\n\t}\n})\n\nfrappe.ui.form.on('Item', {\n    refresh(frm) {\n        setTimeout(() => {\n            // frm.remove_custom_button('Get Items From');\n            frm.remove_custom_button('Stock Projected Qty', 'View');\n            // frm.remove_custom_button('Stock Ledger', 'View');\n            // frm.remove_custom_button('Stock Balance', 'View');\n            frm.remove_custom_button('Add / Edit Prices', 'Actions');\n            frm.remove_custom_button('Duplicate');\n            }, 10);\n    }\n});\n//Remove Form View Menu contents\nfrappe.ui.form.on('Item', {\n    refresh: function(frm) {\n        setTimeout( () => {\n            // frm.page.remove_inner_button('Print');\n            // frm.page.remove_inner_button('Customer', 'Create');\n            // frm.page.remove_inner_button('Quotation', 'Create');\n            // frm.page.remove_inner_button('Add to Prospect', 'Action');\n            frm.page.menu.find('[data-label=\"Create%20%3E%20Customer\"],\\\n            [data-label=\"Print\"],\\\n            [data-label=\"Email\"],\\\n            [data-label=\"Links\"],\\\n            [data-label=\"Email\"],\\\n            [data-label=\"Duplicate\"],\\\n            [data-label=\"Send%20SMS\"],\\\n            [data-label=\"Copy%20to%20Clipboard\"],\\\n            [data-label=\"Reload\"],\\\n            [data-label=\"Delete\"],\\\n            [data-label=\"Remind%20Me\"],\\\n            [data-label=\"Undo\"],\\\n            [data-label=\"Redo\"],\\\n            [data-label=\"Repeat\"],\\\n            [data-label=\"New%20Item\"],\\\n            [data-label=\"Rename\"],\\\n            [data-label=\"Action%20%3E%20Add%20to%20Prospect\"]').parent().parent().remove();\n        }, 10);\n    }\n});\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n",
  "view": "Form"
 },
 {
  "docstatus": 0,
  "doctype": "Client Script",
  "dt": "Purchase Order",
  "enabled": 1,
  "modified": "2024-10-25 23:33:51.132082",
  "module": "o2o ErpNext",
  "name": "Purchase Order",
  "script": "frappe.ui.form.on('Purchase Order', {\n\trefresh(frm) {\n\t\t// your code here\n\t\tfrm.set_query(\"custom_branch\", function() {\n        return {\n            \"filters\": {\n                \"custom_child_branch\": 1,\n            }\n        };\n    });\n\t}\n});\n\nfrappe.ui.form.on(\"Purchase Order\", \"validate\", function(frm) {\n    cur_frm.set_value(\"custom_created_user\", frm.doc.owner);\n});\n\nfrappe.ui.form.on('Purchase Order', {\n\trefresh(frm) {\n\t\t// your code here\n\t\tfrm.set_query(\"custom_vendor\", function() {\n        return {\n            \"filters\": {\n                \"custom_is_vendor\": 1,\n            }\n        };\n    });\n\t}\n});\n\nfrappe.ui.form.on('Purchase Order', {\n\trefresh(frm) {\n\t\t// your code here\n\t\tfrm.set_query(\"supplier\", function() {\n        return {\n            \"filters\": {\n                \"custom_is_vendor\": 0,\n            }\n        };\n    });\n\t}\n})\n\nfrappe.ui.form.on('Purchase Order', {\n\trefresh(frm) {\n\t\t// your code here\n\t\tfrm.set_query(\"supplier\", function() {\n        return {\n            \"filters\": {\n                \"custom_is_vendor\": 0,\n            }\n        };\n    });\n\t}\n});\n\nfrappe.ui.form.on(\"Purchase Order\", {\n    refresh:function(frm) {\n        $('.form-attachments').hide();\n        $('.form-tags').hide();\n        $('.form-share').hide();\n        $('.form-attachments').hide();\n    }\n});\n\n\nfrappe.ui.form.on('Purchase Order', {\n\trefresh(frm) {\n\t\t// your code here\n\t\t    frm.set_query(\"supplier_address\", function() {\n            return {\n                \"filters\": {\n                    \"address_type\":\"Billing\" ,\n                    // \"custom_branch\": doc.custom_branch ,\n                    \"name\": doc.supplier ,\n                }\n            };\n        });\n\t}\n});\n\n// frappe.ui.form.on('Purchase Order', {\n// \trefresh(frm) {\n// \t\t// your code here\n// \t\t    frm.set_query(\"shipping_address\", function() {\n//             return {\n//                 \"filters\": {\n//                     \"address_type\":\"Shipping\" ,\n//                     // \"custom_branch\": doc.custom_branch ,\n//                     \"name\": doc.supplier ,\n//                 }\n//             };\n//         });\n// \t}\n// });\n\n\n\nfrappe.ui.form.on('Purchase Order', {\n    refresh: function (frm) {\n        // This function will run when the form is refreshed\n        // You can initialize or manipulate fields here if needed\n    },\n    onload: function (frm) {\n        // This function will run when the form is loaded\n        // You can initialize fields or set default values here if needed\n        let supplier = frm.doc.supplier;\n        if (supplier) {\n            // Get the first 3 characters of the supplier_code\n            let codeSubstring = supplier.substring(0, 3).toUpperCase();\n            \n            // Set the substring to another field or use it as needed\n            frm.set_value('custom_supplier_code', codeSubstring);\n        } else {\n            // Clear the substring field if supplier_code is empty\n            frm.set_value('custom_supplier_code', '');\n        }\n    },\n    supplier: function (frm) {\n        // This function triggers when `supplier_code` field is modified\n        let supplier = frm.doc.supplier;\n        if (supplier) {\n            // Get the first 3 characters of the supplier_code\n            let codeSubstring = supplier.substring(0, 3).toUpperCase();\n            \n            // Set the substring to another field or use it as needed\n            frm.set_value('custom_supplier_code', codeSubstring);\n        } else {\n            // Clear the substring field if supplier_code is empty\n            frm.set_value('custom_supplier_code', '');\n        }\n    }\n});\n\n\nfrappe.ui.form.on('Purchase Order', {\n    refresh: function (frm) {\n        // This function will run when the form is refreshed\n        // You can initialize or manipulate fields here if needed\n    },\n    onload: function (frm) {\n            let transaction_date = frm.doc.transaction_date;\n            \n            let date = new Date(transaction_date);\n            let days = ['SUN', 'MON', 'TUE', 'WED', 'THU', 'FRI', 'SAT'];\n            // Get the day of the week\n            let dayOfWeek = days[date.getDay()];\n\n\n            let fullYear = date.getFullYear();\n            // Extract the last two digits of the year\n            let yearYY = fullYear.toString().slice(-2);\n            let order_code = \"POA\"+dayOfWeek+yearYY;\n            if(frm.doc.docstatus === 0) {\n                frm.set_value('custom_order_code', order_code);    \n            }\n            \n\n    },\n    transaction_date: function (frm) {\n        let transaction_date = frm.doc.transaction_date;\n            let date = new Date(transaction_date);\n            let days = ['SUN', 'MON', 'TUE', 'WED', 'THU', 'FRI', 'SAT'];\n            // Get the day of the week\n            let dayOfWeek = days[date.getDay()];\n            let fullYear = date.getFullYear();\n            // Extract the last two digits of the year\n            let yearYY = fullYear.toString().slice(-2);\n            let order_code = \"POA\"+dayOfWeek+yearYY;\n            if(frm.doc.docstatus === 0) {\n                frm.set_value('custom_order_code', order_code);\n            }\n\n    }\n});\n\nfrappe.ui.form.on('Purchase Order', {\n    // refresh: function(frm) {\n    //     calculate_and_set_gst_value(frm);\n    // },\n    onload: function(frm) {\n        calculate_and_set_gst_value(frm);\n    },\n    // items_on_form_rendered: function(frm) {\n    //     frm.fields_dict.items.grid.on('change', function (e) {\n    //         calculate_and_set_gst_value(frm);\n    //     });\n    // },\n    validate: function(frm) {\n        calculate_and_set_gst_value(frm);\n    }\n});\n\n\nfunction calculate_and_set_gst_value(frm) {\n    // console.log(frm.doc.items)\n    $.each(frm.doc.items || [], function (i, item) {\n        let total_sgst = 0;\n        let total_cgst = 0;\n        let total_igst = 0;\n        // console.log(item)\n        // if (item.taxes) {\n        //     $.each(item.taxes || [], function (j, tax) {\n        //         // console.log(item)\n        //         if (tax.account_head) {\n        //             if (tax.account_head.includes('SGST')) {\n        //                 total_sgst += flt(tax.tax_amount);\n        //             } else if (tax.account_head.includes('CGST')) {\n        //                 total_cgst += flt(tax.tax_amount);\n        //             } else if (tax.account_head.includes('IGST')) {\n        //                 total_igst += flt(tax.tax_amount);\n        //             }\n        //         }\n        //     });\n        //     // console.log(item)\n            \n        // }\n        \n        if (item.sgst_amount == null) { // This checks for both null and undefined\n            item.sgst_amount = 0;\n        }\n        \n        if (item.cgst_amount == null) { // This checks for both null and undefined\n            item.cgst_amount = 0;\n        }\n        \n        if (item.igst_amount == null) { // This checks for both null and undefined\n            item.igst_amount = 0;\n        }\n        \n        if (item.net_amount == null) { // This checks for both null and undefined\n            item.net_amount = 0;\n        }\n\n        let total_tax = 0;\n        let grand_total = 0;\n        // frappe.msgprint(item.sgst_amount +\" => \"+ item.cgst_amount+\"=>\" + item.igst_amount)\n        total_tax = parseFloat(item.sgst_amount) + parseFloat(item.cgst_amount) + parseFloat(item.igst_amount);\n        \n        // console.log( \"total taxt\"+total_tax)\n        grand_total = parseFloat(item.net_amount) + parseFloat(total_tax);\n        console.log(grand_total);\n        // console.log(\"grand total \" + grand_total)\n        // console.log(\"herere\")\n        // console.log(gst_value);\n        //Set the GST value in the custom field of the item\n        frappe.model.set_value(item.doctype, item.name, 'custom_gstn_value', total_tax);\n        frappe.model.set_value(item.doctype, item.name, 'custom_grand_total', grand_total);\n        frm.refresh_field('items');\n        \n    });\n}\n// frappe.ui.form.on('Purchase Order', {\n// \trefresh: function(frm) {\n// \t    $('span.sidebar-toggle-btn').hide();\n// \t\t$('.col-lg-2.layout-side-section').hide();\n// \t}\n// });\n\n\nfrappe.ui.form.on('Purchase Order', {\n    refresh(frm) {\n        setTimeout(() => {\n            frm.remove_custom_button('Get Items From');\n            frm.remove_custom_button('Product Bundle', 'Get Items From');\n            frm.remove_custom_button('Material Request', 'Get Items From');\n            frm.remove_custom_button('Supplier Quotation', 'Get Items From');\n            frm.remove_custom_button('Update Items');\n            frm.remove_custom_button('Payment', 'Create');\n            frm.remove_custom_button('Payment Request', 'Create');\n            frm.remove_custom_button('Purchase Invoice', 'Create');\n            frm.remove_custom_button('Link to Material Request', 'Tools');\n            frm.remove_custom_button('Update Rate as per Last Purchase', 'Tools');\n            frm.remove_custom_button('Print');\n            frm.remove_custom_button('Update Items');\n            frm.remove_custom_button('Download');\n            frm.remove_custom_button('Hold', 'Status');\n            frm.remove_custom_button('Close', 'Status');\n        }, 10);\n    }\n});\n\n//Remove Form View Menu contents\nfrappe.ui.form.on('Purchase Order', {\n    refresh: function(frm) {\n        setTimeout( () => {\n            // frm.page.remove_inner_button('Print');\n            // frm.page.remove_inner_button('Customer', 'Create');\n            // frm.page.remove_inner_button('Quotation', 'Create');\n            // frm.page.remove_inner_button('Add to Prospect', 'Action');\n            frm.page.menu.find('[data-label=\"Create%20%3E%20Customer\"],\\\n            [data-label=\"Print\"],\\\n            [data-label=\"Email\"],\\\n            [data-label=\"Links\"],\\\n            [data-label=\"Duplicate\"],\\\n            [data-label=\"Send%20SMS\"],\\\n            [data-label=\"Copy%20to%20Clipboard\"],\\\n            [data-label=\"Reload\"],\\\n            [data-label=\"Remind%20Me\"],\\\n            [data-label=\"Undo\"],\\\n            [data-label=\"Redo\"],\\\n            [data-label=\"Repeat\"],\\\n            [data-label=\"New%20Purchase%20Order\"],\\\n            [data-label=\"Action%20%3E%20Add%20to%20Prospect\"]').parent().parent().remove();\n        }, 10);\n    }\n});\n\n\n\n\n\n\n\n\n\n//Remove form view menu contents\n// frappe.ui.form.on('Purchase Order', {\n//     refresh(frm) {\n//         frm.menu.find('[data-label=\"Print\"]').parent().hide();\n//         frm.menu.find('[data-label=\"Duplicate\"]').parent().remove();\n//     }\n//     })\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n",
  "view": "Form"
 },
 {
  "docstatus": 0,
  "doctype": "Client Script",
  "dt": "Purchase Receipt",
  "enabled": 1,
  "modified": "2024-10-25 23:33:51.155320",
  "module": "o2o ErpNext",
  "name": "Purchase Receipt",
  "script": "frappe.ui.form.on('Purchase Receipt', {\n\trefresh(frm) {\n\t\t// your code here\n\t\tfrm.set_query(\"custom_vendor\", function() {\n        return {\n            \"filters\": {\n                \"custom_is_vendor\": 1,\n            }\n        };\n    });\n\t}\n})\n\nfrappe.ui.form.on('Purchase Receipt', {\n\trefresh(frm) {\n\t\t// your code here\n\t\tfrm.set_query(\"supplier\", function() {\n        return {\n            \"filters\": {\n                \"custom_is_vendor\": 0,\n            }\n        };\n    });\n\t}\n})\n\nfrappe.ui.form.on('Purchase Receipt', {\n    refresh: function (frm) {\n        // This function will run when the form is refreshed\n        // You can initialize or manipulate fields here if needed\n    },\n    onload: function (frm) {\n        // This function will run when the form is loaded\n        // You can initialize fields or set default values here if needed\n        let supplier = frm.doc.supplier;\n        if (supplier) {\n            // Get the first 3 characters of the supplier_code\n            let codeSubstring = supplier.substring(0, 3).toUpperCase();\n            \n            // Set the substring to another field or use it as needed\n            frm.set_value('custom_supplier_code', codeSubstring);\n        } else {\n            // Clear the substring field if supplier_code is empty\n            frm.set_value('custom_supplier_code', '');\n        }\n    },\n    supplier: function (frm) {\n        // This function triggers when `supplier_code` field is modified\n        let supplier = frm.doc.supplier;\n        if (supplier) {\n            // Get the first 3 characters of the supplier_code\n            let codeSubstring = supplier.substring(0, 3).toUpperCase();\n            \n            // Set the substring to another field or use it as needed\n            frm.set_value('custom_supplier_code', codeSubstring);\n        } else {\n            // Clear the substring field if supplier_code is empty\n            frm.set_value('custom_supplier_code', '');\n        }\n    }\n});\n\nfrappe.ui.form.on('Purchase Receipt', {\n    refresh: function (frm) {\n        // This function will run when the form is refreshed\n        // You can initialize or manipulate fields here if needed\n    },\n    onload: function (frm) {\n        // This function will run when the form is loaded\n        // You can initialize fields or set default values here if needed\n        let custom_vendor = frm.doc.custom_vendor;\n        if (custom_vendor) {\n            // Get the first 3 characters of the supplier_code\n            let codeSubstring = custom_vendor.substring(0, 3).toUpperCase();\n            \n            // Set the substring to another field or use it as needed\n            frm.set_value('custom_vendor_code', codeSubstring);\n        } else {\n            // Clear the substring field if supplier_code is empty\n            frm.set_value('custom_vendor_code', '');\n        }\n    },\n    custom_vendor: function (frm) {\n        // This function triggers when `supplier_code` field is modified\n        let custom_vendor = frm.doc.custom_vendor;\n        if (custom_vendor) {\n            // Get the first 3 characters of the supplier_code\n            let codeSubstring = custom_vendor.substring(0, 3).toUpperCase();\n            \n            // Set the substring to another field or use it as needed\n            frm.set_value('custom_vendor_code', codeSubstring);\n        } else {\n            // Clear the substring field if supplier_code is empty\n            frm.set_value('custom_vendor_code', '');\n        }\n    }\n});\n\nfrappe.ui.form.on('Purchase Receipt', {\n    refresh: function (frm) {\n        // This function will run when the form is refreshed\n        // You can initialize or manipulate fields here if needed\n    },\n    onload: function (frm) {\n        if (!frm.doc.fiscal_year) {\n            // Fetch the current fiscal year based on the current date\n            frappe.call({\n                method: 'frappe.client.get_list',\n                args: {\n                    doctype: 'Fiscal Year',\n                    filters: {\n                        'year_start_date': ['<=', frappe.datetime.get_today()],\n                        'year_end_date': ['>=', frappe.datetime.get_today()]\n                    },\n                    fields: ['name']\n                },\n                callback: function(r) {\n                    if (r.message && r.message.length > 0) {\n                        var fiscal_year = r.message[0].name;\n                        var start_year = fiscal_year.split('-')[0];\n                        var end_year = fiscal_year.split('-')[1];\n                        display_fiscal_year = start_year.substring(2) + '-' + end_year.substring(2);    \n                        console.log(\"==>\" + fiscal_year)\n                        frm.set_value('custom_fiscal_year', display_fiscal_year);\n                    }\n                }\n            });\n        }\n    }\n});\n\nfrappe.ui.form.on('Purchase Receipt', {\n    refresh(frm) {\n        setTimeout(() => {\n            // frm.remove_custom_button('Get Items From');\n            frm.remove_custom_button('Purchase Invoice', 'Get Items From');\n            frm.remove_custom_button('Purchase Order', 'Get Items From');\n            // frm.remove_custom_button('Preview');\n            frm.remove_custom_button('Stock Ledger', 'Preview');\n            frm.remove_custom_button('Accounting Ledger', 'Preview');\n            // frm.remove_custom_button('View');\n            frm.remove_custom_button('Asset', 'View');\n            frm.remove_custom_button('Stock Ledger', 'View');\n            frm.remove_custom_button('Accounting Ledger', 'View');\n            frm.remove_custom_button('Asset Movement', 'View');\n            frm.remove_custom_button('Purchase Return', 'Create');\n            frm.remove_custom_button('Make Stock Entry', 'Create');\n            // frm.remove_custom_button('Purchase Invoice', 'Create');\n            frm.remove_custom_button('Retention Stock Entry', 'Create');\n            frm.remove_custom_button('Close', 'Status');\n        }, 10);\n    }\n});\n//Remove Form View Menu contents\nfrappe.ui.form.on('Purchase Receipt', {\n    refresh: function(frm) {\n        setTimeout( () => {\n            // frm.page.remove_inner_button('Print');\n            // frm.page.remove_inner_button('Customer', 'Create');\n            // frm.page.remove_inner_button('Quotation', 'Create');\n            // frm.page.remove_inner_button('Add to Prospect', 'Action');\n            frm.page.menu.find('[data-label=\"Create%20%3E%20Customer\"],\\\n            [data-label=\"Print\"],\\\n            [data-label=\"Email\"],\\\n            [data-label=\"Links\"],\\\n            [data-label=\"Send%20SMS\"],\\\n            [data-label=\"Copy%20to%20Clipboard\"],\\\n            [data-label=\"Reload\"],\\\n            [data-label=\"Delete\"],\\\n            [data-label=\"Remind%20Me\"],\\\n            [data-label=\"Undo\"],\\\n            [data-label=\"Redo\"],\\\n            [data-label=\"Repeat\"],\\\n            [data-label=\"New%20Purchase%20Receipt\"],\\\n            [data-label=\"Action%20%3E%20Add%20to%20Prospect\"]').parent().parent().remove();\n        }, 10);\n    }\n});\n\n\nfrappe.ui.form.on('Purchase Receipt', {\n    refresh: function (frm) {\n        // This function will run when the form is refreshed\n        // You can initialize or manipulate fields here if needed\n    },\n    onload: function (frm) {\n    },\n    custom_weight_in_kg: function (frm) {\n        // This function triggers when `supplier_code` field is modified\n        let custom_weight_in_kg = frm.doc.custom_weight_in_kg;\n        let custom_rate_per_kg = frm.doc.custom_rate_per_kg;\n        let tax_percent = frm.doc.custom_freight_tax_rate_;\n        let total_freight_amount = 0;\n        let freight_tax_amount = 0;\n        if(custom_weight_in_kg==\"\") {\n            custom_weight_in_kg = 0;\n        }\n        \n        if(custom_rate_per_kg==\"\") {\n            custom_rate_per_kg = 0;\n        }\n        \n        if(tax_percent==\"\") {\n            tax_percent = 0;\n        }\n        \n        let freight_amount = 0;\n        freight_amount = custom_weight_in_kg * custom_rate_per_kg;\n        \n        freight_tax_amount = freight_amount * tax_percent /100;\n        total_freight_amount = freight_amount + freight_tax_amount;\n        \n        frm.set_value('custom_freight_amount', freight_amount);\n        frm.set_value('custom_total_freight_amount', total_freight_amount);\n    },\n    custom_rate_per_kg: function (frm) {\n        // This function triggers when `supplier_code` field is modified\n        let custom_weight_in_kg = frm.doc.custom_weight_in_kg;\n        let custom_rate_per_kg = frm.doc.custom_rate_per_kg;\n        let tax_percent = frm.doc.custom_freight_tax_rate_;\n        let total_freight_amount = 0;\n        let freight_tax_amount = 0;\n        if(custom_weight_in_kg==\"\") {\n            custom_weight_in_kg = 0;\n        }\n        \n        if(custom_rate_per_kg==\"\") {\n            custom_rate_per_kg = 0;\n        }\n        \n        if(tax_percent==\"\") {\n            tax_percent = 0;\n        }\n        \n        let freight_amount = 0;\n        freight_amount = custom_weight_in_kg * custom_rate_per_kg;\n        \n        freight_tax_amount = freight_amount * tax_percent /100;\n        total_freight_amount = freight_amount + freight_tax_amount;\n        \n        frm.set_value('custom_freight_amount', freight_amount);\n        frm.set_value('custom_total_freight_amount', total_freight_amount);\n        \n    },\n    custom_freight_tax_rate_: function (frm) {\n        // This function triggers when `supplier_code` field is modified\n        let custom_weight_in_kg = frm.doc.custom_weight_in_kg;\n        let custom_rate_per_kg = frm.doc.custom_rate_per_kg;\n        let tax_percent = frm.doc.custom_freight_tax_rate_;\n        let total_freight_amount = 0;\n        let freight_tax_amount = 0;\n        if(custom_weight_in_kg==\"\") {\n            custom_weight_in_kg = 0;\n        }\n        \n        if(custom_rate_per_kg==\"\") {\n            custom_rate_per_kg = 0;\n        }\n        \n        if(tax_percent==\"\") {\n            tax_percent = 0;\n        }\n        \n        let freight_amount = 0;\n        freight_amount = custom_weight_in_kg * custom_rate_per_kg;\n        \n        freight_tax_amount = freight_amount * tax_percent /100;\n        total_freight_amount = freight_amount + freight_tax_amount;\n        \n        frm.set_value('custom_freight_amount', freight_amount);\n        frm.set_value('custom_total_freight_amount', total_freight_amount);\n        \n    }\n    \n});\n\nfrappe.ui.form.on('Purchase Receipt', {\n    refresh: function (frm) {\n        // This function will run when the form is refreshed\n        // You can initialize or manipulate fields here if needed\n    },\n    onload: function (frm) {\n        let total_gstn_value = 0;\n         $.each(frm.doc.items, function(i, d) {\n             \n             total_gstn_value = parseFloat(total_gstn_value) + parseFloat(d['custom_gstn_value']);\n             console.log(d);\n             console.log(total_gstn_value);\n         });\n        \n        frm.set_value('custom_total_gstn', total_gstn_value);\n    },\n});\n\n\n\n\n\n\n\n\n\n\n\n",
  "view": "Form"
 },
 {
  "docstatus": 0,
  "doctype": "Client Script",
  "dt": "Supplier",
  "enabled": 1,
  "modified": "2024-10-25 23:33:51.540102",
  "module": "o2o ErpNext",
  "name": "Supplier Master",
  "script": "frappe.ui.form.on('Supplier', {\n\trefresh(frm) {\n\t\t// your code here\n\t\tfrm.set_query(\"custom_branch\", function() {\n        return {\n            \"filters\": {\n                \"custom_child_branch\": 0,\n            }\n        };\n    });\n\t}\n})\n\nfunction custom_is_vendor(frm) {\n  \n                    if (custom_is_vendor = 0) {\n                        custom_branch = 1;\n                   \n                }\n            };\nfrappe.ui.form.on('Supplier', {\n    refresh(frm) {\n        setTimeout(() => {\n            frm.remove_custom_button('Bank Account', 'Create');\n            frm.remove_custom_button('Pricing Rule', 'Create');\n            frm.remove_custom_button('Accounts Payable', 'View');\n            frm.remove_custom_button('Accounting Ledger', 'View');\n            frm.remove_custom_button('Get Supplier Group Details', 'Actions');\n        }, 10);\n    }\n});\n//Remove Form View Menu contents\nfrappe.ui.form.on('Supplier', {\n    refresh: function(frm) {\n        setTimeout( () => {\n            // frm.page.remove_inner_button('Print');\n            // frm.page.remove_inner_button('Customer', 'Create');\n            // frm.page.remove_inner_button('Quotation', 'Create');\n            // frm.page.remove_inner_button('Add to Prospect', 'Action');\n            frm.page.menu.find('[data-label=\"Create%20%3E%20Customer\"],\\\n            [data-label=\"Print\"],\\\n            [data-label=\"Email\"],\\\n            [data-label=\"Links\"],\\\n            [data-label=\"Duplicate\"],\\\n            [data-label=\"Send%20SMS\"],\\\n            [data-label=\"Copy%20to%20Clipboard\"],\\\n            [data-label=\"Reload\"],\\\n            [data-label=\"Delete\"],\\\n            [data-label=\"Remind%20Me\"],\\\n            [data-label=\"Undo\"],\\\n            [data-label=\"Redo\"],\\\n            [data-label=\"Rename\"],\\\n            [data-label=\"New%20Supplier\"],\\\n            [data-label=\"Action%20%3E%20Add%20to%20Prospect\"]').parent().parent().remove();\n        }, 10);\n    }\n});",
  "view": "Form"
 },
 {
  "docstatus": 0,
  "doctype": "Client Script",
  "dt": "Purchase Receipt",
  "enabled": 1,
  "modified": "2024-10-25 23:33:51.210238",
  "module": "o2o ErpNext",
  "name": "Purchase_Receipt_Frieght_Calc",
  "script": "frappe.ui.form.on('Purchase Receipt', {\n    // Trigger on form refresh or save\n    refresh: function(frm) {\n        // Trigger when the document is saved\n        frm.add_custom_button(__('Calculate Charges'), function() {\n            calculate_freight_and_forwarding(frm);\n        });\n        \n    },\n    // Trigger when custom fields are changed\n    freight_charges: function(frm) {\n        calculate_freight_and_forwarding(frm);\n    },\n    custom_weight_in_kg: function(frm) {\n        calculate_freight_and_forwarding(frm);\n    },\n    custom_rate_per_kg: function(frm) {\n        calculate_freight_and_forwarding(frm);\n    }\n\n});\n\nfunction calculate_freight_and_forwarding(frm) {\n    // console.log(\"here\");\n    // Add your calculation logic here\n    let custom_weight_in_kg = frm.doc.custom_weight_in_kg || 0;\n    let custom_rate_per_kg = frm.doc.custom_rate_per_kg || 0;\n    let total_freight_charges = custom_weight_in_kg * custom_rate_per_kg;\n    let freight_cnt = 0;\n    // console.log(frm.doc)\n    if (frm.doc.taxes) {\n        $.each(frm.doc.taxes || [], function (j, tax) {\n            if (tax.account_head) {\n                \n                if (tax.account_head.includes('Freight and Forwarding Charges') && freight_cnt == 0) {\n                    // console.log(\"here\"+ tax.account_head + \"  =>\" + freight_cnt);\n                    frappe.model.set_value(tax.doctype, tax.name, 'tax_amount', total_freight_charges);\n                    frm.refresh_field('purchase_taxes_and_charges');\n                    freight_cnt++;\n                } \n            }\n        });\n        \n        // return false;\n        // console.log(item)\n        \n    }\n}",
  "view": "Form"
 },
 {
  "docstatus": 0,
  "doctype": "Client Script",
  "dt": "Purchase Receipt",
  "enabled": 1,
  "modified": "2024-10-25 23:33:51.191710",
  "module": "o2o ErpNext",
  "name": "Purchase Receipt List View",
  "script": "frappe.listview_settings['Purchase Receipt'] = {\n    button: {\n        show: function(doc) {\n            return true;\n        },\n        get_label: function() {\n            return __('<i class=\"fa fa-print\" style=\"font-size:20px;color:black\"></i>');\n        },\n        get_description: function(doc) {\n            return __('Print {0}', [doc.name])\n        },\n        action: function(doc) {\n            //frappe.set_route(\"/app/print/Purchase Invoice/\" + doc.name);\n            \n            var objWindowOpenResult = window.open(frappe.urllib.get_full_url(\"/api/method/frappe.utils.print_format.download_pdf?\"\n              + \"doctype=\" + encodeURIComponent(\"Purchase Receipt\")\n              + \"&name=\" + encodeURIComponent(doc.name)\n              + \"&trigger_print=0\"\n              + \"&format=test delivery challan\"\n              + \"&no_letterhead=0\"\n              + \"&_lang=en\"\n            ));\n\n            if(!objWindowOpenResult) {\n              msgprint(__(\"Please set permission for pop-up windows in your browser!\")); return;\n            }\n        }\n    }\n}\n\n//List view menu contents remove\n// frappe.listview_settings['Purchase Receipt'] = {\n//     refresh(listview) {\n//         listview.page.menu.find('[data-label=\"User%20Permissions\"]').parent().hide();\n//         listview.page.menu.find('[data-label=\"Role%20Permissions%20Manager\"]').parent().hide();\n//         listview.page.menu.find('[data-label=\"Import\"]').parent().hide();\n//         listview.page.menu.find('[data-label=\"Toggle%20Sidebar\"]').parent().hide();\n//     }\n// }\nfrappe.listview_settings['Purchase Receipt'].onload = function(listview) {\n\t\tlistview.page.actions.find('[data-label=\"Edit\"],[data-label=\"Print\"],[data-label=\"Export\"],[data-label=\"Assign%20To\"],[data-label=\"Apply%20Assignment%20Rule\"],[data-label=\"Add%20Tags\"]').parent().parent().remove()\n};\n//Remove ID column from listing\nfrappe.listview_settings['Purchase Receipt'] = { // And other doctype names\n    hide_name_column: true\n}\n\n\n\n\n\n\n",
  "view": "List"
 },
 {
  "docstatus": 0,
  "doctype": "Client Script",
  "dt": "Purchase Order",
  "enabled": 0,
  "modified": "2024-11-26 11:07:31.078260",
  "module": "o2o ErpNext",
  "name": "Purchase Order List View",
  "script": "frappe.listview_settings['Purchase Order'] = {\n    button: {\n        show: function(doc) {\n            return true;\n        },\n        get_label: function() {\n            return __('<i class=\"fa fa-print\" style=\"font-size:18px;color:black\"></i>');\n        },\n        get_description: function(doc) {\n            return __('Print {0}', [doc.name])\n        },\n        action: function(doc) {\n            //frappe.set_route(\"/app/print/Purchase Invoice/\" + doc.name);\n            \n            var objWindowOpenResult = window.open(frappe.urllib.get_full_url(\"/api/method/frappe.utils.print_format.download_pdf?\"\n              + \"doctype=\" + encodeURIComponent(\"Purchase Order\")\n              + \"&name=\" + encodeURIComponent(doc.name)\n              + \"&trigger_print=0\"\n              + \"&format=test purchase order\"\n              + \"&no_letterhead=0\"\n              + \"&_lang=en\"\n            ));\n\n            if(!objWindowOpenResult) {\n              msgprint(__(\"Please set permission for pop-up windows in your browser!\")); return;\n            }\n        }\n    }\n}\n// frappe.listview_settings['Purchase Order'] = {\n//     refresh(listview) {\n//         listview.page.menu.find('[data-label=\"User%20Permissions\"]').parent().hide();\n//         listview.page.menu.find('[data-label=\"Role%20Permissions%20Manager\"]').parent().hide();\n//         listview.page.menu.find('[data-label=\"Import\"]').parent().hide();\n//         listview.page.menu.find('[data-label=\"Toggle%20Sidebar\"]').parent().hide();\n//     }\n// }\n// frappe.listview_settings['Purchase Order'].onload = function(listview) {\n//\t\tlistview.page.actions.find('[data-label=\"Edit\"],[data-label=\"Print\"],[data-label=\"Export\"],[data-label=\"Assign%20To\"],[data-label=\"Apply%20Assignment%20Rule\"],[data-label=\"Add%20Tags\"]').parent().parent().remove()\n//};\n\n// frappe.listview_settings['Purchase Order'] = { // And other doctype names\n//     hide_name_column: true\n// }\n",
  "view": "List"
 },
 {
  "docstatus": 0,
  "doctype": "Client Script",
  "dt": "Item",
  "enabled": 1,
  "modified": "2024-10-25 23:33:51.503025",
  "module": "o2o ErpNext",
  "name": "Item Master List View",
  "script": "frappe.listview_settings['Item'].onload = function(listview) {\n\t\tlistview.page.actions.find('[data-label=\"Edit\"],[data-label=\"Export\"],[data-label=\"Print\"],[data-label=\"add_tags\"]').parent().parent().remove()\n};\n\n//List view menu contents remove\nfrappe.listview_settings['Item'] = {\n    refresh(listview) {\n        listview.page.menu.find('[data-label=\"User%20Permissions\"]').parent().hide();\n        listview.page.menu.find('[data-label=\"Role%20Permissions%20Manager\"]').parent().hide();\n        listview.page.menu.find('[data-label=\"Import\"]').parent().hide();\n        listview.page.menu.find('[data-label=\"Toggle%20Sidebar\"]').parent().hide();\n        listview.page.menu.find('[data-label=\"List%Settings\"]').parent().hide();\n    }\n}\nfrappe.listview_settings['Item'] = { // And other doctype names\n    hide_name_column: true\n}\nfrappe.listview_settings['Item'].onload = function(listview) {\n\t\tlistview.page.actions.find('[data-label=\"Print\"],[data-label=\"Export\"],[data-label=\"Assign%20To\"],[data-label=\"Apply%20Assignment%20Rule\"],[data-label=\"Add%20Tags\"]').parent().parent().remove()\n};",
  "view": "List"
 },
 {
  "docstatus": 0,
  "doctype": "Client Script",
  "dt": "Item Group",
  "enabled": 1,
  "modified": "2024-10-25 23:33:51.847564",
  "module": "o2o ErpNext",
  "name": "Item Group Master",
  "script": "//Remove form view menu contents\nfrappe.listview_settings['Item Group'] = {\n    refresh(listview) {\n        listview.page.menu.find('[data-label=\"User%20Permissions\"]').parent().hide();\n        listview.page.menu.find('[data-label=\"Role%20Permissions%20Manager\"]').parent().hide();\n        listview.page.menu.find('[data-label=\"Import\"]').parent().hide();\n        listview.page.menu.find('[data-label=\"Toggle%20Sidebar\"]').parent().hide();\n        listview.page.menu.find('[data-label=\"List%Settings\"]').parent().hide();\n    }\n}\nfrappe.listview_settings['Item Group'].onload = function(listview) {\n\t\tlistview.page.actions.find('[data-label=\"Edit\"],[data-label=\"Print\"],[data-label=\"Export\"],[data-label=\"Assign%20To\"],[data-label=\"Apply%20Assignment%20Rule\"],[data-label=\"Add%20Tags\"]').parent().parent().remove()\n};\n\nfrappe.listview_settings['Item Group'] = { // And other doctype names\n    hide_item_group_name_column: true\n}",
  "view": "List"
 },
 {
  "docstatus": 0,
  "doctype": "Client Script",
  "dt": "Supplier",
  "enabled": 1,
  "modified": "2024-10-25 23:33:51.522104",
  "module": "o2o ErpNext",
  "name": "Supplier Master List View",
  "script": "frappe.listview_settings['Supplier'] = { // And other doctype names\n    hide_name_column: true\n}\n//List view menu contents remove\nfrappe.listview_settings['Supplier'] = {\n    refresh(listview) {\n        listview.page.menu.find('[data-label=\"User%20Permissions\"]').parent().hide();\n        listview.page.menu.find('[data-label=\"Role%20Permissions%20Manager\"]').parent().hide();\n        listview.page.menu.find('[data-label=\"Import\"]').parent().hide();\n        listview.page.menu.find('[data-label=\"Toggle%20Sidebar\"]').parent().hide();\n        listview.page.menu.find('[data-label=\"List%Settings\"]').parent().hide();\n    }\n}\n//Remove Action button menu contents\nfrappe.listview_settings['Supplier'].onload = function(listview) {\n\t\tlistview.page.actions.find('[data-label=\"Print\"],[data-label=\"Export\"],[data-label=\"Assign%20To\"],[data-label=\"Apply%20Assignment%20Rule\"],[data-label=\"Add%20Tags\"]').parent().parent().remove()\n};\n\n\n",
  "view": "List"
 },
 {
  "docstatus": 0,
  "doctype": "Client Script",
  "dt": "Branch",
  "enabled": 1,
  "modified": "2024-10-25 23:33:52.135635",
  "module": "o2o ErpNext",
  "name": "Branch Master List View",
  "script": "frappe.listview_settings['Branch'] = { // And other doctype names\n    hide_name_column: true\n}\n//Remove form view menu contents\nfrappe.listview_settings['Branch'] = {\n    refresh(listview) {\n        listview.page.menu.find('[data-label=\"User%20Permissions\"]').parent().hide();\n        listview.page.menu.find('[data-label=\"Role%20Permissions%20Manager\"]').parent().hide();\n        listview.page.menu.find('[data-label=\"Import\"]').parent().hide();\n        listview.page.menu.find('[data-label=\"Toggle%20Sidebar\"]').parent().hide();\n        listview.page.menu.find('[data-label=\"List%Settings\"]').parent().hide();\n    }\n}\nfrappe.listview_settings['Branch'].onload = function(listview) {\n\t\tlistview.page.actions.find('[data-label=\"Edit\"],[data-label=\"Print\"],[data-label=\"Export\"],[data-label=\"Assign%20To\"],[data-label=\"Apply%20Assignment%20Rule\"],[data-label=\"Add%20Tags\"]').parent().parent().remove()\n};",
  "view": "List"
 },
 {
  "docstatus": 0,
  "doctype": "Client Script",
  "dt": "Item Group",
  "enabled": 1,
  "modified": "2024-10-25 23:33:51.482973",
  "module": "o2o ErpNext",
  "name": "Item Group",
  "script": "frappe.ui.form.on('Item Group', {\n    refresh(frm) {\n        setTimeout(() => {\n            frm.remove_custom_button('Items');\n        }, 10);\n    }\n});\nfrappe.ui.form.on(\"Item Group\", \"validate\", function(frm) {\n    cur_frm.set_value(\"custom_created_user\", frm.doc.owner);\n});\n\n//Remove Form View Menu contents\nfrappe.ui.form.on('Item Group', {\n    refresh: function(frm) {\n        setTimeout( () => {\n            // frm.page.remove_inner_button('Print');\n            // frm.page.remove_inner_button('Customer', 'Create');\n            // frm.page.remove_inner_button('Quotation', 'Create');\n            // frm.page.remove_inner_button('Add to Prospect', 'Action');\n            frm.page.menu.find('[data-label=\"Create%20%3E%20Customer\"],\\\n            [data-label=\"Print\"],\\\n            [data-label=\"Email\"],\\\n            [data-label=\"Links\"],\\\n            [data-label=\"Jump%20to%20field\"],\\\n            [data-label=\"Duplicate\"],\\\n            [data-label=\"Send%20SMS\"],\\\n            [data-label=\"Copy%20to%20Clipboard\"],\\\n            [data-label=\"Reload\"],\\\n            [data-label=\"Delete\"],\\\n            [data-label=\"Remind%20Me\"],\\\n            [data-label=\"Undo\"],\\\n            [data-label=\"Redo\"],\\\n            [data-label=\"Rename\"],\\\n            [data-label=\"New%20Item%20Group\"],\\\n            [data-label=\"Action%20%3E%20Add%20to%20Prospect\"]').parent().parent().remove();\n        }, 10);\n    }\n});",
  "view": "Form"
 },
 {
  "docstatus": 0,
  "doctype": "Client Script",
  "dt": "Item Price",
  "enabled": 1,
  "modified": "2024-10-25 23:33:52.119512",
  "module": "o2o ErpNext",
  "name": "Item Price List View",
  "script": "frappe.listview_settings['Item Price'] = {\n    refresh(listview) {\n        listview.page.menu.find('[data-label=\"User%20Permissions\"]').parent().hide();\n        listview.page.menu.find('[data-label=\"Role%20Permissions%20Manager\"]').parent().hide();\n        listview.page.menu.find('[data-label=\"Import\"]').parent().hide();\n        listview.page.menu.find('[data-label=\"Toggle%20Sidebar\"]').parent().hide();\n        listview.page.menu.find('[data-label=\"List%Settings\"]').parent().hide();\n        listview.page.find('[data-label=\"Dashboard\"]').parent().hide();\n    }\n}\nfrappe.listview_settings['Item Price'].onload = function(listview) {\n\t\tlistview.page.actions.find('[data-label=\"Edit\"],[data-label=\"Print\"],[data-label=\"Export\"],[data-label=\"Assign%20To\"],[data-label=\"Apply%20Assignment%20Rule\"],[data-label=\"Add%20Tags\"]').parent().parent().remove()\n};\n",
  "view": "List"
 },
 {
  "docstatus": 0,
  "doctype": "Client Script",
  "dt": "Brand",
  "enabled": 1,
  "modified": "2024-10-25 23:33:52.086980",
  "module": "o2o ErpNext",
  "name": "Brand Master List View",
  "script": "//List view menu contents remove\nfrappe.listview_settings['Brand'] = {\n    refresh(listview) {\n        listview.page.menu.find('[data-label=\"User%20Permissions\"]').parent().hide();\n        listview.page.menu.find('[data-label=\"Role%20Permissions%20Manager\"]').parent().hide();\n        listview.page.menu.find('[data-label=\"Import\"]').parent().hide();\n        listview.page.menu.find('[data-label=\"Toggle%20Sidebar\"]').parent().hide();\n        listview.page.menu.find('[data-label=\"List%Settings\"]').parent().hide();\n    }\n}\nfrappe.listview_settings['Brand'].onload = function(listview) {\n\t\tlistview.page.actions.find('[data-label=\"Edit\"],[data-label=\"Print\"],[data-label=\"Export\"],[data-label=\"Assign%20To\"],[data-label=\"Apply%20Assignment%20Rule\"],[data-label=\"Add%20Tags\"]').parent().parent().remove()\n};",
  "view": "List"
 },
 {
  "docstatus": 0,
  "doctype": "Client Script",
  "dt": "File",
  "enabled": 1,
  "modified": "2024-10-25 23:33:52.037036",
  "module": "o2o ErpNext",
  "name": "File Master List View",
  "script": "//List view menu contents remove\nfrappe.listview_settings['File'] = {\n    refresh(listview) {\n        listview.page.menu.find('[data-label=\"Home\"]').parent().hide();\n        listview.page.menu.find('[data-label=\"New%20Folder\"]').parent().hide();\n        listview.page.menu.find('[data-label=\"Import%20Zip\"]').parent().hide();\n        listview.page.menu.find('[data-label=\"Import\"]').parent().hide();\n        listview.page.menu.find('[data-label=\"User%20Permissions\"]').parent().hide();\n        listview.page.menu.find('[data-label=\"Role%20Permissions%20Manager\"]').parent().hide();\n        listview.page.menu.find('[data-label=\"Toggle%20Sidebar\"]').parent().hide();\n    }\n}\nfrappe.listview_settings['File'].onload = function(listview) {\n\t\tlistview.page.actions.find('[data-label=\"Edit\"],[data-label=\"Print\"],[data-label=\"Export%20as%20zip\"],[data-label=\"Export\"],[data-label=\"Assign%20To\"],[data-label=\"Apply%20Assignment%20Rule\"],[data-label=\"Add%20Tags\"]').parent().parent().remove()\n};",
  "view": "List"
 },
 {
  "docstatus": 0,
  "doctype": "Client Script",
  "dt": "Data Import",
  "enabled": 1,
  "modified": "2024-10-25 23:33:51.987375",
  "module": "o2o ErpNext",
  "name": "Data Import List View",
  "script": "//List view menu contents remove\nfrappe.listview_settings['Data Import'] = {\n    refresh(listview) {\n        listview.page.menu.find('[data-label=\"User%20Permissions\"]').parent().hide();\n        listview.page.menu.find('[data-label=\"Role%20Permissions%20Manager\"]').parent().hide();\n        listview.page.menu.find('[data-label=\"Toggle%20Sidebar\"]').parent().hide();\n    }\n}\nfrappe.listview_settings['Data Import'].onload = function(listview) {\n\t\tlistview.page.actions.find('[data-label=\"Edit\"],[data-label=\"Print\"],[data-label=\"Export\"],[data-label=\"Assign%20To\"],[data-label=\"Apply%20Assignment%20Rule\"],[data-label=\"Add%20Tags\"]').parent().parent().remove()\n};",
  "view": "List"
 },
 {
  "docstatus": 0,
  "doctype": "Client Script",
  "dt": "User",
  "enabled": 1,
  "modified": "2024-10-25 23:33:51.576602",
  "module": "o2o ErpNext",
  "name": "User Master List View",
  "script": "frappe.listview_settings['User'] = { // And other doctype names\n    hide_name_column: true\n}\n//Remove form view menu contents\nfrappe.listview_settings['User'] = {\n    refresh(listview) {\n        listview.page.menu.find('[data-label=\"User%20Permissions\"]').parent().hide();\n        listview.page.menu.find('[data-label=\"Role%20Permissions%20Manager\"]').parent().hide();\n        listview.page.menu.find('[data-label=\"Import\"]').parent().hide();\n        listview.page.menu.find('[data-label=\"Toggle%20Sidebar\"]').parent().hide();\n        // listview.page.menu.find('[data-label=\"List%Settings\"]').parent().hide();\n    }\n}\nfrappe.listview_settings['User'].onload = function(listview) {\n\t\tlistview.page.actions.find('[data-label=\"Print\"],[data-label=\"Export\"],[data-label=\"Assign%20To\"],[data-label=\"Apply%20Assignment%20Rule\"],[data-label=\"Add%20Tags\"]').parent().parent().remove()\n};",
  "view": "List"
 },
 {
  "docstatus": 0,
  "doctype": "Client Script",
  "dt": "User",
  "enabled": 1,
  "modified": "2024-10-25 23:33:51.227717",
  "module": "o2o ErpNext",
  "name": "User Master",
  "script": "frappe.ui.form.on('User', {\n    refresh(frm) {\n        setTimeout(() => {\n            // frm.remove_custom_button('Get Items From');\n            frm.remove_custom_button('Set User Permissions','Permissions');\n            frm.remove_custom_button('View Permitted Documents','Permissions');\n            frm.remove_custom_button('Create User Email');\n            }, 10);\n    }\n});\n//Remove Form View Menu contents\nfrappe.ui.form.on('User', {\n    refresh: function(frm) {\n        setTimeout( () => {\n            // frm.page.remove_inner_button('Print');\n            // frm.page.remove_inner_button('Customer', 'Create');\n            // frm.page.remove_inner_button('Quotation', 'Create');\n            // frm.page.remove_inner_button('Add to Prospect', 'Action');\n            frm.page.menu.find('[data-label=\"Create%20%3E%20Customer\"],\\\n            [data-label=\"Print\"],\\\n            [data-label=\"Email\"],\\\n            [data-label=\"Links\"],\\\n            [data-label=\"Duplicate\"],\\\n            [data-label=\"Send%20SMS\"],\\\n            [data-label=\"Copy%20to%20Clipboard\"],\\\n            [data-label=\"Reload\"],\\\n            [data-label=\"Delete\"],\\\n            [data-label=\"Remind%20Me\"],\\\n            [data-label=\"Undo\"],\\\n            [data-label=\"Redo\"],\\\n            [data-label=\"Repeat\"],\\\n            [data-label=\"New%20User\"],\\\n            [data-label=\"Rename\"],\\\n            [data-label=\"Action%20%3E%20Add%20to%20Prospect\"]').parent().parent().remove();\n        }, 10);\n    }\n});\n",
  "view": "Form"
 },
 {
  "docstatus": 0,
  "doctype": "Client Script",
  "dt": "User Permission",
  "enabled": 1,
  "modified": "2024-10-25 23:33:51.920644",
  "module": "o2o ErpNext",
  "name": "User Permission Master",
  "script": "frappe.ui.form.on('User Permission', {\n    refresh: function(frm) {\n        setTimeout( () => {\n            // frm.page.remove_inner_button('Print');\n            // frm.page.remove_inner_button('Customer', 'Create');\n            // frm.page.remove_inner_button('Quotation', 'Create');\n            // frm.page.remove_inner_button('Add to Prospect', 'Action');\n            frm.page.menu.find('[data-label=\"Create%20%3E%20Customer\"],\\\n            [data-label=\"Print\"],\\\n            [data-label=\"Email\"],\\\n            [data-label=\"Links\"],\\\n            [data-label=\"Jump%20to%20field\"],\\\n            [data-label=\"Copy%20to%20Clipboard\"],\\\n            [data-label=\"Reload\"],\\\n            [data-label=\"Delete\"],\\\n            [data-label=\"Remind%20Me\"],\\\n            [data-label=\"Undo\"],\\\n            [data-label=\"Redo\"],\\\n            [data-label=\"New%20User%20Permission\"],\\\n            [data-label=\"Customize\"],\\\n            [data-label=\"Action%20%3E%20Add%20to%20Prospect\"]').parent().parent().remove();\n        }, 10);\n    }\n});\n\nfrappe.ui.form.on('User Permission', {\n    refresh(frm) {\n        setTimeout(() => {\n            frm.remove_custom_button('View Permitted Documents');\n        }, 10);\n    }\n});\n\n\n\n\n",
  "view": "Form"
 },
 {
  "docstatus": 0,
  "doctype": "Client Script",
  "dt": "Role Profile",
  "enabled": 1,
  "modified": "2024-10-25 23:33:51.881342",
  "module": "o2o ErpNext",
  "name": "Role Prpfile List View",
  "script": "frappe.listview_settings['Role Profile'].onload = function(listview) {\n\t\tlistview.page.actions.find('[data-label=\"Edit\"],[data-label=\"Print\"],[data-label=\"Export\"],[data-label=\"Assign%20To\"],[data-label=\"Apply%20Assignment%20Rule\"],[data-label=\"Add%20Tags\"]').parent().parent().remove()\n};\nfrappe.listview_settings['Role Profile'] = {\n    refresh(listview) {\n        listview.page.menu.find('[data-label=\"User%20Permissions\"]').parent().hide();\n        listview.page.menu.find('[data-label=\"Role%20Permissions%20Manager\"]').parent().hide();\n        listview.page.menu.find('[data-label=\"Import\"]').parent().hide();\n        listview.page.menu.find('[data-label=\"Toggle%20Sidebar\"]').parent().hide();\n        listview.page.menu.find('[data-label=\"List%Settings\"]').parent().hide();\n    }\n}",
  "view": "List"
 },
 {
  "docstatus": 0,
  "doctype": "Client Script",
  "dt": "Item Price",
  "enabled": 1,
  "modified": "2024-10-25 23:33:52.103016",
  "module": "o2o ErpNext",
  "name": "Item Price Master",
  "script": "frappe.ui.form.on('Item Price', {\n    refresh: function(frm) {\n        setTimeout( () => {\n            // frm.page.remove_inner_button('Print');\n            // frm.page.remove_inner_button('Customer', 'Create');\n            // frm.page.remove_inner_button('Quotation', 'Create');\n            // frm.page.remove_inner_button('Add to Prospect', 'Action');\n            frm.page.menu.find('[data-label=\"Create%20%3E%20Customer\"],\\\n            [data-label=\"Print\"],\\\n            [data-label=\"Email\"],\\\n            [data-label=\"Links\"],\\\n            [data-label=\"Jump%20to%20field\"],\\\n            [data-label=\"Duplicate\"],\\\n            [data-label=\"Copy%20to%20Clipboard\"],\\\n            [data-label=\"Reload\"],\\\n            [data-label=\"Delete\"],\\\n            [data-label=\"Remind%20Me\"],\\\n            [data-label=\"Undo\"],\\\n            [data-label=\"Redo\"],\\\n            [data-label=\"Repeat\"],\\\n            [data-label=\"New%20Item%20Price\"],\\\n            [data-label=\"Action%20%3E%20Add%20to%20Prospect\"]').parent().parent().remove();\n        }, 10);\n    }\n});",
  "view": "Form"
 },
 {
  "docstatus": 0,
  "doctype": "Client Script",
  "dt": "Brand",
  "enabled": 1,
  "modified": "2024-10-25 23:33:52.053533",
  "module": "o2o ErpNext",
  "name": "Brand Master",
  "script": "frappe.ui.form.on('Brand', {\n    refresh: function(frm) {\n        setTimeout( () => {\n            // frm.page.remove_inner_button('Print');\n            // frm.page.remove_inner_button('Customer', 'Create');\n            // frm.page.remove_inner_button('Quotation', 'Create');\n            // frm.page.remove_inner_button('Add to Prospect', 'Action');\n            frm.page.menu.find('[data-label=\"Create%20%3E%20Customer\"],\\\n            [data-label=\"Print\"],\\\n            [data-label=\"Email\"],\\\n            [data-label=\"Links\"],\\\n            [data-label=\"Jump%20to%20field\"],\\\n            [data-label=\"Duplicate\"],\\\n            [data-label=\"Send%20SMS\"],\\\n            [data-label=\"Copy%20to%20Clipboard\"],\\\n            [data-label=\"Reload\"],\\\n            [data-label=\"Delete\"],\\\n            [data-label=\"Remind%20Me\"],\\\n            [data-label=\"Undo\"],\\\n            [data-label=\"Redo\"],\\\n            [data-label=\"Rename\"],\\\n            [data-label=\"Action%20%3E%20Add%20to%20Prospect\"]').parent().parent().remove();\n        }, 10);\n    }\n});",
  "view": "Form"
 },
 {
  "docstatus": 0,
  "doctype": "Client Script",
  "dt": "File",
  "enabled": 1,
  "modified": "2024-10-25 23:33:52.020114",
  "module": "o2o ErpNext",
  "name": "File Master",
  "script": "frappe.ui.form.on('File', {\n    refresh: function(frm) {\n        setTimeout( () => {\n            // frm.page.remove_inner_button('Print');\n            // frm.page.remove_inner_button('Customer', 'Create');\n            // frm.page.remove_inner_button('Quotation', 'Create');\n            // frm.page.remove_inner_button('Add to Prospect', 'Action');\n            frm.page.menu.find('[data-label=\"Create%20%3E%20Customer\"],\\\n            [data-label=\"Print\"],\\\n            [data-label=\"Email\"],\\\n            [data-label=\"Links\"],\\\n            [data-label=\"Jump%20to%20field\"],\\\n            [data-label=\"Duplicate\"],\\\n            [data-label=\"Send%20SMS\"],\\\n            [data-label=\"Copy%20to%20Clipboard\"],\\\n            [data-label=\"Reload\"],\\\n            [data-label=\"Delete\"],\\\n            [data-label=\"Remind%20Me\"],\\\n            [data-label=\"Undo\"],\\\n            [data-label=\"Redo\"],\\\n            [data-label=\"Rename\"],\\\n            [data-label=\"New%20File\"],\\\n            [data-label=\"Action%20%3E%20Add%20to%20Prospect\"]').parent().parent().remove();\n        }, 10);\n    }\n});",
  "view": "Form"
 },
 {
  "docstatus": 0,
  "doctype": "Client Script",
  "dt": "Data Import",
  "enabled": 1,
  "modified": "2024-10-25 23:33:52.004100",
  "module": "o2o ErpNext",
  "name": "Data Import Master",
  "script": "//Remove Form View Menu contents\nfrappe.ui.form.on('Data Import', {\n    refresh: function(frm) {\n        setTimeout( () => {\n            // frm.page.remove_inner_button('Print');\n            // frm.page.remove_inner_button('Customer', 'Create');\n            // frm.page.remove_inner_button('Quotation', 'Create');\n            // frm.page.remove_inner_button('Add to Prospect', 'Action');\n            frm.page.menu.find('[data-label=\"Create%20%3E%20Customer\"],\\\n            [data-label=\"Print\"],\\\n            [data-label=\"Email\"],\\\n            [data-label=\"Links\"],\\\n            [data-label=\"Jump%20to%20field\"],\\\n            [data-label=\"Duplicate\"],\\\n            [data-label=\"Send%20SMS\"],\\\n            [data-label=\"Copy%20to%20Clipboard\"],\\\n            [data-label=\"Reload\"],\\\n            [data-label=\"Delete\"],\\\n            [data-label=\"Remind%20Me\"],\\\n            [data-label=\"Undo\"],\\\n            [data-label=\"Redo\"],\\\n            [data-label=\"Rename\"],\\\n            [data-label=\"New%20Data%20Import\"],\\\n            [data-label=\"Action%20%3E%20Add%20to%20Prospect\"]').parent().parent().remove();\n        }, 10);\n    }\n});",
  "view": "Form"
 },
 {
  "docstatus": 0,
  "doctype": "Client Script",
  "dt": "Workspace",
  "enabled": 1,
  "modified": "2024-10-25 23:33:51.969652",
  "module": "o2o ErpNext",
  "name": "Workspace Master",
  "script": "frappe.ui.form.on('Purchase Order', {\n    refresh(frm) {\n        setTimeout(() => {\n            frm.remove_custom_button(\"Edit\");\n        }, 10);\n    }\n});",
  "view": "Form"
 },
 {
  "docstatus": 0,
  "doctype": "Client Script",
  "dt": "Bank",
  "enabled": 1,
  "modified": "2024-10-25 23:33:51.953615",
  "module": "o2o ErpNext",
  "name": "Bank Master List View",
  "script": "frappe.listview_settings['Bank'] = { // And other doctype names\n    hide_custom_account_name_column: true\n}\n//List view menu contents remove\nfrappe.listview_settings['Bank'] = {\n    refresh(listview) {\n        listview.page.menu.find('[data-label=\"User%20Permissions\"]').parent().hide();\n        listview.page.menu.find('[data-label=\"Role%20Permissions%20Manager\"]').parent().hide();\n        listview.page.menu.find('[data-label=\"Import\"]').parent().hide();\n        listview.page.menu.find('[data-label=\"Toggle%20Sidebar\"]').parent().hide();\n        listview.page.menu.find('[data-label=\"List%Settings\"]').parent().hide();\n    }\n}\nfrappe.listview_settings['Bank'].onload = function(listview) {\n\t\tlistview.page.actions.find('[data-label=\"Edit\"],[data-label=\"Print\"],[data-label=\"Export\"],[data-label=\"Assign%20To\"],[data-label=\"Apply%20Assignment%20Rule\"],[data-label=\"Add%20Tags\"]').parent().parent().remove()\n};\n\n\n",
  "view": "List"
 },
 {
  "docstatus": 0,
  "doctype": "Client Script",
  "dt": "Bank",
  "enabled": 1,
  "modified": "2024-10-25 23:33:51.936970",
  "module": "o2o ErpNext",
  "name": "Bank Master",
  "script": "frappe.ui.form.on('Bank', {\n    refresh: function(frm) {\n        setTimeout( () => {\n            // frm.page.remove_inner_button('Print');\n            // frm.page.remove_inner_button('Customer', 'Create');\n            // frm.page.remove_inner_button('Quotation', 'Create');\n            // frm.page.remove_inner_button('Add to Prospect', 'Action');\n            frm.page.menu.find('[data-label=\"Create%20%3E%20Customer\"],\\\n            [data-label=\"Print\"],\\\n            [data-label=\"Email\"],\\\n            [data-label=\"Links\"],\\\n            [data-label=\"Jump%20to%20field\"],\\\n            [data-label=\"Duplicate\"],\\\n            [data-label=\"Send%20SMS\"],\\\n            [data-label=\"Copy%20to%20Clipboard\"],\\\n            [data-label=\"Reload\"],\\\n            [data-label=\"Delete\"],\\\n            [data-label=\"Remind%20Me\"],\\\n            [data-label=\"Undo\"],\\\n            [data-label=\"Redo\"],\\\n            [data-label=\"Rename\"],\\\n            [data-label=\"New%20Bank\"],\\\n            [data-label=\"Action%20%3E%20Add%20to%20Prospect\"]').parent().parent().remove();\n        }, 10);\n    }\n});",
  "view": "Form"
 },
 {
  "docstatus": 0,
  "doctype": "Client Script",
  "dt": "User Permission",
  "enabled": 1,
  "modified": "2024-10-25 23:33:51.900955",
  "module": "o2o ErpNext",
  "name": "User Permission List View",
  "script": "frappe.listview_settings['User Permission'].onload = function(listview) {\n\t\tlistview.page.actions.find('[data-label=\"Edit\"],[data-label=\"Print\"],[data-label=\"Export\"],[data-label=\"Assign%20To\"],[data-label=\"Apply%20Assignment%20Rule\"],[data-label=\"Add%20Tags\"]').parent().parent().remove()\n};\nfrappe.listview_settings['User Permission'] = {\n    refresh(listview) {\n        listview.page.menu.find('[data-label=\"User%20Permissions\"]').parent().hide();\n        listview.page.menu.find('[data-label=\"Role%20Permissions%20Manager\"]').parent().hide();\n        listview.page.menu.find('[data-label=\"Import\"]').parent().hide();\n        listview.page.menu.find('[data-label=\"Toggle%20Sidebar\"]').parent().hide();\n        listview.page.menu.find('[data-label=\"List%Settings\"]').parent().hide();\n    }\n}",
  "view": "List"
 },
 {
  "docstatus": 0,
  "doctype": "Client Script",
  "dt": "Role Profile",
  "enabled": 1,
  "modified": "2024-10-25 23:33:51.864224",
  "module": "o2o ErpNext",
  "name": "Role Profile",
  "script": "//Remove Form View Menu contents\nfrappe.ui.form.on('Role Profile', {\n    refresh: function(frm) {\n        setTimeout( () => {\n            // frm.page.remove_inner_button('Print');\n            // frm.page.remove_inner_button('Customer', 'Create');\n            // frm.page.remove_inner_button('Quotation', 'Create');\n            // frm.page.remove_inner_button('Add to Prospect', 'Action');\n            frm.page.menu.find('[data-label=\"Create%20%3E%20Customer\"],\\\n            [data-label=\"Print\"],\\\n            [data-label=\"Email\"],\\\n            [data-label=\"Links\"],\\\n            [data-label=\"Jump%20to%20field\"],\\\n            [data-label=\"Duplicate\"],\\\n            [data-label=\"Send%20SMS\"],\\\n            [data-label=\"Copy%20to%20Clipboard\"],\\\n            [data-label=\"Reload\"],\\\n            [data-label=\"Delete\"],\\\n            [data-label=\"Remind%20Me\"],\\\n            [data-label=\"Undo\"],\\\n            [data-label=\"Redo\"],\\\n            [data-label=\"New%20Role%20Profile\"],\\\n            [data-label=\"Action%20%3E%20Add%20to%20Prospect\"]').parent().parent().remove();\n        }, 10);\n    }\n});",
  "view": "Form"
 },
 {
  "docstatus": 0,
  "doctype": "Client Script",
  "dt": "Gst Slab",
  "enabled": 1,
  "modified": "2024-10-25 23:33:51.812253",
  "module": "o2o ErpNext",
  "name": "GST Slab List View",
  "script": "frappe.listview_settings['Gst Slab'].onload = function(listview) {\n\t\tlistview.page.actions.find('[data-label=\"Edit\"],[data-label=\"Export\"]').parent().parent().remove()\n};\n//Remove form view menu contents\nfrappe.listview_settings['Gst Slab'] = {\n    refresh(listview) {\n        listview.page.menu.find('[data-label=\"User%20Permissions\"]').parent().hide();\n        listview.page.menu.find('[data-label=\"Role%20Permissions%20Manager\"]').parent().hide();\n        listview.page.menu.find('[data-label=\"Import\"]').parent().hide();\n        listview.page.menu.find('[data-label=\"Toggle%20Sidebar\"]').parent().hide();\n        listview.page.menu.find('[data-label=\"List%Settings\"]').parent().hide();\n    }\n}\nfrappe.listview_settings['Gst Slab'].onload = function(listview) {\n\t\tlistview.page.actions.find('[data-label=\"Edit\"],[data-label=\"Print\"],[data-label=\"Export\"],[data-label=\"Assign%20To\"],[data-label=\"Apply%20Assignment%20Rule\"],[data-label=\"Add%20Tags\"]').parent().parent().remove()\n};",
  "view": "List"
 },
 {
  "docstatus": 0,
  "doctype": "Client Script",
  "dt": "Gst Slab",
  "enabled": 1,
  "modified": "2024-10-25 23:33:51.830655",
  "module": "o2o ErpNext",
  "name": "GST Slab",
  "script": "frappe.ui.form.on('Gst Slab', {\n    refresh: function(frm) {\n        setTimeout( () => {\n            // frm.page.remove_inner_button('Print');\n            // frm.page.remove_inner_button('Customer', 'Create');\n            // frm.page.remove_inner_button('Quotation', 'Create');\n            // frm.page.remove_inner_button('Add to Prospect', 'Action');\n            frm.page.menu.find('[data-label=\"Create%20%3E%20Customer\"],\\\n            [data-label=\"Print\"],\\\n            [data-label=\"Email\"],\\\n            [data-label=\"Links\"],\\\n            [data-label=\"Jump%20to%20field\"],\\\n            [data-label=\"Duplicate\"],\\\n            [data-label=\"Send%20SMS\"],\\\n            [data-label=\"Copy%20to%20Clipboard\"],\\\n            [data-label=\"Reload\"],\\\n            [data-label=\"Delete\"],\\\n            [data-label=\"Remind%20Me\"],\\\n            [data-label=\"Undo\"],\\\n            [data-label=\"Redo\"],\\\n            [data-label=\"Rename\"],\\\n            [data-label=\"Action%20%3E%20Add%20to%20Prospect\"]').parent().parent().remove();\n        }, 10);\n    }\n});",
  "view": "Form"
 },
 {
  "docstatus": 0,
  "doctype": "Client Script",
  "dt": "Stock Reconciliation",
  "enabled": 1,
  "modified": "2024-10-25 23:33:51.685804",
  "module": "o2o ErpNext",
  "name": "Stock Reconciliation",
  "script": "frappe.ui.form.on('Stock Reconciliation', {\n    refresh(frm) {\n        setTimeout(() => {\n            frm.remove_custom_button('Fetch Items from Warehouse');\n            frm.remove_custom_button('Product Bundle', 'Get Items From');\n            frm.remove_custom_button('Accounting Ledger', 'View');\n        }, 10);\n    }\n});\n",
  "view": "Form"
 },
 {
  "docstatus": 0,
  "doctype": "Client Script",
  "dt": "Stock Entry",
  "enabled": 1,
  "modified": "2024-10-25 23:33:51.794939",
  "module": "o2o ErpNext",
  "name": "Stock Entry",
  "script": "\nfrappe.ui.form.on('Stock Entry', {\n    refresh(frm) {\n        setTimeout(() => {\n            frm.remove_custom_button('Get Items From');\n            frm.remove_custom_button('Purchase Invoice', 'Get Items From');\n            frm.remove_custom_button('Material Request', 'Get Items From');\n            frm.remove_custom_button('Bill of Materials', 'Get Items From');\n            frm.remove_custom_button('Expired Batches', 'Get Items From');\n            frm.remove_custom_button('Transit Entry', 'Get Items From');\n            frm.remove_custom_button('Material Request', 'Create');\n            frm.remove_custom_button('Accounting Ledger', 'View');\n        }, 10);\n    }\n});",
  "view": "Form"
 },
 {
  "docstatus": 0,
  "doctype": "Client Script",
  "dt": "Homepage",
  "enabled": 1,
  "modified": "2024-10-25 23:33:51.340426",
  "module": "o2o ErpNext",
  "name": "Homepage",
  "script": "frappe.ui.form.on('Homepage', {\n    refresh(frm) {\n        setTimeout(() => {\n            // frm.remove_custom_button('Get Items From');\n            frm.remove_custom_button('Stock Projected Qty', 'View');\n            }, 10);\n    }\n});",
  "view": "Form"
 },
 {
  "docstatus": 0,
  "doctype": "Client Script",
  "dt": "Purchase Invoice",
  "enabled": 1,
  "modified": "2024-11-08 09:24:16.027936",
  "module": "o2o ErpNext",
  "name": "Purchase invoice List View",
  "script": "frappe.listview_settings['Purchase Invoice'] = {\n    button: {\n        show: function(doc) {\n            return true;\n        },\n        get_label: function() {\n            return __('<i class=\"fa fa-print\" style=\"font-size:20px;color:red\"></i>');\n        },\n        get_description: function(doc) {\n            return __('Print {0}', [doc.name])\n        },\n        action: function(doc) {\n            //frappe.set_route(\"/app/print/Purchase Invoice/\" + doc.name);\n            \n            var objWindowOpenResult = window.open(frappe.urllib.get_full_url(\"/api/method/frappe.utils.print_format.download_pdf?\"\n              + \"doctype=\" + encodeURIComponent(\"Purchase Invoice\")\n              + \"&name=\" + encodeURIComponent(doc.name)\n              + \"&trigger_print=0\"\n              + \"&format=Without Header Final Purchase Invoice\"\n              + \"&no_letterhead=0\"\n              + \"&_lang=en\"\n            ));\n\n            if(!objWindowOpenResult) {\n              msgprint(__(\"Please set permission for pop-up windows in your browser!\")); return;\n            }\n        }\n    }\n}\n//List view menu contents remove\n// frappe.listview_settings['Purchase Invoice'] = {\n//     refresh(listview) {\n//         listview.page.menu.find('[data-label=\"User%20Permissions\"]').parent().hide();\n//         listview.page.menu.find('[data-label=\"Role%20Permissions%20Manager\"]').parent().hide();\n//         listview.page.menu.find('[data-label=\"Import\"]').parent().hide();\n//         listview.page.menu.find('[data-label=\"Toggle%20Sidebar\"]').parent().hide();\n//         listview.page.menu.find('[data-label=\"List%Settings\"]').parent().hide();\n//     }\n// }\nfrappe.listview_settings['Purchase Invoice'].onload = function(listview) {\n\t\tlistview.page.actions.find('[data-label=\"Edit\"],[data-label=\"Print\"],[data-label=\"Export\"],[data-label=\"Assign%20To\"],[data-label=\"Apply%20Assignment%20Rule\"],[data-label=\"Add%20Tags\"]').parent().parent().remove()\n};\n\n// Remove ID column from listing\n// frappe.listview_settings['Purchase Invoice'] = { // And other doctype names\n//     hide_name_column: true\n// }\n\n\n\n\n\n\n\n\n\n",
  "view": "List"
 },
 {
  "docstatus": 0,
  "doctype": "Client Script",
  "dt": "Purchase Invoice",
  "enabled": 1,
  "modified": "2024-11-08 09:11:07.883406",
  "module": "o2o ErpNext",
  "name": "Purchase invoice",
  "script": "frappe.ui.form.on('Purchase Invoice', {\n\trefresh(frm) {\n\t\t// your code here\n\t\tfrm.set_query(\"custom_vendor\", function() {\n        return {\n            \"filters\": {\n                \"custom_is_vendor\": 1,\n            }\n        };\n    });\n\t}\n})\n\nfrappe.ui.form.on('Purchase Invoice', {\n\trefresh(frm) {\n\t\t// your code here\n\t\tfrm.set_query(\"supplier\", function() {\n        return {\n            \"filters\": {\n                \"custom_is_vendor\": 0,\n            }\n        };\n    });\n\t}\n})\n\nfrappe.ui.form.on('Purchase Invoice', {\n\trefresh(frm) {\n\t\t// your code here\n\t\tfrm.set_query(\"shipping_address\", function() {\n        return {\n            \"filters\": {\n                \"is_shipping_address\": 1,\n            }\n        };\n    });\n\t}\n})\n\nfrappe.ui.form.on('Purchase Invoice', {\n\trefresh(frm) {\n\t\t// your code here\n\t\tfrm.set_query(\"billing_address\", function() {\n        return {\n            \"filters\": {\n                \"is_primary_address\": 1,\n            }\n        };\n    });\n\t}\n})\n\nfrappe.ui.form.on('Purchase Invoice', {\n\trefresh(frm) {\n\t\t// your code here\n\t\tfrm.set_query(\"custom_vendor_address\", function() {\n        return {\n            \"filters\": {\n                \"custom_is_vendor_address\": 1,\n            }\n        };\n    });\n\t}\n})\n\nfrappe.ui.form.on(\"Purchase Invoice Item\", \"custom_gstn_value\", function(frm, cdt, cdn) {\n\n   var items = frm.doc.custom_gstn_value\n   var total = 0\n   for(var i in items) {\n\ttotal = total + items[i].custom_gstn_value\n\t}\n\n\tfrm.set_value(\"custom_gst_28__ot\",total)\n});\n\n\nfrappe.ui.form.on('Purchase Invoice', {\n    refresh: function (frm) {\n        // This function will run when the form is refreshed\n        // You can initialize or manipulate fields here if needed\n    },\n    onload: function (frm) {\n        // This function will run when the form is loaded\n        // You can initialize fields or set default values here if needed\n        let custom_vendor = frm.doc.custom_vendor;\n        if (custom_vendor) {\n            // Get the first 3 characters of the supplier_code\n            let codeSubstring = custom_vendor.substring(0, 5).toUpperCase();\n            \n            // Set the substring to another field or use it as needed\n            frm.set_value('custom_vendor_code', codeSubstring);\n        } else {\n            // Clear the substring field if supplier_code is empty\n            frm.set_value('custom_vendor_code', '');\n        }\n    },\n    custom_vendor: function (frm) {\n        // This function triggers when `supplier_code` field is modified\n        let custom_vendor = frm.doc.custom_vendor;\n        if (custom_vendor) {\n            // Get the first 3 characters of the supplier_code\n            let codeSubstring = custom_vendor.substring(0, 5).toUpperCase();\n            \n            // Set the substring to another field or use it as needed\n            frm.set_value('custom_vendor_code', codeSubstring);\n        } else {\n            // Clear the substring field if supplier_code is empty\n            frm.set_value('custom_vendor_code', '');\n        }\n    }\n});\n\n\nfrappe.ui.form.on('Purchase Invoice', {\n    refresh: function (frm) {\n        // This function will run when the form is refreshed\n        // You can initialize or manipulate fields here if needed\n    },\n    onload: function (frm) {\n        if (!frm.doc.fiscal_year) {\n            // Fetch the current fiscal year based on the current date\n            frappe.call({\n                method: 'frappe.client.get_list',\n                args: {\n                    doctype: 'Fiscal Year',\n                    filters: {\n                        'year_start_date': ['<=', frappe.datetime.get_today()],\n                        'year_end_date': ['>=', frappe.datetime.get_today()]\n                    },\n                    fields: ['name']\n                },\n                callback: function(r) {\n                    if (r.message && r.message.length > 0) {\n                        var fiscal_year = r.message[0].name;\n                        var start_year = fiscal_year.split('-')[0];\n                        var end_year = fiscal_year.split('-')[1];\n                        display_fiscal_year = start_year.substring(2) + '-' + end_year.substring(2);    \n                        console.log(\"==>\" + fiscal_year)\n                        frm.set_value('custom_fiscal_year', display_fiscal_year);\n                    }\n                }\n            });\n        }\n    }\n});\n\nfrappe.ui.form.on('Purchase Invoice', {\n    is_return: function(frm) {\n        if (frm.doc.is_return == 1) {\n            frm.set_value('naming_series','DN./.{custom_fiscal_year}./.###');\n        } else{\n            frm.set_value('naming_series','{custom_vendor_code}./.{custom_fiscal_year}./.###');\n        }\n    }\n});\n\nfrappe.ui.form.on('Purchase Invoice', {\n    refresh(frm) {\n        setTimeout(() => {\n            // frm.remove_custom_button('Get Items From');\n            frm.remove_custom_button('Purchase Order', 'Get Items From');\n            frm.remove_custom_button('Purchase Receipt', 'Get Items From');\n            frm.remove_custom_button('Accounting Ledger', 'Preview');\n            frm.remove_custom_button('Payment Request', 'Create');\n            frm.remove_custom_button('Block Invoice', 'Create');\n            frm.remove_custom_button('Payment', 'Create');\n            // frm.remove_custom_button('Return / Debit Note', 'Create');\n            frm.remove_custom_button('Purchase Receipt', 'View');\n            frm.remove_custom_button('Accounting Ledger', 'View');\n        }, 10);\n    }\n});\n//Remove Form View Menu contents\nfrappe.ui.form.on('Purchase Invoice', {\n    refresh: function(frm) {\n        setTimeout( () => {\n            // frm.page.remove_inner_button('Print');\n            // frm.page.remove_inner_button('Customer', 'Create');\n            // frm.page.remove_inner_button('Quotation', 'Create');\n            // frm.page.remove_inner_button('Add to Prospect', 'Action');\n            frm.page.menu.find('[data-label=\"Create%20%3E%20Customer\"],\\\n            [data-label=\"Print\"],\\\n            [data-label=\"Email\"],\\\n            [data-label=\"Links\"],\\\n            [data-label=\"Jump%20to%20field\"],\\\n            [data-label=\"Duplicate\"],\\\n            [data-label=\"Send%20SMS\"],\\\n            [data-label=\"Copy%20to%20Clipboard\"],\\\n            [data-label=\"Reload\"],\\\n            [data-label=\"Delete\"],\\\n            [data-label=\"Remind%20Me\"],\\\n            [data-label=\"Undo\"],\\\n            [data-label=\"Redo\"],\\\n            [data-label=\"Repeat\"],\\\n            [data-label=\"New%20Purchase%20Invoice\"],\\\n            [data-label=\"Action%20%3E%20Add%20to%20Prospect\"]').parent().parent().remove();\n        }, 10);\n    }\n});\n\nfrappe.ui.form.on('Purchase Invoice', {\n    refresh: function (frm) {\n        // This function will run when the form is refreshed\n        // You can initialize or manipulate fields here if needed\n        let freight_amount = frm.doc.custom_freight_amount;\n        let freight_tax_amount = (freight_amount * 18) /100;\n        frm.set_value('custom_freight_taxes', freight_tax_amount);\n    },\n    onload: function (frm) {\n        let freight_amount = frm.doc.custom_freight_amount;\n        let freight_tax_amount = (freight_amount * 18) /100;\n        frm.set_value('custom_freight_taxes', freight_tax_amount);\n    },\n});\n\nfrappe.ui.form.on('Purchase Invoice', {\n    refresh: function (frm) {\n        // This function will run when the form is refreshed\n        // You can initialize or manipulate fields here if needed\n        let total_cgst = 0;\n        let total_sgst = 0;\n        let total_igst = 0;\n    \n        frm.doc.items.forEach(function(item_detail) {\n            if (item_detail.cgst_amount >0) {  \n                // Set both rate and amount to 0\n                total_cgst = parseFloat(total_cgst) + item_detail.cgst_amount;\n            }\n            \n            if (item_detail.sgst_amount >0) {  \n                // Set both rate and amount to 0\n                total_sgst = parseFloat(total_sgst) + item_detail.sgst_amount;\n            }\n            \n            if (item_detail.igst_amount >0) {  \n                // Set both rate and amount to 0\n                total_igst = parseFloat(total_igst) + item_detail.igst_amount;\n            }\n        \n        });\n        frm.set_value('custom_total_cgst', total_cgst);\n        frm.set_value('custom_total_sgst', total_sgst);\n        frm.set_value('custom_total_igst', total_igst);\n        \n    },\n    onload: function (frm) {\n        // This function will run when the form is refreshed\n        // You can initialize or manipulate fields here if needed\n        let total_cgst = 0;\n        let total_sgst = 0;\n        let total_igst = 0;\n    \n        frm.doc.items.forEach(function(item_detail) {\n            if (item_detail.cgst_amount >0) {  \n                // Set both rate and amount to 0\n                total_cgst = parseFloat(total_cgst) + item_detail.cgst_amount;\n            }\n            \n            if (item_detail.sgst_amount >0) {  \n                // Set both rate and amount to 0\n                total_sgst = parseFloat(total_sgst) + item_detail.sgst_amount;\n            }\n            \n            if (item_detail.igst_amount >0) {  \n                // Set both rate and amount to 0\n                total_igst = parseFloat(total_igst) + item_detail.igst_amount;\n            }\n        \n        });\n        frm.set_value('custom_total_cgst', total_cgst);\n        frm.set_value('custom_total_sgst', total_sgst);\n        frm.set_value('custom_total_igst', total_igst);\n    },\n});\n\n\n\n\n\n\n\n\n",
  "view": "Form"
 },
 {
  "docstatus": 0,
  "doctype": "Client Script",
  "dt": "Purchase Receipt",
  "enabled": 0,
  "modified": "2024-11-08 09:40:15.678932",
  "module": "o2o ErpNext",
  "name": "merge purchase receipt into purchase invoice",
  "script": "frappe.listview_settings['Purchase Receipt'] = {\n    onload: function(listview) {\n        listview.page.add_action_item(__('Create Purchase Invoice'), function() {\n            try {\n                const selected_docs = listview.get_checked_items();\n\n                if (selected_docs.length === 0) {\n                    frappe.msgprint({\n                        title: __('Warning'),\n                        indicator: 'red',\n                        message: __('Please select at least one Purchase Receipt')\n                    });\n                    return;\n                }\n\n                // Get fiscal year first\n                frappe.call({\n                    method: 'frappe.client.get_list',\n                    args: {\n                        doctype: 'Fiscal Year',\n                        filters: {\n                            'year_start_date': ['<=', frappe.datetime.get_today()],\n                            'year_end_date': ['>=', frappe.datetime.get_today()]\n                        },\n                        fields: ['name']\n                    },\n                    callback: function(fiscal_response) {\n                        try {\n                            let display_fiscal_year = '';\n                            if (fiscal_response.message && fiscal_response.message.length > 0) {\n                                let fiscal_year = fiscal_response.message[0].name;\n                                let start_year = fiscal_year.split('-')[0];\n                                let end_year = fiscal_year.split('-')[1];\n                                display_fiscal_year = start_year.substring(2) + '-' + end_year.substring(2);\n                            }\n\n                            frappe.call({\n                                method: 'frappe.client.get',\n                                args: { \n                                    doctype: 'Purchase Receipt', \n                                    name: selected_docs[0].name \n                                },\n                                callback: function(firstDocResponse) {\n                                    try {\n                                        if (!firstDocResponse.message) {\n                                            throw new Error('Failed to fetch first Purchase Receipt');\n                                        }\n\n                                        const firstDoc = firstDocResponse.message;\n                                        const firstVendor = firstDoc.custom_vendor;\n                                        const firstSupplier = firstDoc.supplier;\n                                        const firstBranch = firstDoc.custom_branch;\n                                        const firstTaxCategory = firstDoc.tax_category;\n                                        const firstTaxesAndCharges = firstDoc.taxes_and_charges;\n                                        const isReturn = firstDoc.is_return || 0;\n                                        const vendor_code = firstVendor ? firstVendor.substring(0, 5).toUpperCase() : '';\n\n                                        const naming_series = isReturn ? \n                                            `DN./.${display_fiscal_year}./.###` : \n                                            `${vendor_code}./.${display_fiscal_year}./.###`;\n\n                                        // Validate fields\n                                        if (!firstTaxCategory || !firstTaxesAndCharges) {\n                                            frappe.msgprint({\n                                                title: __('Error'),\n                                                indicator: 'red',\n                                                message: __('Tax Category and Taxes and Charges must be set for the first selected receipt.')\n                                            });\n                                            return;\n                                        }\n\n                                        if (!firstBranch) {\n                                            frappe.msgprint({\n                                                title: __('Error'),\n                                                indicator: 'red',\n                                                message: __('Branch is not set for the first selected receipt.')\n                                            });\n                                            return;\n                                        }\n\n                                        // Fetch tax template\n                                        frappe.call({\n                                            method: 'frappe.client.get',\n                                            args: {\n                                                doctype: 'Purchase Taxes and Charges Template',\n                                                name: firstTaxesAndCharges\n                                            },\n                                            callback: function(tax_template_response) {\n                                                try {\n                                                    if (!tax_template_response.message) {\n                                                        throw new Error('Failed to fetch tax template');\n                                                    }\n\n                                                    const tax_template = tax_template_response.message;\n                                                    let consolidatedItems = [];\n                                                    let totalGrandTotal = 0;\n                                                    let totalFreightAmount = 0;\n\n                                                    // Process all selected receipts\n                                                    const promises = selected_docs.map(doc => \n                                                        new Promise((resolve, reject) => {\n                                                            frappe.call({\n                                                                method: 'frappe.client.get',\n                                                                args: { \n                                                                    doctype: 'Purchase Receipt', \n                                                                    name: doc.name \n                                                                },\n                                                                callback: function(r) {\n                                                                    if (r.message) {\n                                                                        resolve(r.message);\n                                                                    } else {\n                                                                        reject('Failed to fetch receipt');\n                                                                    }\n                                                                }\n                                                            });\n                                                        })\n                                                    );\n\n                                                    Promise.all(promises)\n                                                        .then(receipts => {\n                                                            // Consolidate items\n                                                            receipts.forEach(receipt => {\n                                                                totalGrandTotal += flt(receipt.custom_grand_total || 0);\n                                                                totalFreightAmount += flt(receipt.custom_freight_amount || 0);\n\n                                                                receipt.items.forEach(item => {\n                                                                    const existingItem = consolidatedItems.find(\n                                                                        ci => ci.item_name.toLowerCase() === item.item_name.toLowerCase() && \n                                                                             ci.custom_gstn_value === item.custom_gstn_value\n                                                                    );\n\n                                                                    if (existingItem) {\n                                                                        const newQty = flt(existingItem.qty) + flt(item.qty);\n                                                                        const newAmount = flt(existingItem.amount) + flt(item.amount);\n                                                                        \n                                                                        existingItem.qty = newQty;\n                                                                        existingItem.amount = newAmount;\n                                                                        existingItem.rate = flt(newAmount / newQty);\n                                                                        existingItem.custom_grand_total = flt(existingItem.custom_grand_total || 0) + flt(item.custom_grand_total || 0);\n                                                                    } else {\n                                                                        consolidatedItems.push({\n                                                                            item_code: item.item_code,\n                                                                            item_name: item.item_name,\n                                                                            qty: flt(item.qty),\n                                                                            rate: flt(item.rate),\n                                                                            amount: flt(item.amount),\n                                                                            warehouse: item.warehouse,\n                                                                            custom_grand_total: flt(item.custom_grand_total || 0),\n                                                                            custom_gstn_value: item.custom_gstn_value\n                                                                        });\n                                                                    }\n                                                                });\n                                                            });\n\n                                                            // Prepare taxes array from template\n                                                            let taxes = [];\n                                                            if (tax_template.taxes) {\n                                                                taxes = tax_template.taxes.map((tax, idx) => {\n                                                                    let row_id = null;\n                                                                    if (tax.charge_type === 'On Previous Row Amount' || tax.charge_type === 'On Previous Row Total') {\n                                                                        if (tax.row_id && parseInt(tax.row_id) < (idx + 1)) {\n                                                                            row_id = tax.row_id;\n                                                                        } else {\n                                                                            frappe.throw(__(`Invalid row reference in tax row ${idx + 1}`));\n                                                                        }\n                                                                    }\n\n                                                                    return {\n                                                                        account_head: tax.account_head,\n                                                                        charge_type: tax.charge_type,\n                                                                        row_id: row_id,\n                                                                        description: tax.description,\n                                                                        included_in_print_rate: tax.included_in_print_rate || 0,\n                                                                        included_in_paid_amount: tax.included_in_paid_amount || 0,\n                                                                        rate: tax.rate,\n                                                                        account_currency: tax.account_currency,\n                                                                        cost_center: tax.cost_center\n                                                                    };\n                                                                });\n                                                            }\n\n                                                            // Create Purchase Invoice\n                                                            const doc = {\n                                                                doctype: 'Purchase Invoice',\n                                                                naming_series: naming_series,\n                                                                custom_fiscal_year: display_fiscal_year,\n                                                                custom_vendor_code: vendor_code,\n                                                                supplier: firstSupplier,\n                                                                custom_vendor: firstVendor,\n                                                                custom_branch: firstBranch,\n                                                                tax_category: firstTaxCategory,\n                                                                taxes_and_charges: firstTaxesAndCharges,\n                                                                taxes: taxes,\n                                                                items: consolidatedItems,\n                                                                custom_grand_total: totalGrandTotal,\n                                                                custom_freight_amount: totalFreightAmount,\n                                                                update_stock: 1,\n                                                                is_return: isReturn\n                                                            };\n\n                                                            console.log('Creating Purchase Invoice with:', doc);\n\n                                                            frappe.call({\n                                                                method: 'frappe.client.insert',\n                                                                args: { doc: doc },\n                                                                callback: function(response) {\n                                                                    if (response.message) {\n                                                                        frappe.msgprint({\n                                                                            title: __('Success'),\n                                                                            indicator: 'green',\n                                                                            message: __('Purchase Invoice created successfully: ') + response.message.name\n                                                                        });\n                                                                    } else {\n                                                                        frappe.msgprint({\n                                                                            title: __('Error'),\n                                                                            indicator: 'red',\n                                                                            message: __('Failed to create Purchase Invoice')\n                                                                        });\n                                                                    }\n                                                                }\n                                                            });\n                                                        })\n                                                        .catch(error => {\n                                                            console.error('Error processing receipts:', error);\n                                                            frappe.msgprint({\n                                                                title: __('Error'),\n                                                                indicator: 'red',\n                                                                message: __('Error processing receipts: ') + error\n                                                            });\n                                                        });\n                                                } catch (error) {\n                                                    console.error('Error in tax template processing:', error);\n                                                    frappe.msgprint({\n                                                        title: __('Error'),\n                                                        indicator: 'red',\n                                                        message: __('Error in tax template processing: ') + error.message\n                                                    });\n                                                }\n                                            }\n                                        });\n                                    } catch (error) {\n                                        console.error('Error processing first document:', error);\n                                        frappe.msgprint({\n                                            title: __('Error'),\n                                            indicator: 'red',\n                                            message: __('Error processing first document: ') + error.message\n                                        });\n                                    }\n                                }\n                            });\n                        } catch (error) {\n                            console.error('Error in fiscal year processing:', error);\n                            frappe.msgprint({\n                                title: __('Error'),\n                                indicator: 'red',\n                                message: __('Error in fiscal year processing: ') + error.message\n                            });\n                        }\n                    }\n                });\n            } catch (error) {\n                console.error('Error in main function:', error);\n                frappe.msgprint({\n                    title: __('Error'),\n                    indicator: 'red',\n                    message: __('Error in main function: ') + error.message\n                });\n            }\n        });\n    },\n\n    onrender: function(listview) {\n        listview.page.wrapper.find('.list-row-checkbox').removeClass('hide');\n    }\n};",
  "view": "List"
 },
 {
  "docstatus": 0,
  "doctype": "Client Script",
  "dt": "Purchase Invoice",
  "enabled": 1,
  "modified": "2024-11-08 09:23:55.953956",
  "module": "o2o ErpNext",
  "name": "Purchase invoice print button",
  "script": "frappe.listview_settings['Purchase Invoice'] = {\n    add_fields: ['name', 'supplier'],\n    \n    onload: function(listview) {\n        // Print with Header\n        listview.page.add_action_item(__('Print with Header'), function() {\n            const selected_docs = listview.get_checked_items();\n            if (selected_docs.length > 0) {\n                let successful_prints = 0;\n                \n                // Process each selected document\n                selected_docs.forEach((doc, index) => {\n                    frappe.model.with_doc('Purchase Invoice', doc.name, function() {\n                        setTimeout(() => {\n                            var w = window.open(\n                                frappe.urllib.get_full_url(\n                                    '/api/method/frappe.utils.print_format.download_pdf?' +\n                                    'doctype=' + encodeURIComponent('Purchase Invoice') +\n                                    '&name=' + encodeURIComponent(doc.name) +\n                                    '&format=' + encodeURIComponent('Final Purchase Invoice') +\n                                    '&no_letterhead=0' +\n                                    '&_lang=en'\n                                )\n                            );\n                            \n                            if (w) {\n                                successful_prints++;\n                                // Show success message after all prints are initiated\n                                if (index === selected_docs.length - 1) {\n                                    frappe.show_alert({\n                                        message: __(`Successfully initiated print for ${successful_prints} invoice(s)`),\n                                        indicator: 'green'\n                                    }, 5);\n                                }\n                            } else {\n                                frappe.show_alert({\n                                    message: __(`Failed to print ${doc.name}. Please enable pop-ups and try again.`),\n                                    indicator: 'red'\n                                }, 5);\n                            }\n                        }, index * 800); // Add delay between prints to prevent browser blocking\n                    });\n                });\n            } else {\n                frappe.show_alert({\n                    message: __('Please select at least one Purchase Invoice'),\n                    indicator: 'yellow'\n                }, 3);\n            }\n        });\n\n        // Print without Header\n        listview.page.add_action_item(__('Print without Header'), function() {\n            const selected_docs = listview.get_checked_items();\n            if (selected_docs.length > 0) {\n                let successful_prints = 0;\n                \n                // Process each selected document\n                selected_docs.forEach((doc, index) => {\n                    frappe.model.with_doc('Purchase Invoice', doc.name, function() {\n                        setTimeout(() => {\n                            var w = window.open(\n                                frappe.urllib.get_full_url(\n                                    '/api/method/frappe.utils.print_format.download_pdf?' +\n                                    'doctype=' + encodeURIComponent('Purchase Invoice') +\n                                    '&name=' + encodeURIComponent(doc.name) +\n                                    '&format=' + encodeURIComponent('Without Header Final Purchase Invoice') +\n                                    '&no_letterhead=1' +\n                                    '&_lang=en'\n                                )\n                            );\n                            \n                            if (w) {\n                                successful_prints++;\n                                // Show success message after all prints are initiated\n                                if (index === selected_docs.length - 1) {\n                                    frappe.show_alert({\n                                        message: __(`Successfully initiated print for ${successful_prints} invoice(s)`),\n                                        indicator: 'green'\n                                    }, 5);\n                                }\n                            } else {\n                                frappe.show_alert({\n                                    message: __(`Failed to print ${doc.name}. Please enable pop-ups and try again.`),\n                                    indicator: 'red'\n                                }, 5);\n                            }\n                        }, index * 800); // Add delay between prints to prevent browser blocking\n                    });\n                });\n            } else {\n                frappe.show_alert({\n                    message: __('Please select at least one Purchase Invoice'),\n                    indicator: 'yellow'\n                }, 3);\n            }\n        });\n    }\n};",
  "view": "List"
 },
 {
  "docstatus": 0,
  "doctype": "Client Script",
  "dt": "Purchase Receipt",
  "enabled": 0,
  "modified": "2024-11-28 11:45:58.448155",
  "module": "o2o ErpNext",
  "name": "Purchase receipt merge into invoice ver 2",
  "script": "frappe.listview_settings['Purchase Receipt'] = {\n    onload: function(listview) {\n        listview.page.add_action_item(__('Create Purchase Invoice'), function() {\n            try {\n                const selected_docs = listview.get_checked_items();\n\n                if (selected_docs.length === 0) {\n                    frappe.msgprint({\n                        title: __('Warning'),\n                        indicator: 'red',\n                        message: __('Please select at least one Purchase Receipt')\n                    });\n                    return;\n                }\n\n                // Get fiscal year first\n                frappe.call({\n                    method: 'frappe.client.get_list',\n                    args: {\n                        doctype: 'Fiscal Year',\n                        filters: {\n                            'year_start_date': ['<=', frappe.datetime.get_today()],\n                            'year_end_date': ['>=', frappe.datetime.get_today()]\n                        },\n                        fields: ['name']\n                    },\n                    callback: function(fiscal_response) {\n                        try {\n                            let display_fiscal_year = '';\n                            if (fiscal_response.message && fiscal_response.message.length > 0) {\n                                let fiscal_year = fiscal_response.message[0].name;\n                                let start_year = fiscal_year.split('-')[0];\n                                let end_year = fiscal_year.split('-')[1];\n                                display_fiscal_year = start_year.substring(2) + '-' + end_year.substring(2);\n                            }\n\n                            frappe.call({\n                                method: 'frappe.client.get',\n                                args: { \n                                    doctype: 'Purchase Receipt', \n                                    name: selected_docs[0].name \n                                },\n                                callback: function(firstDocResponse) {\n                                    try {\n                                        if (!firstDocResponse.message) {\n                                            throw new Error('Failed to fetch first Purchase Receipt');\n                                        }\n\n                                        const firstDoc = firstDocResponse.message;\n                                        const firstVendor = firstDoc.custom_vendor;\n                                        const firstSupplier = firstDoc.supplier;\n                                        const firstBranch = firstDoc.custom_branch;\n                                        const firstTaxCategory = firstDoc.tax_category;\n                                        const firstTaxesAndCharges = firstDoc.taxes_and_charges;\n                                        const isReturn = firstDoc.is_return || 0;\n                                        const vendor_code = firstVendor ? firstVendor.substring(0, 5).toUpperCase() : '';\n\n                                        // Get address fields from first Purchase Receipt\n                                        const supplier_address = firstDoc.supplier_address;\n                                        const shipping_address = firstDoc.shipping_address;\n                                        const billing_address = firstDoc.billing_address;\n                                        const vendor_address = firstDoc.custom_vendor_address;\n\n                                        const naming_series = isReturn ? \n                                            `DN./.${display_fiscal_year}./.###` : \n                                            `${vendor_code}./.${display_fiscal_year}./.###`;\n\n                                        // Validate fields\n                                        if (!firstTaxCategory || !firstTaxesAndCharges) {\n                                            frappe.msgprint({\n                                                title: __('Error'),\n                                                indicator: 'red',\n                                                message: __('Tax Category and Taxes and Charges must be set for the first selected receipt.')\n                                            });\n                                            return;\n                                        }\n\n                                        if (!firstBranch) {\n                                            frappe.msgprint({\n                                                title: __('Error'),\n                                                indicator: 'red',\n                                                message: __('Branch is not set for the first selected receipt.')\n                                            });\n                                            return;\n                                        }\n\n                                        // Fetch tax template\n                                        frappe.call({\n                                            method: 'frappe.client.get',\n                                            args: {\n                                                doctype: 'Purchase Taxes and Charges Template',\n                                                name: firstTaxesAndCharges\n                                            },\n                                            callback: function(tax_template_response) {\n                                                try {\n                                                    if (!tax_template_response.message) {\n                                                        throw new Error('Failed to fetch tax template');\n                                                    }\n\n                                                    const tax_template = tax_template_response.message;\n                                                    let consolidatedItems = [];\n                                                    let totalGrandTotal = 0;\n                                                    let totalFreightAmount = 0;\n\n                                                    // Process all selected receipts\n                                                    const promises = selected_docs.map(doc => \n                                                        new Promise((resolve, reject) => {\n                                                            frappe.call({\n                                                                method: 'frappe.client.get',\n                                                                args: { \n                                                                    doctype: 'Purchase Receipt', \n                                                                    name: doc.name \n                                                                },\n                                                                callback: function(r) {\n                                                                    if (r.message) {\n                                                                        resolve(r.message);\n                                                                    } else {\n                                                                        reject('Failed to fetch receipt');\n                                                                    }\n                                                                }\n                                                            });\n                                                        })\n                                                    );\n\n                                                    Promise.all(promises)\n                                                        .then(receipts => {\n                                                            // Consolidate items\n                                                            receipts.forEach(receipt => {\n                                                                totalGrandTotal += flt(receipt.custom_grand_total || 0);\n                                                                totalFreightAmount += flt(receipt.custom_freight_amount || 0);\n\n                                                                receipt.items.forEach(item => {\n                                                                    const existingItem = consolidatedItems.find(\n                                                                        ci => ci.item_name.toLowerCase() === item.item_name.toLowerCase() && \n                                                                             ci.custom_gstn_value === item.custom_gstn_value\n                                                                    );\n\n                                                                    if (existingItem) {\n                                                                        const newQty = flt(existingItem.qty) + flt(item.qty);\n                                                                        const newAmount = flt(existingItem.amount) + flt(item.amount);\n                                                                        \n                                                                        existingItem.qty = newQty;\n                                                                        existingItem.amount = newAmount;\n                                                                        existingItem.rate = flt(newAmount / newQty);\n                                                                        existingItem.custom_grand_total = flt(existingItem.custom_grand_total || 0) + flt(item.custom_grand_total || 0);\n                                                                    } else {\n                                                                        consolidatedItems.push({\n                                                                            item_code: item.item_code,\n                                                                            item_name: item.item_name,\n                                                                            qty: flt(item.qty),\n                                                                            rate: flt(item.rate),\n                                                                            amount: flt(item.amount),\n                                                                            warehouse: item.warehouse,\n                                                                            custom_grand_total: flt(item.custom_grand_total || 0),\n                                                                            custom_gstn_value: item.custom_gstn_value\n                                                                        });\n                                                                    }\n                                                                });\n                                                            });\n\n                                                            // Prepare taxes array from template\n                                                            let taxes = [];\n                                                            if (tax_template.taxes) {\n                                                                taxes = tax_template.taxes.map((tax, idx) => {\n                                                                    let row_id = null;\n                                                                    if (tax.charge_type === 'On Previous Row Amount' || tax.charge_type === 'On Previous Row Total') {\n                                                                        if (tax.row_id && parseInt(tax.row_id) < (idx + 1)) {\n                                                                            row_id = tax.row_id;\n                                                                        } else {\n                                                                            frappe.throw(__(`Invalid row reference in tax row ${idx + 1}`));\n                                                                        }\n                                                                    }\n\n                                                                    return {\n                                                                        account_head: tax.account_head,\n                                                                        charge_type: tax.charge_type,\n                                                                        row_id: row_id,\n                                                                        description: tax.description,\n                                                                        included_in_print_rate: tax.included_in_print_rate || 0,\n                                                                        included_in_paid_amount: tax.included_in_paid_amount || 0,\n                                                                        rate: tax.rate,\n                                                                        account_currency: tax.account_currency,\n                                                                        cost_center: tax.cost_center\n                                                                    };\n                                                                });\n                                                            }\n\n                                                            // Create Purchase Invoice with address fields\n                                                            const doc = {\n                                                                doctype: 'Purchase Invoice',\n                                                                naming_series: naming_series,\n                                                                custom_fiscal_year: display_fiscal_year,\n                                                                custom_vendor_code: vendor_code,\n                                                                supplier: firstSupplier,\n                                                                custom_vendor: firstVendor,\n                                                                custom_branch: firstBranch,\n                                                                tax_category: firstTaxCategory,\n                                                                taxes_and_charges: firstTaxesAndCharges,\n                                                                taxes: taxes,\n                                                                items: consolidatedItems,\n                                                                custom_grand_total: totalGrandTotal,\n                                                                custom_freight_amount: totalFreightAmount,\n                                                                update_stock: 1,\n                                                                is_return: isReturn,\n                                                                // Add address fields\n                                                                supplier_address: supplier_address,\n                                                                shipping_address: shipping_address,\n                                                                billing_address: billing_address,\n                                                                custom_vendor_address: vendor_address\n                                                            };\n\n                                                            console.log('Creating Purchase Invoice with:', doc);\n\n                                                            frappe.call({\n                                                                method: 'frappe.client.insert',\n                                                                args: { doc: doc },\n                                                                callback: function(response) {\n                                                                    if (response.message) {\n                                                                        frappe.msgprint({\n                                                                            title: __('Success'),\n                                                                            indicator: 'green',\n                                                                            message: __('Purchase Invoice created successfully: ') + response.message.name\n                                                                        });\n                                                                    } else {\n                                                                        frappe.msgprint({\n                                                                            title: __('Error'),\n                                                                            indicator: 'red',\n                                                                            message: __('Failed to create Purchase Invoice')\n                                                                        });\n                                                                    }\n                                                                }\n                                                            });\n                                                        })\n                                                        .catch(error => {\n                                                            console.error('Error processing receipts:', error);\n                                                            frappe.msgprint({\n                                                                title: __('Error'),\n                                                                indicator: 'red',\n                                                                message: __('Error processing receipts: ') + error\n                                                            });\n                                                        });\n                                                } catch (error) {\n                                                    console.error('Error in tax template processing:', error);\n                                                    frappe.msgprint({\n                                                        title: __('Error'),\n                                                        indicator: 'red',\n                                                        message: __('Error in tax template processing: ') + error.message\n                                                    });\n                                                }\n                                            }\n                                        });\n                                    } catch (error) {\n                                        console.error('Error processing first document:', error);\n                                        frappe.msgprint({\n                                            title: __('Error'),\n                                            indicator: 'red',\n                                            message: __('Error processing first document: ') + error.message\n                                        });\n                                    }\n                                }\n                            });\n                        } catch (error) {\n                            console.error('Error in fiscal year processing:', error);\n                            frappe.msgprint({\n                                title: __('Error'),\n                                indicator: 'red',\n                                message: __('Error in fiscal year processing: ') + error.message\n                            });\n                        }\n                    }\n                });\n            } catch (error) {\n                console.error('Error in main function:', error);\n                frappe.msgprint({\n                    title: __('Error'),\n                    indicator: 'red',\n                    message: __('Error in main function: ') + error.message\n                });\n            }\n        });\n    },\n\n    onrender: function(listview) {\n        listview.page.wrapper.find('.list-row-checkbox').removeClass('hide');\n    }\n};",
  "view": "List"
 },
 {
  "docstatus": 0,
  "doctype": "Client Script",
  "dt": "Purchase Order",
  "enabled": 1,
  "modified": "2024-11-26 11:16:44.530204",
  "module": "o2o ErpNext",
  "name": "PO LIst view v2",
  "script": "frappe.listview_settings['Purchase Order'] = {\n    button: {\n        show: function(doc) {\n            return true;\n        },\n        get_label: function() {\n            return __('<i class=\"fa fa-print\" style=\"font-size:18px;color:black\"></i>');\n        },\n        get_description: function(doc) {\n            return __('Print Options for {0}', [doc.name])\n        },\n        action: function(doc) {\n            let d = new frappe.ui.Dialog({\n                title: 'Print Options',\n                fields: [\n                    {\n                        label: 'Select Document to Print',\n                        fieldname: 'print_type',\n                        fieldtype: 'Select',\n                        options: [\n                            'Purchase Order',\n                            'Purchase Receipt'\n                        ],\n                        default: 'Purchase Order'\n                    }\n                ],\n                primary_action_label: 'Print',\n                primary_action(values) {\n                    if (values.print_type === 'Purchase Order') {\n                        var objWindowOpenResult = window.open(frappe.urllib.get_full_url(\"/api/method/frappe.utils.print_format.download_pdf?\"\n                            + \"doctype=\" + encodeURIComponent(\"Purchase Order\")\n                            + \"&name=\" + encodeURIComponent(doc.name)\n                            + \"&trigger_print=0\"\n                            + \"&format=test purchase order\"\n                            + \"&no_letterhead=0\"\n                            + \"&_lang=en\"\n                        ));\n                        if(!objWindowOpenResult) {\n                            msgprint(__(\"Please set permission for pop-up windows in your browser!\")); \n                            return;\n                        }\n                    } else {\n                        frappe.db.get_value('Purchase Receipt Item', \n                            { 'purchase_order': doc.name, 'docstatus': 1 }, \n                            'parent', \n                            function(r) {\n                                if (r && r.parent) {\n                                    var objWindowOpenResult = window.open(frappe.urllib.get_full_url(\"/api/method/frappe.utils.print_format.download_pdf?\"\n                                        + \"doctype=\" + encodeURIComponent(\"Purchase Receipt\")\n                                        + \"&name=\" + encodeURIComponent(r.parent)\n                                        + \"&trigger_print=0\"\n                                        + \"&format=Standard\"\n                                        + \"&no_letterhead=0\"\n                                        + \"&_lang=en\"\n                                    ));\n                                    if(!objWindowOpenResult) {\n                                        msgprint(__(\"Please set permission for pop-up windows in your browser!\")); \n                                        return;\n                                    }\n                                } else {\n                                    frappe.msgprint({\n                                        title: __('Purchase Receipt Not Found'),\n                                        message: __('No submitted Purchase Receipt found for Purchase Order {0}', [doc.name]),\n                                        indicator: 'orange'\n                                    });\n                                }\n                            }\n                        );\n                    }\n                    d.hide();\n                }\n            });\n            d.show();\n        }\n    }\n};",
  "view": "List"
 },
 {
  "docstatus": 0,
  "doctype": "Client Script",
  "dt": "Purchase Receipt",
  "enabled": 1,
  "modified": "2024-11-28 11:55:10.129327",
  "module": "o2o ErpNext",
  "name": "Purchase receipt merge into invoice ver 3",
  "script": "frappe.listview_settings['Purchase Receipt'] = {\n    onload: function(listview) {\n        listview.page.add_action_item(__('Create Purchase Invoice'), function() {\n            try {\n                const selected_docs = listview.get_checked_items();\n\n                if (selected_docs.length === 0) {\n                    frappe.msgprint({\n                        title: __('Warning'),\n                        indicator: 'red',\n                        message: __('Please select at least one Purchase Receipt')\n                    });\n                    return;\n                }\n\n                // Get fiscal year first \n                frappe.call({\n                    method: 'frappe.client.get_list',\n                    args: {\n                        doctype: 'Fiscal Year',\n                        filters: {\n                            'year_start_date': ['<=', frappe.datetime.get_today()],\n                            'year_end_date': ['>=', frappe.datetime.get_today()]\n                        },\n                        fields: ['name']\n                    },\n                    callback: function(fiscal_response) {\n                        try {\n                            let display_fiscal_year = '';\n                            if (fiscal_response.message && fiscal_response.message.length > 0) {\n                                let fiscal_year = fiscal_response.message[0].name;\n                                let start_year = fiscal_year.split('-')[0];\n                                let end_year = fiscal_year.split('-')[1];\n                                display_fiscal_year = start_year.substring(2) + '-' + end_year.substring(2);\n                            }\n\n                            frappe.call({\n                                method: 'frappe.client.get',\n                                args: { \n                                    doctype: 'Purchase Receipt', \n                                    name: selected_docs[0].name \n                                },\n                                callback: function(firstDocResponse) {\n                                    try {\n                                        if (!firstDocResponse.message) {\n                                            throw new Error('Failed to fetch first Purchase Receipt');\n                                        }\n\n                                        const firstDoc = firstDocResponse.message;\n                                        const firstVendor = firstDoc.custom_vendor;\n                                        const firstSupplier = firstDoc.supplier;\n                                        const firstBranch = firstDoc.custom_branch;\n                                        const firstTaxCategory = firstDoc.tax_category;\n                                        const firstTaxesAndCharges = firstDoc.taxes_and_charges;\n                                        const isReturn = firstDoc.is_return || 0;\n                                        const vendor_code = firstVendor ? firstVendor.substring(0, 5).toUpperCase() : '';\n\n                                        // Get address fields from first Purchase Receipt\n                                        const supplier_address = firstDoc.supplier_address;\n                                        const shipping_address = firstDoc.shipping_address;\n                                        const billing_address = firstDoc.billing_address;\n                                        const vendor_address = firstDoc.custom_vendor_address;\n\n                                        const naming_series = isReturn ? \n                                            `DN./.${display_fiscal_year}./.###` : \n                                            `${vendor_code}./.${display_fiscal_year}./.###`;\n\n                                        // Validate fields\n                                        if (!firstTaxCategory || !firstTaxesAndCharges) {\n                                            frappe.msgprint({\n                                                title: __('Error'),\n                                                indicator: 'red',\n                                                message: __('Tax Category and Taxes and Charges must be set for the first selected receipt.')\n                                            });\n                                            return;\n                                        }\n\n                                        if (!firstBranch) {\n                                            frappe.msgprint({\n                                                title: __('Error'),\n                                                indicator: 'red',\n                                                message: __('Branch is not set for the first selected receipt.')\n                                            });\n                                            return;\n                                        }\n\n                                        // Fetch tax template\n                                        frappe.call({\n                                            method: 'frappe.client.get',\n                                            args: {\n                                                doctype: 'Purchase Taxes and Charges Template',\n                                                name: firstTaxesAndCharges\n                                            },\n                                            callback: function(tax_template_response) {\n                                                try {\n                                                    if (!tax_template_response.message) {\n                                                        throw new Error('Failed to fetch tax template');\n                                                    }\n\n                                                    const tax_template = tax_template_response.message;\n                                                    let consolidatedItems = [];\n                                                    let totalGrandTotal = 0;\n                                                    let totalFreightAmount = 0;\n                                                    let freightCostEntries = []; // Add array for freight entries\n\n                                                    // Process all selected receipts\n                                                    const promises = selected_docs.map(doc => \n                                                        new Promise((resolve, reject) => {\n                                                            frappe.call({\n                                                                method: 'frappe.client.get',\n                                                                args: { \n                                                                    doctype: 'Purchase Receipt', \n                                                                    name: doc.name \n                                                                },\n                                                                callback: function(r) {\n                                                                    if (r.message) {\n                                                                        resolve(r.message);\n                                                                    } else {\n                                                                        reject('Failed to fetch receipt');\n                                                                    }\n                                                                }\n                                                            });\n                                                        })\n                                                    );\n\n                                                    Promise.all(promises)\n                                                        .then(receipts => {\n                                                            // Create freight cost entries array\n                                                            freightCostEntries = receipts.map(receipt => ({\n                                                                purchase_receipt: receipt.name,  // Add PR name here\n                                                                hsnsac: \"996511\",\n                                                                quantity: \"1\",\n                                                                gst_rate: \"18\",\n                                                                rate: flt(receipt.custom_freight_amount || 0),\n                                                                total_rate: flt(receipt.custom_freight_amount || 0),\n                                                                amount: flt(receipt.custom_freight_amount || 0)\n                                                            }));\n\n                                                            // Original consolidation code\n                                                            receipts.forEach(receipt => {\n                                                                totalGrandTotal += flt(receipt.custom_grand_total || 0);\n                                                                totalFreightAmount += flt(receipt.custom_freight_amount || 0);\n\n                                                                receipt.items.forEach(item => {\n                                                                    const existingItem = consolidatedItems.find(\n                                                                        ci => ci.item_name.toLowerCase() === item.item_name.toLowerCase() && \n                                                                             ci.custom_gstn_value === item.custom_gstn_value\n                                                                    );\n\n                                                                    if (existingItem) {\n                                                                        const newQty = flt(existingItem.qty) + flt(item.qty);\n                                                                        const newAmount = flt(existingItem.amount) + flt(item.amount);\n                                                                        \n                                                                        existingItem.qty = newQty;\n                                                                        existingItem.amount = newAmount;\n                                                                        existingItem.rate = flt(newAmount / newQty);\n                                                                        existingItem.custom_grand_total = flt(existingItem.custom_grand_total || 0) + flt(item.custom_grand_total || 0);\n                                                                    } else {\n                                                                        consolidatedItems.push({\n                                                                            item_code: item.item_code,\n                                                                            item_name: item.item_name,\n                                                                            qty: flt(item.qty),\n                                                                            rate: flt(item.rate),\n                                                                            amount: flt(item.amount),\n                                                                            warehouse: item.warehouse,\n                                                                            custom_grand_total: flt(item.custom_grand_total || 0),\n                                                                            custom_gstn_value: item.custom_gstn_value\n                                                                        });\n                                                                    }\n                                                                });\n                                                            });\n\n                                                            // Prepare taxes array from template\n                                                            let taxes = [];\n                                                            if (tax_template.taxes) {\n                                                                taxes = tax_template.taxes.map((tax, idx) => {\n                                                                    let row_id = null;\n                                                                    if (tax.charge_type === 'On Previous Row Amount' || tax.charge_type === 'On Previous Row Total') {\n                                                                        if (tax.row_id && parseInt(tax.row_id) < (idx + 1)) {\n                                                                            row_id = tax.row_id;\n                                                                        } else {\n                                                                            frappe.throw(__(`Invalid row reference in tax row ${idx + 1}`));\n                                                                        }\n                                                                    }\n\n                                                                    return {\n                                                                        account_head: tax.account_head,\n                                                                        charge_type: tax.charge_type,\n                                                                        row_id: row_id,\n                                                                        description: tax.description,\n                                                                        included_in_print_rate: tax.included_in_print_rate || 0,\n                                                                        included_in_paid_amount: tax.included_in_paid_amount || 0,\n                                                                        rate: tax.rate,\n                                                                        account_currency: tax.account_currency,\n                                                                        cost_center: tax.cost_center\n                                                                    };\n                                                                });\n                                                            }\n\n                                                            // Create Purchase Invoice with address fields\n                                                            const doc = {\n                                                                doctype: 'Purchase Invoice',\n                                                                naming_series: naming_series,\n                                                                custom_fiscal_year: display_fiscal_year,\n                                                                custom_vendor_code: vendor_code,\n                                                                supplier: firstSupplier,\n                                                                custom_vendor: firstVendor,\n                                                                custom_branch: firstBranch,\n                                                                tax_category: firstTaxCategory,\n                                                                taxes_and_charges: firstTaxesAndCharges,\n                                                                taxes: taxes,\n                                                                items: consolidatedItems,\n                                                                custom_grand_total: totalGrandTotal,\n                                                                custom_freight_amount: totalFreightAmount,\n                                                                update_stock: 1,\n                                                                is_return: isReturn,\n                                                                supplier_address: supplier_address,\n                                                                shipping_address: shipping_address,\n                                                                billing_address: billing_address,\n                                                                custom_vendor_address: vendor_address,\n                                                                freight_cost_data: freightCostEntries // Add freight cost entries here\n                                                            };\n\n                                                            console.log('Creating Purchase Invoice with:', doc);\n\n                                                            frappe.call({\n                                                                method: 'frappe.client.insert',\n                                                                args: { doc: doc },\n                                                                callback: function(response) {\n                                                                    if (response.message) {\n                                                                        frappe.msgprint({\n                                                                            title: __('Success'),\n                                                                            indicator: 'green',\n                                                                            message: __('Purchase Invoice created successfully: ') + response.message.name\n                                                                        });\n                                                                    } else {\n                                                                        frappe.msgprint({\n                                                                            title: __('Error'),\n                                                                            indicator: 'red',\n                                                                            message: __('Failed to create Purchase Invoice')\n                                                                        });\n                                                                    }\n                                                                }\n                                                            });\n                                                        })\n                                                        .catch(error => {\n                                                            console.error('Error processing receipts:', error);\n                                                            frappe.msgprint({\n                                                                title: __('Error'),\n                                                                indicator: 'red',\n                                                                message: __('Error processing receipts: ') + error\n                                                            });\n                                                        });\n                                                } catch (error) {\n                                                    console.error('Error in tax template processing:', error);\n                                                    frappe.msgprint({\n                                                        title: __('Error'),\n                                                        indicator: 'red',\n                                                        message: __('Error in tax template processing: ') + error.message\n                                                    });\n                                                }\n                                            }\n                                        });\n                                    } catch (error) {\n                                        console.error('Error processing first document:', error);\n                                        frappe.msgprint({\n                                            title: __('Error'),\n                                            indicator: 'red',\n                                            message: __('Error processing first document: ') + error.message\n                                        });\n                                    }\n                                }\n                            });\n                        } catch (error) {\n                            console.error('Error in fiscal year processing:', error);\n                            frappe.msgprint({\n                                title: __('Error'),\n                                indicator: 'red',\n                                message: __('Error in fiscal year processing: ') + error.message\n                            });\n                        }\n                    }\n                });\n            } catch (error) {\n                console.error('Error in main function:', error);\n                frappe.msgprint({\n                    title: __('Error'),\n                    indicator: 'red',\n                    message: __('Error in main function: ') + error.message\n                });\n            }\n        });\n    },\n\n    onrender: function(listview) {\n        listview.page.wrapper.find('.list-row-checkbox').removeClass('hide');\n    }\n};",
  "view": "List"
 },
 {
  "docstatus": 0,
  "doctype": "Client Script",
  "dt": "Branch",
  "enabled": 1,
  "modified": "2025-01-16 10:53:37.959094",
  "module": "o2o ErpNext",
  "name": "Branch Validation",
  "script": "frappe.ui.form.on('Branch', {\n    setup: function(frm) {\n        frm.validation_queue = Promise.resolve();\n        frm.supplier_check_in_progress = false;\n        \n        // Add query filter for supplier field\n        frm.set_query('custom_supplier', function() {\n            return {\n                filters: {\n                    'custom_user': frappe.session.user\n                }\n            };\n        });\n    },\n    \n    before_save: function(frm) {\n        if (frm.is_new()) {\n            return new Promise((resolve, reject) => {\n                const custom_supplier = frm.doc.custom_supplier;\n                \n                if (!custom_supplier) {\n                    frappe.msgprint({\n                        title: __('Missing Supplier'),\n                        message: __('Please select a Supplier'),\n                        indicator: 'red'\n                    });\n                    frappe.validated = false;\n                    reject();\n                    return;\n                }\n                \n                // First verify user permission\n                frappe.call({\n                    method: 'frappe.client.get_value',\n                    args: {\n                        doctype: 'Supplier',\n                        filters: { 'name': custom_supplier },\n                        fieldname: 'custom_user'\n                    },\n                    callback: function(user_response) {\n                        if (!user_response.message || user_response.message.custom_user !== frappe.session.user) {\n                            frappe.msgprint({\n                                title: __('Invalid Supplier Selection'),\n                                message: __('Please select a Supplier associated with your account'),\n                                indicator: 'red'\n                            });\n                            frappe.validated = false;\n                            reject();\n                            return;\n                        }\n                        \n                        // Then check for existing branches\n                        frm.supplier_check_in_progress = true;\n                        frappe.call({\n                            method: 'frappe.client.get_list',\n                            args: {\n                                doctype: 'Branch',\n                                filters: {\n                                    'custom_supplier': custom_supplier,\n                                    'name': ['!=', frm.doc.name || '']\n                                },\n                                fields: ['name', 'creation']\n                            },\n                            callback: function(response) {\n                                frm.supplier_check_in_progress = false;\n                                \n                                if (response.message && response.message.length > 0) {\n                                    const existingBranch = response.message[0];\n                                    frappe.validated = false;\n                                    frappe.msgprint({\n                                        title: __('Duplicate Branch'),\n                                        message: __('This supplier already has a branch (created on {0}). Only one branch is allowed per supplier.', \n                                            [frappe.datetime.str_to_user(existingBranch.creation)]),\n                                        indicator: 'red'\n                                    });\n                                    reject();\n                                } else {\n                                    resolve();\n                                }\n                            }\n                        });\n                    }\n                });\n            });\n        }\n    },\n    \n    custom_supplier: function(frm) {\n        if (!frm.doc.custom_supplier) return;\n        \n        if (frm.supplier_check_timeout) {\n            clearTimeout(frm.supplier_check_timeout);\n        }\n        \n        frm.supplier_check_timeout = setTimeout(() => {\n            // First verify user permission\n            frappe.call({\n                method: 'frappe.client.get_value',\n                args: {\n                    doctype: 'Supplier',\n                    filters: { 'name': frm.doc.custom_supplier },\n                    fieldname: 'custom_user'\n                },\n                callback: function(user_response) {\n                    if (!user_response.message || user_response.message.custom_user !== frappe.session.user) {\n                        frm.set_value('custom_supplier', '');\n                        frappe.show_alert({\n                            message: __('Please select a Supplier associated with your user account'),\n                            indicator: 'red'\n                        });\n                        return;\n                    }\n                    \n                    // Then check for existing branches\n                    frappe.call({\n                        method: 'frappe.client.get_list',\n                        args: {\n                            doctype: 'Branch',\n                            filters: {\n                                'custom_supplier': frm.doc.custom_supplier,\n                                'name': ['!=', frm.doc.name || '']\n                            },\n                            fields: ['name', 'creation']\n                        },\n                        callback: function(response) {\n                            if (response.message && response.message.length > 0) {\n                                const existingBranch = response.message[0];\n                                frm.set_value('custom_supplier', '');\n                                frappe.show_alert({\n                                    message: __('This supplier already has a branch (created on {0}). Please select a different supplier.',\n                                        [frappe.datetime.str_to_user(existingBranch.creation)]),\n                                    indicator: 'red'\n                                });\n                            }\n                        }\n                    });\n                }\n            });\n        }, 300);\n    },\n    \n    refresh: function(frm) {\n        frm.supplier_check_in_progress = false;\n        if (frm.supplier_check_timeout) {\n            clearTimeout(frm.supplier_check_timeout);\n        }\n    },\n    \n    after_save: function(frm) {\n        if (frm.doc.custom_supplier) {\n            frappe.call({\n                method: 'frappe.client.set_value',\n                args: {\n                    doctype: 'Supplier',\n                    name: frm.doc.custom_supplier,\n                    fieldname: {\n                        'custom_branch': frm.doc.name,\n                        'custom_updated_at': frappe.datetime.now_datetime()\n                    }\n                },\n                callback: function(r) {\n                    if (!r.exc) {\n                        frappe.show_alert({\n                            message: __('Supplier updated with branch reference'),\n                            indicator: 'green'\n                        });\n                        // Reload the Supplier form if it's open\n                        if (cur_frm && cur_frm.doctype === 'Supplier' && cur_frm.doc.name === frm.doc.custom_supplier) {\n                            cur_frm.reload_doc();\n                        }\n                    } else {\n                        frappe.show_alert({\n                            message: __('Failed to update Supplier with branch reference'),\n                            indicator: 'red'\n                        });\n                    }\n                }\n            });\n        }\n    }\n});",
  "view": "Form"
 },
 {
  "docstatus": 0,
  "doctype": "Client Script",
  "dt": "Branch",
  "enabled": 0,
  "modified": "2024-12-30 11:25:49.537796",
  "module": null,
  "name": "Branch Validation v2",
  "script": "// Client Script for Branch DocType\nfrappe.ui.form.on('Branch', {\n    setup: function(frm) {\n        frm.custom_entity_check_in_progress = false;\n    },\n    \n    validate: function(frm) {\n        return new Promise((resolve, reject) => {\n            if (frm.custom_entity_check_in_progress) {\n                resolve();\n                return;\n            }\n            \n            frm.custom_entity_check_in_progress = true;\n            \n            // Get custom_entity from the form\n            const custom_entity = frm.doc.custom_entity;\n            \n            if (!custom_entity) {\n                frm.custom_entity_check_in_progress = false;\n                frappe.throw(__('Please select an Entity'));\n                reject();\n                return;\n            }\n            \n            // First check if the logged-in user matches the entity's custom_user\n            frappe.call({\n                method: 'frappe.client.get_value',\n                args: {\n                    doctype: 'Supplier',\n                    filters: { name: custom_entity },\n                    fieldname: 'custom_user'\n                },\n                callback: function(user_response) {\n                    if (!user_response.message || user_response.message.custom_user !== frappe.session.user) {\n                        frm.custom_entity_check_in_progress = false;\n                        frappe.throw(__('You can only create/edit branches for entities assigned to your user account.'));\n                        reject();\n                        return;\n                    }\n                    \n                    // If user check passes, then check for existing branches\n                    frappe.call({\n                        method: 'frappe.client.get_list',\n                        args: {\n                            doctype: 'Branch',\n                            filters: {\n                                'custom_entity': custom_entity,\n                                'name': ['!=', frm.doc.name || '']\n                            },\n                            fields: ['name']\n                        },\n                        callback: function(response) {\n                            frm.custom_entity_check_in_progress = false;\n                            \n                            if (response.message && response.message.length > 0) {\n                                // Existing branch found\n                                frappe.validated = false;\n                                frappe.throw(__('This entity already has a branch. Only one branch is allowed per entity.'));\n                                reject();\n                            } else {\n                                resolve();\n                            }\n                        },\n                        error: function(err) {\n                            frm.custom_entity_check_in_progress = false;\n                            frappe.throw(__('Error checking entity branches: ') + err);\n                            reject();\n                        }\n                    });\n                },\n                error: function(err) {\n                    frm.custom_entity_check_in_progress = false;\n                    frappe.throw(__('Error checking user permissions: ') + err);\n                    reject();\n                }\n            });\n        });\n    },\n    \n    custom_entity: function(frm) {\n        if (!frm.doc.custom_entity) return;\n        \n        // First check user permission\n        frappe.call({\n            method: 'frappe.client.get_value',\n            args: {\n                doctype: 'Supplier',\n                filters: { name: frm.doc.custom_entity },\n                fieldname: 'custom_user'\n            },\n            callback: function(user_response) {\n                if (!user_response.message || user_response.message.custom_user !== frappe.session.user) {\n                    frm.set_value('custom_entity', '');\n                    frappe.show_alert({\n                        message: __('You can only select entities assigned to your user account.'),\n                        indicator: 'red'\n                    });\n                    return;\n                }\n                \n                // If user check passes, then check for existing branches\n                frappe.call({\n                    method: 'frappe.client.get_list',\n                    args: {\n                        doctype: 'Branch',\n                        filters: {\n                            'custom_entity': frm.doc.custom_entity,\n                            'name': ['!=', frm.doc.name || '']\n                        },\n                        fields: ['name']\n                    },\n                    callback: function(response) {\n                        if (response.message && response.message.length > 0) {\n                            frm.set_value('custom_entity', '');\n                            frappe.show_alert({\n                                message: __('This entity already has a branch. Please select a different entity.'),\n                                indicator: 'red'\n                            });\n                        }\n                    }\n                });\n            }\n        });\n    }\n});",
  "view": "Form"
 },
 {
  "docstatus": 0,
  "doctype": "Client Script",
  "dt": "Employee",
  "enabled": 1,
  "modified": "2025-01-16 10:53:50.273679",
  "module": "o2o ErpNext",
  "name": "Employee Restrictions",
  "script": "frappe.ui.form.on('Employee', {\n    setup: function(frm) {\n        frm.set_query('custom_supplier', function() {\n            return {\n                filters: {\n                    'custom_user': frappe.session.user\n                }\n            };\n        });\n    },\n    \n    validate: function(frm) {\n        if (frm.doc.custom_supplier) {\n            frappe.call({\n                method: 'frappe.client.get_value',\n                args: {\n                    doctype: 'Supplier',\n                    filters: {\n                        'name': frm.doc.custom_supplier\n                    },\n                    fieldname: ['custom_user', 'custom_branch']\n                },\n                callback: function(r) {\n                    if (r.message && r.message.custom_user !== frappe.session.user) {\n                        frappe.validated = false;\n                        frappe.throw(__('You can only select suppliers associated with your user account'));\n                    } else if (r.message) {\n                        frm.set_value('branch', r.message.custom_branch);\n                    }\n                }\n            });\n        }\n    },\n    \n    after_save: function(frm) {\n        if (frm.doc.custom_user_email && frm.doc.custom_roles && !frm.doc.__islocal) {\n            frappe.call({\n                method: 'frappe.client.get',\n                args: {\n                    doctype: 'User',\n                    name: frm.doc.custom_user_email\n                },\n                callback: function(r) {\n                    if (!r.message) {\n                        const user = frappe.model.get_new_doc('User');\n                        user.email = frm.doc.custom_user_email;\n                        user.first_name = frm.doc.first_name;\n                        user.last_name = frm.doc.last_name;\n                        user.enabled = 1;\n                        user.send_welcome_email = 0;\n                        frm.doc.custom_roles.split(',').forEach(role => {\n                            let user_role = frappe.model.add_child(user, 'Has Role', 'roles');\n                            user_role.role = role.trim();\n                        });\n                        user.insert()\n                            .then(() => {\n                                frm.set_value('user_id', frm.doc.custom_user_email);\n                                frm.save();\n                                frappe.show_alert({\n                                    message: __('User created successfully'),\n                                    indicator: 'green'\n                                });\n                            })\n                            .catch(err => {\n                                frappe.throw(__('Error creating user: ' + err.message));\n                            });\n                    }\n                }\n            });\n        }\n    },\n    \n    custom_supplier: function(frm) {\n        if (frm.doc.custom_supplier) {\n            frappe.call({\n                method: 'frappe.client.get_value',\n                args: {\n                    doctype: 'Supplier',\n                    filters: { 'name': frm.doc.custom_supplier },\n                    fieldname: 'custom_branch'\n                },\n                callback: function(r) {\n                    if (r.message) {\n                        frm.set_value('branch', r.message.custom_branch);\n                    }\n                }\n            });\n        } else {\n            frm.set_value('branch', '');\n        }\n    }\n});",
  "view": "Form"
 },
 {
  "docstatus": 0,
  "doctype": "Client Script",
  "dt": "Supplier",
  "enabled": 0,
  "modified": "2025-01-16 10:54:22.721498",
  "module": "",
  "name": "Entity Restriction",
  "script": "// In Client Scripts section of Supplier doctype:\n\nfrappe.ui.form.on(\"Entity\", {\n   refresh: function(frm) {\n       if(frappe.user.has_role('Entity')) {\n           frm.list_view_settings = {\n               onload: function(listview) {\n                   listview.filter_area.clear();\n                   listview.filter_area.add([[\"Supplier\", \"custom_user\", \"=\", frappe.session.user]]);\n                   listview.filter_area.on('change', () => {\n                       let filters = listview.filter_area.get();\n                       let hasFilter = filters.some(f => f[1] === 'custom_user');\n                       if(!hasFilter) {\n                           listview.filter_area.add([[\"Supplier\", \"custom_user\", \"=\", frappe.session.user]]);\n                       }\n                   });\n                   listview.refresh();\n               }\n           };\n       }\n   }\n});",
  "view": "List"
 }
]